using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TRegExam class.
	/// </summary>
    [Serializable]
	public partial class TRegExamCollection : ActiveList<TRegExam, TRegExamCollection>
	{	   
		public TRegExamCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TRegExamCollection</returns>
		public TRegExamCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TRegExam o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Reg_Exam table.
	/// </summary>
	[Serializable]
	public partial class TRegExam : ActiveRecord<TRegExam>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TRegExam()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TRegExam(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TRegExam(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TRegExam(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Reg_Exam", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarRegId = new TableSchema.TableColumn(schema);
				colvarRegId.ColumnName = "Reg_ID";
				colvarRegId.DataType = DbType.Int64;
				colvarRegId.MaxLength = 0;
				colvarRegId.AutoIncrement = true;
				colvarRegId.IsNullable = false;
				colvarRegId.IsPrimaryKey = true;
				colvarRegId.IsForeignKey = false;
				colvarRegId.IsReadOnly = false;
				colvarRegId.DefaultSetting = @"";
				colvarRegId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegId);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int64;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = false;
				colvarPatientId.IsPrimaryKey = false;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "Patient_Code";
				colvarPatientCode.DataType = DbType.AnsiString;
				colvarPatientCode.MaxLength = 10;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = false;
				colvarPatientCode.IsPrimaryKey = false;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarRegFee = new TableSchema.TableColumn(schema);
				colvarRegFee.ColumnName = "Reg_Fee";
				colvarRegFee.DataType = DbType.Currency;
				colvarRegFee.MaxLength = 0;
				colvarRegFee.AutoIncrement = false;
				colvarRegFee.IsNullable = false;
				colvarRegFee.IsPrimaryKey = false;
				colvarRegFee.IsForeignKey = false;
				colvarRegFee.IsReadOnly = false;
				colvarRegFee.DefaultSetting = @"";
				colvarRegFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegFee);
				
				TableSchema.TableColumn colvarPaymentStatus = new TableSchema.TableColumn(schema);
				colvarPaymentStatus.ColumnName = "Payment_Status";
				colvarPaymentStatus.DataType = DbType.Byte;
				colvarPaymentStatus.MaxLength = 0;
				colvarPaymentStatus.AutoIncrement = false;
				colvarPaymentStatus.IsNullable = false;
				colvarPaymentStatus.IsPrimaryKey = false;
				colvarPaymentStatus.IsForeignKey = false;
				colvarPaymentStatus.IsReadOnly = false;
				
						colvarPaymentStatus.DefaultSetting = @"((0))";
				colvarPaymentStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentStatus);
				
				TableSchema.TableColumn colvarRegDate = new TableSchema.TableColumn(schema);
				colvarRegDate.ColumnName = "Reg_Date";
				colvarRegDate.DataType = DbType.DateTime;
				colvarRegDate.MaxLength = 0;
				colvarRegDate.AutoIncrement = false;
				colvarRegDate.IsNullable = true;
				colvarRegDate.IsPrimaryKey = false;
				colvarRegDate.IsForeignKey = false;
				colvarRegDate.IsReadOnly = false;
				
						colvarRegDate.DefaultSetting = @"(getdate())";
				colvarRegDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegDate);
				
				TableSchema.TableColumn colvarInputDate = new TableSchema.TableColumn(schema);
				colvarInputDate.ColumnName = "Input_Date";
				colvarInputDate.DataType = DbType.DateTime;
				colvarInputDate.MaxLength = 0;
				colvarInputDate.AutoIncrement = false;
				colvarInputDate.IsNullable = true;
				colvarInputDate.IsPrimaryKey = false;
				colvarInputDate.IsForeignKey = false;
				colvarInputDate.IsReadOnly = false;
				
						colvarInputDate.DefaultSetting = @"(getdate())";
				colvarInputDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInputDate);
				
				TableSchema.TableColumn colvarUserId = new TableSchema.TableColumn(schema);
				colvarUserId.ColumnName = "User_ID";
				colvarUserId.DataType = DbType.AnsiString;
				colvarUserId.MaxLength = 50;
				colvarUserId.AutoIncrement = false;
				colvarUserId.IsNullable = true;
				colvarUserId.IsPrimaryKey = false;
				colvarUserId.IsForeignKey = false;
				colvarUserId.IsReadOnly = false;
				colvarUserId.DefaultSetting = @"";
				colvarUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserId);
				
				TableSchema.TableColumn colvarSurchargePrice = new TableSchema.TableColumn(schema);
				colvarSurchargePrice.ColumnName = "Surcharge_Price";
				colvarSurchargePrice.DataType = DbType.Currency;
				colvarSurchargePrice.MaxLength = 0;
				colvarSurchargePrice.AutoIncrement = false;
				colvarSurchargePrice.IsNullable = true;
				colvarSurchargePrice.IsPrimaryKey = false;
				colvarSurchargePrice.IsForeignKey = false;
				colvarSurchargePrice.IsReadOnly = false;
				colvarSurchargePrice.DefaultSetting = @"";
				colvarSurchargePrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurchargePrice);
				
				TableSchema.TableColumn colvarDepartmentId = new TableSchema.TableColumn(schema);
				colvarDepartmentId.ColumnName = "Department_ID";
				colvarDepartmentId.DataType = DbType.Int16;
				colvarDepartmentId.MaxLength = 0;
				colvarDepartmentId.AutoIncrement = false;
				colvarDepartmentId.IsNullable = true;
				colvarDepartmentId.IsPrimaryKey = false;
				colvarDepartmentId.IsForeignKey = false;
				colvarDepartmentId.IsReadOnly = false;
				colvarDepartmentId.DefaultSetting = @"";
				colvarDepartmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentId);
				
				TableSchema.TableColumn colvarDoctorAssignId = new TableSchema.TableColumn(schema);
				colvarDoctorAssignId.ColumnName = "DoctorAssign_ID";
				colvarDoctorAssignId.DataType = DbType.Int16;
				colvarDoctorAssignId.MaxLength = 0;
				colvarDoctorAssignId.AutoIncrement = false;
				colvarDoctorAssignId.IsNullable = true;
				colvarDoctorAssignId.IsPrimaryKey = false;
				colvarDoctorAssignId.IsForeignKey = false;
				colvarDoctorAssignId.IsReadOnly = false;
				colvarDoctorAssignId.DefaultSetting = @"";
				colvarDoctorAssignId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDoctorAssignId);
				
				TableSchema.TableColumn colvarActived = new TableSchema.TableColumn(schema);
				colvarActived.ColumnName = "Actived";
				colvarActived.DataType = DbType.Byte;
				colvarActived.MaxLength = 0;
				colvarActived.AutoIncrement = false;
				colvarActived.IsNullable = true;
				colvarActived.IsPrimaryKey = false;
				colvarActived.IsForeignKey = false;
				colvarActived.IsReadOnly = false;
				
						colvarActived.DefaultSetting = @"((0))";
				colvarActived.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActived);
				
				TableSchema.TableColumn colvarPrintId = new TableSchema.TableColumn(schema);
				colvarPrintId.ColumnName = "Print_ID";
				colvarPrintId.DataType = DbType.Byte;
				colvarPrintId.MaxLength = 0;
				colvarPrintId.AutoIncrement = false;
				colvarPrintId.IsNullable = true;
				colvarPrintId.IsPrimaryKey = false;
				colvarPrintId.IsForeignKey = false;
				colvarPrintId.IsReadOnly = false;
				
						colvarPrintId.DefaultSetting = @"((0))";
				colvarPrintId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrintId);
				
				TableSchema.TableColumn colvarModifyDate = new TableSchema.TableColumn(schema);
				colvarModifyDate.ColumnName = "Modify_Date";
				colvarModifyDate.DataType = DbType.DateTime;
				colvarModifyDate.MaxLength = 0;
				colvarModifyDate.AutoIncrement = false;
				colvarModifyDate.IsNullable = true;
				colvarModifyDate.IsPrimaryKey = false;
				colvarModifyDate.IsForeignKey = false;
				colvarModifyDate.IsReadOnly = false;
				colvarModifyDate.DefaultSetting = @"";
				colvarModifyDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifyDate);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "Status";
				colvarStatus.DataType = DbType.Byte;
				colvarStatus.MaxLength = 0;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = true;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				
						colvarStatus.DefaultSetting = @"((0))";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarExamId = new TableSchema.TableColumn(schema);
				colvarExamId.ColumnName = "Exam_ID";
				colvarExamId.DataType = DbType.Int32;
				colvarExamId.MaxLength = 0;
				colvarExamId.AutoIncrement = false;
				colvarExamId.IsNullable = true;
				colvarExamId.IsPrimaryKey = false;
				colvarExamId.IsForeignKey = false;
				colvarExamId.IsReadOnly = false;
				
						colvarExamId.DefaultSetting = @"((-1))";
				colvarExamId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExamId);
				
				TableSchema.TableColumn colvarIsCancel = new TableSchema.TableColumn(schema);
				colvarIsCancel.ColumnName = "IsCancel";
				colvarIsCancel.DataType = DbType.Byte;
				colvarIsCancel.MaxLength = 0;
				colvarIsCancel.AutoIncrement = false;
				colvarIsCancel.IsNullable = true;
				colvarIsCancel.IsPrimaryKey = false;
				colvarIsCancel.IsForeignKey = false;
				colvarIsCancel.IsReadOnly = false;
				
						colvarIsCancel.DefaultSetting = @"((0))";
				colvarIsCancel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCancel);
				
				TableSchema.TableColumn colvarSoKham = new TableSchema.TableColumn(schema);
				colvarSoKham.ColumnName = "So_Kham";
				colvarSoKham.DataType = DbType.Int16;
				colvarSoKham.MaxLength = 0;
				colvarSoKham.AutoIncrement = false;
				colvarSoKham.IsNullable = true;
				colvarSoKham.IsPrimaryKey = false;
				colvarSoKham.IsForeignKey = false;
				colvarSoKham.IsReadOnly = false;
				colvarSoKham.DefaultSetting = @"";
				colvarSoKham.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoKham);
				
				TableSchema.TableColumn colvarGiaBhytCt = new TableSchema.TableColumn(schema);
				colvarGiaBhytCt.ColumnName = "Gia_BHYT_CT";
				colvarGiaBhytCt.DataType = DbType.Decimal;
				colvarGiaBhytCt.MaxLength = 0;
				colvarGiaBhytCt.AutoIncrement = false;
				colvarGiaBhytCt.IsNullable = true;
				colvarGiaBhytCt.IsPrimaryKey = false;
				colvarGiaBhytCt.IsForeignKey = false;
				colvarGiaBhytCt.IsReadOnly = false;
				colvarGiaBhytCt.DefaultSetting = @"";
				colvarGiaBhytCt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGiaBhytCt);
				
				TableSchema.TableColumn colvarGiaBnct = new TableSchema.TableColumn(schema);
				colvarGiaBnct.ColumnName = "Gia_BNCT";
				colvarGiaBnct.DataType = DbType.Decimal;
				colvarGiaBnct.MaxLength = 0;
				colvarGiaBnct.AutoIncrement = false;
				colvarGiaBnct.IsNullable = true;
				colvarGiaBnct.IsPrimaryKey = false;
				colvarGiaBnct.IsForeignKey = false;
				colvarGiaBnct.IsReadOnly = false;
				colvarGiaBnct.DefaultSetting = @"";
				colvarGiaBnct.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGiaBnct);
				
				TableSchema.TableColumn colvarPaymentDate = new TableSchema.TableColumn(schema);
				colvarPaymentDate.ColumnName = "Payment_Date";
				colvarPaymentDate.DataType = DbType.DateTime;
				colvarPaymentDate.MaxLength = 0;
				colvarPaymentDate.AutoIncrement = false;
				colvarPaymentDate.IsNullable = true;
				colvarPaymentDate.IsPrimaryKey = false;
				colvarPaymentDate.IsForeignKey = false;
				colvarPaymentDate.IsReadOnly = false;
				colvarPaymentDate.DefaultSetting = @"";
				colvarPaymentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentDate);
				
				TableSchema.TableColumn colvarFromDepartmentId = new TableSchema.TableColumn(schema);
				colvarFromDepartmentId.ColumnName = "From_Department_ID";
				colvarFromDepartmentId.DataType = DbType.Int16;
				colvarFromDepartmentId.MaxLength = 0;
				colvarFromDepartmentId.AutoIncrement = false;
				colvarFromDepartmentId.IsNullable = true;
				colvarFromDepartmentId.IsPrimaryKey = false;
				colvarFromDepartmentId.IsForeignKey = false;
				colvarFromDepartmentId.IsReadOnly = false;
				colvarFromDepartmentId.DefaultSetting = @"";
				colvarFromDepartmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFromDepartmentId);
				
				TableSchema.TableColumn colvarNoiTru = new TableSchema.TableColumn(schema);
				colvarNoiTru.ColumnName = "NoiTru";
				colvarNoiTru.DataType = DbType.Byte;
				colvarNoiTru.MaxLength = 0;
				colvarNoiTru.AutoIncrement = false;
				colvarNoiTru.IsNullable = true;
				colvarNoiTru.IsPrimaryKey = false;
				colvarNoiTru.IsForeignKey = false;
				colvarNoiTru.IsReadOnly = false;
				
						colvarNoiTru.DefaultSetting = @"((0))";
				colvarNoiTru.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoiTru);
				
				TableSchema.TableColumn colvarXacNhan = new TableSchema.TableColumn(schema);
				colvarXacNhan.ColumnName = "XAC_NHAN";
				colvarXacNhan.DataType = DbType.Byte;
				colvarXacNhan.MaxLength = 0;
				colvarXacNhan.AutoIncrement = false;
				colvarXacNhan.IsNullable = true;
				colvarXacNhan.IsPrimaryKey = false;
				colvarXacNhan.IsForeignKey = false;
				colvarXacNhan.IsReadOnly = false;
				
						colvarXacNhan.DefaultSetting = @"((0))";
				colvarXacNhan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXacNhan);
				
				TableSchema.TableColumn colvarPaymentId = new TableSchema.TableColumn(schema);
				colvarPaymentId.ColumnName = "Payment_ID";
				colvarPaymentId.DataType = DbType.Int32;
				colvarPaymentId.MaxLength = 0;
				colvarPaymentId.AutoIncrement = false;
				colvarPaymentId.IsNullable = true;
				colvarPaymentId.IsPrimaryKey = false;
				colvarPaymentId.IsForeignKey = false;
				colvarPaymentId.IsReadOnly = false;
				colvarPaymentId.DefaultSetting = @"";
				colvarPaymentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentId);
				
				TableSchema.TableColumn colvarIdBsyThien = new TableSchema.TableColumn(schema);
				colvarIdBsyThien.ColumnName = "ID_BSY_THIEN";
				colvarIdBsyThien.DataType = DbType.Int16;
				colvarIdBsyThien.MaxLength = 0;
				colvarIdBsyThien.AutoIncrement = false;
				colvarIdBsyThien.IsNullable = true;
				colvarIdBsyThien.IsPrimaryKey = false;
				colvarIdBsyThien.IsForeignKey = false;
				colvarIdBsyThien.IsReadOnly = false;
				colvarIdBsyThien.DefaultSetting = @"";
				colvarIdBsyThien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdBsyThien);
				
				TableSchema.TableColumn colvarIdGoiDvu = new TableSchema.TableColumn(schema);
				colvarIdGoiDvu.ColumnName = "ID_GOI_DVU";
				colvarIdGoiDvu.DataType = DbType.Int32;
				colvarIdGoiDvu.MaxLength = 0;
				colvarIdGoiDvu.AutoIncrement = false;
				colvarIdGoiDvu.IsNullable = true;
				colvarIdGoiDvu.IsPrimaryKey = false;
				colvarIdGoiDvu.IsForeignKey = false;
				colvarIdGoiDvu.IsReadOnly = false;
				colvarIdGoiDvu.DefaultSetting = @"";
				colvarIdGoiDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdGoiDvu);
				
				TableSchema.TableColumn colvarKieuKhambenh = new TableSchema.TableColumn(schema);
				colvarKieuKhambenh.ColumnName = "KIEU_KHAMBENH";
				colvarKieuKhambenh.DataType = DbType.String;
				colvarKieuKhambenh.MaxLength = 200;
				colvarKieuKhambenh.AutoIncrement = false;
				colvarKieuKhambenh.IsNullable = true;
				colvarKieuKhambenh.IsPrimaryKey = false;
				colvarKieuKhambenh.IsForeignKey = false;
				colvarKieuKhambenh.IsReadOnly = false;
				colvarKieuKhambenh.DefaultSetting = @"";
				colvarKieuKhambenh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKieuKhambenh);
				
				TableSchema.TableColumn colvarTrongGoi = new TableSchema.TableColumn(schema);
				colvarTrongGoi.ColumnName = "TRONG_GOI";
				colvarTrongGoi.DataType = DbType.Int32;
				colvarTrongGoi.MaxLength = 0;
				colvarTrongGoi.AutoIncrement = false;
				colvarTrongGoi.IsNullable = true;
				colvarTrongGoi.IsPrimaryKey = false;
				colvarTrongGoi.IsForeignKey = false;
				colvarTrongGoi.IsReadOnly = false;
				colvarTrongGoi.DefaultSetting = @"";
				colvarTrongGoi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrongGoi);
				
				TableSchema.TableColumn colvarIpMacSua = new TableSchema.TableColumn(schema);
				colvarIpMacSua.ColumnName = "IP_MAC_SUA";
				colvarIpMacSua.DataType = DbType.String;
				colvarIpMacSua.MaxLength = 100;
				colvarIpMacSua.AutoIncrement = false;
				colvarIpMacSua.IsNullable = true;
				colvarIpMacSua.IsPrimaryKey = false;
				colvarIpMacSua.IsForeignKey = false;
				colvarIpMacSua.IsReadOnly = false;
				colvarIpMacSua.DefaultSetting = @"";
				colvarIpMacSua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpMacSua);
				
				TableSchema.TableColumn colvarIpMacTao = new TableSchema.TableColumn(schema);
				colvarIpMacTao.ColumnName = "IP_MAC_TAO";
				colvarIpMacTao.DataType = DbType.String;
				colvarIpMacTao.MaxLength = 100;
				colvarIpMacTao.AutoIncrement = false;
				colvarIpMacTao.IsNullable = true;
				colvarIpMacTao.IsPrimaryKey = false;
				colvarIpMacTao.IsForeignKey = false;
				colvarIpMacTao.IsReadOnly = false;
				colvarIpMacTao.DefaultSetting = @"";
				colvarIpMacTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpMacTao);
				
				TableSchema.TableColumn colvarIpMaySua = new TableSchema.TableColumn(schema);
				colvarIpMaySua.ColumnName = "IP_MAY_SUA";
				colvarIpMaySua.DataType = DbType.String;
				colvarIpMaySua.MaxLength = 20;
				colvarIpMaySua.AutoIncrement = false;
				colvarIpMaySua.IsNullable = true;
				colvarIpMaySua.IsPrimaryKey = false;
				colvarIpMaySua.IsForeignKey = false;
				colvarIpMaySua.IsReadOnly = false;
				colvarIpMaySua.DefaultSetting = @"";
				colvarIpMaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpMaySua);
				
				TableSchema.TableColumn colvarIpMayTao = new TableSchema.TableColumn(schema);
				colvarIpMayTao.ColumnName = "IP_MAY_TAO";
				colvarIpMayTao.DataType = DbType.String;
				colvarIpMayTao.MaxLength = 20;
				colvarIpMayTao.AutoIncrement = false;
				colvarIpMayTao.IsNullable = true;
				colvarIpMayTao.IsPrimaryKey = false;
				colvarIpMayTao.IsForeignKey = false;
				colvarIpMayTao.IsReadOnly = false;
				colvarIpMayTao.DefaultSetting = @"";
				colvarIpMayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpMayTao);
				
				TableSchema.TableColumn colvarMaKhoaThien = new TableSchema.TableColumn(schema);
				colvarMaKhoaThien.ColumnName = "MA_KHOA_THIEN";
				colvarMaKhoaThien.DataType = DbType.String;
				colvarMaKhoaThien.MaxLength = 10;
				colvarMaKhoaThien.AutoIncrement = false;
				colvarMaKhoaThien.IsNullable = true;
				colvarMaKhoaThien.IsPrimaryKey = false;
				colvarMaKhoaThien.IsForeignKey = false;
				colvarMaKhoaThien.IsReadOnly = false;
				colvarMaKhoaThien.DefaultSetting = @"";
				colvarMaKhoaThien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaKhoaThien);
				
				TableSchema.TableColumn colvarIdPhongChuyen = new TableSchema.TableColumn(schema);
				colvarIdPhongChuyen.ColumnName = "ID_PHONG_CHUYEN";
				colvarIdPhongChuyen.DataType = DbType.Int16;
				colvarIdPhongChuyen.MaxLength = 0;
				colvarIdPhongChuyen.AutoIncrement = false;
				colvarIdPhongChuyen.IsNullable = true;
				colvarIdPhongChuyen.IsPrimaryKey = false;
				colvarIdPhongChuyen.IsForeignKey = false;
				colvarIdPhongChuyen.IsReadOnly = false;
				colvarIdPhongChuyen.DefaultSetting = @"";
				colvarIdPhongChuyen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhongChuyen);
				
				TableSchema.TableColumn colvarNgayChuyenPhong = new TableSchema.TableColumn(schema);
				colvarNgayChuyenPhong.ColumnName = "NGAY_CHUYEN_PHONG";
				colvarNgayChuyenPhong.DataType = DbType.DateTime;
				colvarNgayChuyenPhong.MaxLength = 0;
				colvarNgayChuyenPhong.AutoIncrement = false;
				colvarNgayChuyenPhong.IsNullable = true;
				colvarNgayChuyenPhong.IsPrimaryKey = false;
				colvarNgayChuyenPhong.IsForeignKey = false;
				colvarNgayChuyenPhong.IsReadOnly = false;
				colvarNgayChuyenPhong.DefaultSetting = @"";
				colvarNgayChuyenPhong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayChuyenPhong);
				
				TableSchema.TableColumn colvarNguoiChuyenPhong = new TableSchema.TableColumn(schema);
				colvarNguoiChuyenPhong.ColumnName = "NGUOI_CHUYEN_PHONG";
				colvarNguoiChuyenPhong.DataType = DbType.String;
				colvarNguoiChuyenPhong.MaxLength = 20;
				colvarNguoiChuyenPhong.AutoIncrement = false;
				colvarNguoiChuyenPhong.IsNullable = true;
				colvarNguoiChuyenPhong.IsPrimaryKey = false;
				colvarNguoiChuyenPhong.IsForeignKey = false;
				colvarNguoiChuyenPhong.IsReadOnly = false;
				colvarNguoiChuyenPhong.DefaultSetting = @"";
				colvarNguoiChuyenPhong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiChuyenPhong);
				
				TableSchema.TableColumn colvarIsPayment = new TableSchema.TableColumn(schema);
				colvarIsPayment.ColumnName = "IsPayment";
				colvarIsPayment.DataType = DbType.Byte;
				colvarIsPayment.MaxLength = 0;
				colvarIsPayment.AutoIncrement = false;
				colvarIsPayment.IsNullable = true;
				colvarIsPayment.IsPrimaryKey = false;
				colvarIsPayment.IsForeignKey = false;
				colvarIsPayment.IsReadOnly = false;
				
						colvarIsPayment.DefaultSetting = @"((0))";
				colvarIsPayment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPayment);
				
				TableSchema.TableColumn colvarTtChuyen = new TableSchema.TableColumn(schema);
				colvarTtChuyen.ColumnName = "TT_CHUYEN";
				colvarTtChuyen.DataType = DbType.Byte;
				colvarTtChuyen.MaxLength = 0;
				colvarTtChuyen.AutoIncrement = false;
				colvarTtChuyen.IsNullable = true;
				colvarTtChuyen.IsPrimaryKey = false;
				colvarTtChuyen.IsForeignKey = false;
				colvarTtChuyen.IsReadOnly = false;
				
						colvarTtChuyen.DefaultSetting = @"((0))";
				colvarTtChuyen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTtChuyen);
				
				TableSchema.TableColumn colvarKhamNgoaigio = new TableSchema.TableColumn(schema);
				colvarKhamNgoaigio.ColumnName = "KHAM_NGOAIGIO";
				colvarKhamNgoaigio.DataType = DbType.Byte;
				colvarKhamNgoaigio.MaxLength = 0;
				colvarKhamNgoaigio.AutoIncrement = false;
				colvarKhamNgoaigio.IsNullable = true;
				colvarKhamNgoaigio.IsPrimaryKey = false;
				colvarKhamNgoaigio.IsForeignKey = false;
				colvarKhamNgoaigio.IsReadOnly = false;
				
						colvarKhamNgoaigio.DefaultSetting = @"((0))";
				colvarKhamNgoaigio.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKhamNgoaigio);
				
				TableSchema.TableColumn colvarMaPhongStt = new TableSchema.TableColumn(schema);
				colvarMaPhongStt.ColumnName = "MA_PHONG_STT";
				colvarMaPhongStt.DataType = DbType.String;
				colvarMaPhongStt.MaxLength = 20;
				colvarMaPhongStt.AutoIncrement = false;
				colvarMaPhongStt.IsNullable = true;
				colvarMaPhongStt.IsPrimaryKey = false;
				colvarMaPhongStt.IsForeignKey = false;
				colvarMaPhongStt.IsReadOnly = false;
				colvarMaPhongStt.DefaultSetting = @"";
				colvarMaPhongStt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaPhongStt);
				
				TableSchema.TableColumn colvarIsNgoaiGio = new TableSchema.TableColumn(schema);
				colvarIsNgoaiGio.ColumnName = "IsNgoaiGio";
				colvarIsNgoaiGio.DataType = DbType.Byte;
				colvarIsNgoaiGio.MaxLength = 0;
				colvarIsNgoaiGio.AutoIncrement = false;
				colvarIsNgoaiGio.IsNullable = true;
				colvarIsNgoaiGio.IsPrimaryKey = false;
				colvarIsNgoaiGio.IsForeignKey = false;
				colvarIsNgoaiGio.IsReadOnly = false;
				
						colvarIsNgoaiGio.DefaultSetting = @"((0))";
				colvarIsNgoaiGio.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsNgoaiGio);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_Reg_Exam",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("RegId")]
		[Bindable(true)]
		public long RegId 
		{
			get { return GetColumnValue<long>(Columns.RegId); }
			set { SetColumnValue(Columns.RegId, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public long PatientId 
		{
			get { return GetColumnValue<long>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("RegFee")]
		[Bindable(true)]
		public decimal RegFee 
		{
			get { return GetColumnValue<decimal>(Columns.RegFee); }
			set { SetColumnValue(Columns.RegFee, value); }
		}
		  
		[XmlAttribute("PaymentStatus")]
		[Bindable(true)]
		public byte PaymentStatus 
		{
			get { return GetColumnValue<byte>(Columns.PaymentStatus); }
			set { SetColumnValue(Columns.PaymentStatus, value); }
		}
		  
		[XmlAttribute("RegDate")]
		[Bindable(true)]
		public DateTime? RegDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.RegDate); }
			set { SetColumnValue(Columns.RegDate, value); }
		}
		  
		[XmlAttribute("InputDate")]
		[Bindable(true)]
		public DateTime? InputDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.InputDate); }
			set { SetColumnValue(Columns.InputDate, value); }
		}
		  
		[XmlAttribute("UserId")]
		[Bindable(true)]
		public string UserId 
		{
			get { return GetColumnValue<string>(Columns.UserId); }
			set { SetColumnValue(Columns.UserId, value); }
		}
		  
		[XmlAttribute("SurchargePrice")]
		[Bindable(true)]
		public decimal? SurchargePrice 
		{
			get { return GetColumnValue<decimal?>(Columns.SurchargePrice); }
			set { SetColumnValue(Columns.SurchargePrice, value); }
		}
		  
		[XmlAttribute("DepartmentId")]
		[Bindable(true)]
		public short? DepartmentId 
		{
			get { return GetColumnValue<short?>(Columns.DepartmentId); }
			set { SetColumnValue(Columns.DepartmentId, value); }
		}
		  
		[XmlAttribute("DoctorAssignId")]
		[Bindable(true)]
		public short? DoctorAssignId 
		{
			get { return GetColumnValue<short?>(Columns.DoctorAssignId); }
			set { SetColumnValue(Columns.DoctorAssignId, value); }
		}
		  
		[XmlAttribute("Actived")]
		[Bindable(true)]
		public byte? Actived 
		{
			get { return GetColumnValue<byte?>(Columns.Actived); }
			set { SetColumnValue(Columns.Actived, value); }
		}
		  
		[XmlAttribute("PrintId")]
		[Bindable(true)]
		public byte? PrintId 
		{
			get { return GetColumnValue<byte?>(Columns.PrintId); }
			set { SetColumnValue(Columns.PrintId, value); }
		}
		  
		[XmlAttribute("ModifyDate")]
		[Bindable(true)]
		public DateTime? ModifyDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifyDate); }
			set { SetColumnValue(Columns.ModifyDate, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public byte? Status 
		{
			get { return GetColumnValue<byte?>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("ExamId")]
		[Bindable(true)]
		public int? ExamId 
		{
			get { return GetColumnValue<int?>(Columns.ExamId); }
			set { SetColumnValue(Columns.ExamId, value); }
		}
		  
		[XmlAttribute("IsCancel")]
		[Bindable(true)]
		public byte? IsCancel 
		{
			get { return GetColumnValue<byte?>(Columns.IsCancel); }
			set { SetColumnValue(Columns.IsCancel, value); }
		}
		  
		[XmlAttribute("SoKham")]
		[Bindable(true)]
		public short? SoKham 
		{
			get { return GetColumnValue<short?>(Columns.SoKham); }
			set { SetColumnValue(Columns.SoKham, value); }
		}
		  
		[XmlAttribute("GiaBhytCt")]
		[Bindable(true)]
		public decimal? GiaBhytCt 
		{
			get { return GetColumnValue<decimal?>(Columns.GiaBhytCt); }
			set { SetColumnValue(Columns.GiaBhytCt, value); }
		}
		  
		[XmlAttribute("GiaBnct")]
		[Bindable(true)]
		public decimal? GiaBnct 
		{
			get { return GetColumnValue<decimal?>(Columns.GiaBnct); }
			set { SetColumnValue(Columns.GiaBnct, value); }
		}
		  
		[XmlAttribute("PaymentDate")]
		[Bindable(true)]
		public DateTime? PaymentDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.PaymentDate); }
			set { SetColumnValue(Columns.PaymentDate, value); }
		}
		  
		[XmlAttribute("FromDepartmentId")]
		[Bindable(true)]
		public short? FromDepartmentId 
		{
			get { return GetColumnValue<short?>(Columns.FromDepartmentId); }
			set { SetColumnValue(Columns.FromDepartmentId, value); }
		}
		  
		[XmlAttribute("NoiTru")]
		[Bindable(true)]
		public byte? NoiTru 
		{
			get { return GetColumnValue<byte?>(Columns.NoiTru); }
			set { SetColumnValue(Columns.NoiTru, value); }
		}
		  
		[XmlAttribute("XacNhan")]
		[Bindable(true)]
		public byte? XacNhan 
		{
			get { return GetColumnValue<byte?>(Columns.XacNhan); }
			set { SetColumnValue(Columns.XacNhan, value); }
		}
		  
		[XmlAttribute("PaymentId")]
		[Bindable(true)]
		public int? PaymentId 
		{
			get { return GetColumnValue<int?>(Columns.PaymentId); }
			set { SetColumnValue(Columns.PaymentId, value); }
		}
		  
		[XmlAttribute("IdBsyThien")]
		[Bindable(true)]
		public short? IdBsyThien 
		{
			get { return GetColumnValue<short?>(Columns.IdBsyThien); }
			set { SetColumnValue(Columns.IdBsyThien, value); }
		}
		  
		[XmlAttribute("IdGoiDvu")]
		[Bindable(true)]
		public int? IdGoiDvu 
		{
			get { return GetColumnValue<int?>(Columns.IdGoiDvu); }
			set { SetColumnValue(Columns.IdGoiDvu, value); }
		}
		  
		[XmlAttribute("KieuKhambenh")]
		[Bindable(true)]
		public string KieuKhambenh 
		{
			get { return GetColumnValue<string>(Columns.KieuKhambenh); }
			set { SetColumnValue(Columns.KieuKhambenh, value); }
		}
		  
		[XmlAttribute("TrongGoi")]
		[Bindable(true)]
		public int? TrongGoi 
		{
			get { return GetColumnValue<int?>(Columns.TrongGoi); }
			set { SetColumnValue(Columns.TrongGoi, value); }
		}
		  
		[XmlAttribute("IpMacSua")]
		[Bindable(true)]
		public string IpMacSua 
		{
			get { return GetColumnValue<string>(Columns.IpMacSua); }
			set { SetColumnValue(Columns.IpMacSua, value); }
		}
		  
		[XmlAttribute("IpMacTao")]
		[Bindable(true)]
		public string IpMacTao 
		{
			get { return GetColumnValue<string>(Columns.IpMacTao); }
			set { SetColumnValue(Columns.IpMacTao, value); }
		}
		  
		[XmlAttribute("IpMaySua")]
		[Bindable(true)]
		public string IpMaySua 
		{
			get { return GetColumnValue<string>(Columns.IpMaySua); }
			set { SetColumnValue(Columns.IpMaySua, value); }
		}
		  
		[XmlAttribute("IpMayTao")]
		[Bindable(true)]
		public string IpMayTao 
		{
			get { return GetColumnValue<string>(Columns.IpMayTao); }
			set { SetColumnValue(Columns.IpMayTao, value); }
		}
		  
		[XmlAttribute("MaKhoaThien")]
		[Bindable(true)]
		public string MaKhoaThien 
		{
			get { return GetColumnValue<string>(Columns.MaKhoaThien); }
			set { SetColumnValue(Columns.MaKhoaThien, value); }
		}
		  
		[XmlAttribute("IdPhongChuyen")]
		[Bindable(true)]
		public short? IdPhongChuyen 
		{
			get { return GetColumnValue<short?>(Columns.IdPhongChuyen); }
			set { SetColumnValue(Columns.IdPhongChuyen, value); }
		}
		  
		[XmlAttribute("NgayChuyenPhong")]
		[Bindable(true)]
		public DateTime? NgayChuyenPhong 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayChuyenPhong); }
			set { SetColumnValue(Columns.NgayChuyenPhong, value); }
		}
		  
		[XmlAttribute("NguoiChuyenPhong")]
		[Bindable(true)]
		public string NguoiChuyenPhong 
		{
			get { return GetColumnValue<string>(Columns.NguoiChuyenPhong); }
			set { SetColumnValue(Columns.NguoiChuyenPhong, value); }
		}
		  
		[XmlAttribute("IsPayment")]
		[Bindable(true)]
		public byte? IsPayment 
		{
			get { return GetColumnValue<byte?>(Columns.IsPayment); }
			set { SetColumnValue(Columns.IsPayment, value); }
		}
		  
		[XmlAttribute("TtChuyen")]
		[Bindable(true)]
		public byte? TtChuyen 
		{
			get { return GetColumnValue<byte?>(Columns.TtChuyen); }
			set { SetColumnValue(Columns.TtChuyen, value); }
		}
		  
		[XmlAttribute("KhamNgoaigio")]
		[Bindable(true)]
		public byte? KhamNgoaigio 
		{
			get { return GetColumnValue<byte?>(Columns.KhamNgoaigio); }
			set { SetColumnValue(Columns.KhamNgoaigio, value); }
		}
		  
		[XmlAttribute("MaPhongStt")]
		[Bindable(true)]
		public string MaPhongStt 
		{
			get { return GetColumnValue<string>(Columns.MaPhongStt); }
			set { SetColumnValue(Columns.MaPhongStt, value); }
		}
		  
		[XmlAttribute("IsNgoaiGio")]
		[Bindable(true)]
		public byte? IsNgoaiGio 
		{
			get { return GetColumnValue<byte?>(Columns.IsNgoaiGio); }
			set { SetColumnValue(Columns.IsNgoaiGio, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varPatientId,string varPatientCode,decimal varRegFee,byte varPaymentStatus,DateTime? varRegDate,DateTime? varInputDate,string varUserId,decimal? varSurchargePrice,short? varDepartmentId,short? varDoctorAssignId,byte? varActived,byte? varPrintId,DateTime? varModifyDate,string varModifiedBy,byte? varStatus,int? varExamId,byte? varIsCancel,short? varSoKham,decimal? varGiaBhytCt,decimal? varGiaBnct,DateTime? varPaymentDate,short? varFromDepartmentId,byte? varNoiTru,byte? varXacNhan,int? varPaymentId,short? varIdBsyThien,int? varIdGoiDvu,string varKieuKhambenh,int? varTrongGoi,string varIpMacSua,string varIpMacTao,string varIpMaySua,string varIpMayTao,string varMaKhoaThien,short? varIdPhongChuyen,DateTime? varNgayChuyenPhong,string varNguoiChuyenPhong,byte? varIsPayment,byte? varTtChuyen,byte? varKhamNgoaigio,string varMaPhongStt,byte? varIsNgoaiGio)
		{
			TRegExam item = new TRegExam();
			
			item.PatientId = varPatientId;
			
			item.PatientCode = varPatientCode;
			
			item.RegFee = varRegFee;
			
			item.PaymentStatus = varPaymentStatus;
			
			item.RegDate = varRegDate;
			
			item.InputDate = varInputDate;
			
			item.UserId = varUserId;
			
			item.SurchargePrice = varSurchargePrice;
			
			item.DepartmentId = varDepartmentId;
			
			item.DoctorAssignId = varDoctorAssignId;
			
			item.Actived = varActived;
			
			item.PrintId = varPrintId;
			
			item.ModifyDate = varModifyDate;
			
			item.ModifiedBy = varModifiedBy;
			
			item.Status = varStatus;
			
			item.ExamId = varExamId;
			
			item.IsCancel = varIsCancel;
			
			item.SoKham = varSoKham;
			
			item.GiaBhytCt = varGiaBhytCt;
			
			item.GiaBnct = varGiaBnct;
			
			item.PaymentDate = varPaymentDate;
			
			item.FromDepartmentId = varFromDepartmentId;
			
			item.NoiTru = varNoiTru;
			
			item.XacNhan = varXacNhan;
			
			item.PaymentId = varPaymentId;
			
			item.IdBsyThien = varIdBsyThien;
			
			item.IdGoiDvu = varIdGoiDvu;
			
			item.KieuKhambenh = varKieuKhambenh;
			
			item.TrongGoi = varTrongGoi;
			
			item.IpMacSua = varIpMacSua;
			
			item.IpMacTao = varIpMacTao;
			
			item.IpMaySua = varIpMaySua;
			
			item.IpMayTao = varIpMayTao;
			
			item.MaKhoaThien = varMaKhoaThien;
			
			item.IdPhongChuyen = varIdPhongChuyen;
			
			item.NgayChuyenPhong = varNgayChuyenPhong;
			
			item.NguoiChuyenPhong = varNguoiChuyenPhong;
			
			item.IsPayment = varIsPayment;
			
			item.TtChuyen = varTtChuyen;
			
			item.KhamNgoaigio = varKhamNgoaigio;
			
			item.MaPhongStt = varMaPhongStt;
			
			item.IsNgoaiGio = varIsNgoaiGio;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varRegId,long varPatientId,string varPatientCode,decimal varRegFee,byte varPaymentStatus,DateTime? varRegDate,DateTime? varInputDate,string varUserId,decimal? varSurchargePrice,short? varDepartmentId,short? varDoctorAssignId,byte? varActived,byte? varPrintId,DateTime? varModifyDate,string varModifiedBy,byte? varStatus,int? varExamId,byte? varIsCancel,short? varSoKham,decimal? varGiaBhytCt,decimal? varGiaBnct,DateTime? varPaymentDate,short? varFromDepartmentId,byte? varNoiTru,byte? varXacNhan,int? varPaymentId,short? varIdBsyThien,int? varIdGoiDvu,string varKieuKhambenh,int? varTrongGoi,string varIpMacSua,string varIpMacTao,string varIpMaySua,string varIpMayTao,string varMaKhoaThien,short? varIdPhongChuyen,DateTime? varNgayChuyenPhong,string varNguoiChuyenPhong,byte? varIsPayment,byte? varTtChuyen,byte? varKhamNgoaigio,string varMaPhongStt,byte? varIsNgoaiGio)
		{
			TRegExam item = new TRegExam();
			
				item.RegId = varRegId;
			
				item.PatientId = varPatientId;
			
				item.PatientCode = varPatientCode;
			
				item.RegFee = varRegFee;
			
				item.PaymentStatus = varPaymentStatus;
			
				item.RegDate = varRegDate;
			
				item.InputDate = varInputDate;
			
				item.UserId = varUserId;
			
				item.SurchargePrice = varSurchargePrice;
			
				item.DepartmentId = varDepartmentId;
			
				item.DoctorAssignId = varDoctorAssignId;
			
				item.Actived = varActived;
			
				item.PrintId = varPrintId;
			
				item.ModifyDate = varModifyDate;
			
				item.ModifiedBy = varModifiedBy;
			
				item.Status = varStatus;
			
				item.ExamId = varExamId;
			
				item.IsCancel = varIsCancel;
			
				item.SoKham = varSoKham;
			
				item.GiaBhytCt = varGiaBhytCt;
			
				item.GiaBnct = varGiaBnct;
			
				item.PaymentDate = varPaymentDate;
			
				item.FromDepartmentId = varFromDepartmentId;
			
				item.NoiTru = varNoiTru;
			
				item.XacNhan = varXacNhan;
			
				item.PaymentId = varPaymentId;
			
				item.IdBsyThien = varIdBsyThien;
			
				item.IdGoiDvu = varIdGoiDvu;
			
				item.KieuKhambenh = varKieuKhambenh;
			
				item.TrongGoi = varTrongGoi;
			
				item.IpMacSua = varIpMacSua;
			
				item.IpMacTao = varIpMacTao;
			
				item.IpMaySua = varIpMaySua;
			
				item.IpMayTao = varIpMayTao;
			
				item.MaKhoaThien = varMaKhoaThien;
			
				item.IdPhongChuyen = varIdPhongChuyen;
			
				item.NgayChuyenPhong = varNgayChuyenPhong;
			
				item.NguoiChuyenPhong = varNguoiChuyenPhong;
			
				item.IsPayment = varIsPayment;
			
				item.TtChuyen = varTtChuyen;
			
				item.KhamNgoaigio = varKhamNgoaigio;
			
				item.MaPhongStt = varMaPhongStt;
			
				item.IsNgoaiGio = varIsNgoaiGio;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn RegIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn RegFeeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentStatusColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn RegDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn InputDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn UserIdColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SurchargePriceColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIdColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn DoctorAssignIdColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ActivedColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn PrintIdColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifyDateColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn ExamIdColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn IsCancelColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn SoKhamColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn GiaBhytCtColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn GiaBnctColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentDateColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn FromDepartmentIdColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn NoiTruColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn XacNhanColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentIdColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn IdBsyThienColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn IdGoiDvuColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn KieuKhambenhColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn TrongGoiColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn IpMacSuaColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn IpMacTaoColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        public static TableSchema.TableColumn IpMaySuaColumn
        {
            get { return Schema.Columns[32]; }
        }
        
        
        
        public static TableSchema.TableColumn IpMayTaoColumn
        {
            get { return Schema.Columns[33]; }
        }
        
        
        
        public static TableSchema.TableColumn MaKhoaThienColumn
        {
            get { return Schema.Columns[34]; }
        }
        
        
        
        public static TableSchema.TableColumn IdPhongChuyenColumn
        {
            get { return Schema.Columns[35]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayChuyenPhongColumn
        {
            get { return Schema.Columns[36]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiChuyenPhongColumn
        {
            get { return Schema.Columns[37]; }
        }
        
        
        
        public static TableSchema.TableColumn IsPaymentColumn
        {
            get { return Schema.Columns[38]; }
        }
        
        
        
        public static TableSchema.TableColumn TtChuyenColumn
        {
            get { return Schema.Columns[39]; }
        }
        
        
        
        public static TableSchema.TableColumn KhamNgoaigioColumn
        {
            get { return Schema.Columns[40]; }
        }
        
        
        
        public static TableSchema.TableColumn MaPhongSttColumn
        {
            get { return Schema.Columns[41]; }
        }
        
        
        
        public static TableSchema.TableColumn IsNgoaiGioColumn
        {
            get { return Schema.Columns[42]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string RegId = @"Reg_ID";
			 public static string PatientId = @"Patient_ID";
			 public static string PatientCode = @"Patient_Code";
			 public static string RegFee = @"Reg_Fee";
			 public static string PaymentStatus = @"Payment_Status";
			 public static string RegDate = @"Reg_Date";
			 public static string InputDate = @"Input_Date";
			 public static string UserId = @"User_ID";
			 public static string SurchargePrice = @"Surcharge_Price";
			 public static string DepartmentId = @"Department_ID";
			 public static string DoctorAssignId = @"DoctorAssign_ID";
			 public static string Actived = @"Actived";
			 public static string PrintId = @"Print_ID";
			 public static string ModifyDate = @"Modify_Date";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string Status = @"Status";
			 public static string ExamId = @"Exam_ID";
			 public static string IsCancel = @"IsCancel";
			 public static string SoKham = @"So_Kham";
			 public static string GiaBhytCt = @"Gia_BHYT_CT";
			 public static string GiaBnct = @"Gia_BNCT";
			 public static string PaymentDate = @"Payment_Date";
			 public static string FromDepartmentId = @"From_Department_ID";
			 public static string NoiTru = @"NoiTru";
			 public static string XacNhan = @"XAC_NHAN";
			 public static string PaymentId = @"Payment_ID";
			 public static string IdBsyThien = @"ID_BSY_THIEN";
			 public static string IdGoiDvu = @"ID_GOI_DVU";
			 public static string KieuKhambenh = @"KIEU_KHAMBENH";
			 public static string TrongGoi = @"TRONG_GOI";
			 public static string IpMacSua = @"IP_MAC_SUA";
			 public static string IpMacTao = @"IP_MAC_TAO";
			 public static string IpMaySua = @"IP_MAY_SUA";
			 public static string IpMayTao = @"IP_MAY_TAO";
			 public static string MaKhoaThien = @"MA_KHOA_THIEN";
			 public static string IdPhongChuyen = @"ID_PHONG_CHUYEN";
			 public static string NgayChuyenPhong = @"NGAY_CHUYEN_PHONG";
			 public static string NguoiChuyenPhong = @"NGUOI_CHUYEN_PHONG";
			 public static string IsPayment = @"IsPayment";
			 public static string TtChuyen = @"TT_CHUYEN";
			 public static string KhamNgoaigio = @"KHAM_NGOAIGIO";
			 public static string MaPhongStt = @"MA_PHONG_STT";
			 public static string IsNgoaiGio = @"IsNgoaiGio";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
