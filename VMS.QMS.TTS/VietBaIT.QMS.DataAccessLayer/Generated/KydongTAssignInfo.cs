using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the KydongTAssignInfo class.
	/// </summary>
    [Serializable]
	public partial class KydongTAssignInfoCollection : ActiveList<KydongTAssignInfo, KydongTAssignInfoCollection>
	{	   
		public KydongTAssignInfoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>KydongTAssignInfoCollection</returns>
		public KydongTAssignInfoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                KydongTAssignInfo o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the KYDONG_T_Assign_Info table.
	/// </summary>
	[Serializable]
	public partial class KydongTAssignInfo : ActiveRecord<KydongTAssignInfo>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public KydongTAssignInfo()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public KydongTAssignInfo(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public KydongTAssignInfo(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public KydongTAssignInfo(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("KYDONG_T_Assign_Info", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarAssignId = new TableSchema.TableColumn(schema);
				colvarAssignId.ColumnName = "Assign_ID";
				colvarAssignId.DataType = DbType.Int64;
				colvarAssignId.MaxLength = 0;
				colvarAssignId.AutoIncrement = true;
				colvarAssignId.IsNullable = false;
				colvarAssignId.IsPrimaryKey = true;
				colvarAssignId.IsForeignKey = false;
				colvarAssignId.IsReadOnly = false;
				colvarAssignId.DefaultSetting = @"";
				colvarAssignId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAssignId);
				
				TableSchema.TableColumn colvarExamId = new TableSchema.TableColumn(schema);
				colvarExamId.ColumnName = "Exam_ID";
				colvarExamId.DataType = DbType.Int64;
				colvarExamId.MaxLength = 0;
				colvarExamId.AutoIncrement = false;
				colvarExamId.IsNullable = true;
				colvarExamId.IsPrimaryKey = false;
				colvarExamId.IsForeignKey = false;
				colvarExamId.IsReadOnly = false;
				
						colvarExamId.DefaultSetting = @"((-1))";
				colvarExamId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExamId);
				
				TableSchema.TableColumn colvarTreatId = new TableSchema.TableColumn(schema);
				colvarTreatId.ColumnName = "Treat_ID";
				colvarTreatId.DataType = DbType.Int32;
				colvarTreatId.MaxLength = 0;
				colvarTreatId.AutoIncrement = false;
				colvarTreatId.IsNullable = true;
				colvarTreatId.IsPrimaryKey = false;
				colvarTreatId.IsForeignKey = false;
				colvarTreatId.IsReadOnly = false;
				colvarTreatId.DefaultSetting = @"";
				colvarTreatId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTreatId);
				
				TableSchema.TableColumn colvarPatientDeptId = new TableSchema.TableColumn(schema);
				colvarPatientDeptId.ColumnName = "PatientDept_ID";
				colvarPatientDeptId.DataType = DbType.Int32;
				colvarPatientDeptId.MaxLength = 0;
				colvarPatientDeptId.AutoIncrement = false;
				colvarPatientDeptId.IsNullable = true;
				colvarPatientDeptId.IsPrimaryKey = false;
				colvarPatientDeptId.IsForeignKey = false;
				colvarPatientDeptId.IsReadOnly = false;
				colvarPatientDeptId.DefaultSetting = @"";
				colvarPatientDeptId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientDeptId);
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "Patient_Code";
				colvarPatientCode.DataType = DbType.AnsiString;
				colvarPatientCode.MaxLength = 20;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = false;
				colvarPatientCode.IsPrimaryKey = false;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int64;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = false;
				colvarPatientId.IsPrimaryKey = false;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarServiceId = new TableSchema.TableColumn(schema);
				colvarServiceId.ColumnName = "Service_ID";
				colvarServiceId.DataType = DbType.Int16;
				colvarServiceId.MaxLength = 0;
				colvarServiceId.AutoIncrement = false;
				colvarServiceId.IsNullable = false;
				colvarServiceId.IsPrimaryKey = false;
				colvarServiceId.IsForeignKey = false;
				colvarServiceId.IsReadOnly = false;
				colvarServiceId.DefaultSetting = @"";
				colvarServiceId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceId);
				
				TableSchema.TableColumn colvarServiceTypeId = new TableSchema.TableColumn(schema);
				colvarServiceTypeId.ColumnName = "ServiceType_ID";
				colvarServiceTypeId.DataType = DbType.Int16;
				colvarServiceTypeId.MaxLength = 0;
				colvarServiceTypeId.AutoIncrement = false;
				colvarServiceTypeId.IsNullable = false;
				colvarServiceTypeId.IsPrimaryKey = false;
				colvarServiceTypeId.IsForeignKey = false;
				colvarServiceTypeId.IsReadOnly = false;
				colvarServiceTypeId.DefaultSetting = @"";
				colvarServiceTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceTypeId);
				
				TableSchema.TableColumn colvarRegDate = new TableSchema.TableColumn(schema);
				colvarRegDate.ColumnName = "Reg_Date";
				colvarRegDate.DataType = DbType.DateTime;
				colvarRegDate.MaxLength = 0;
				colvarRegDate.AutoIncrement = false;
				colvarRegDate.IsNullable = false;
				colvarRegDate.IsPrimaryKey = false;
				colvarRegDate.IsForeignKey = false;
				colvarRegDate.IsReadOnly = false;
				
						colvarRegDate.DefaultSetting = @"(getdate())";
				colvarRegDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegDate);
				
				TableSchema.TableColumn colvarDiagPerson = new TableSchema.TableColumn(schema);
				colvarDiagPerson.ColumnName = "Diag_Person";
				colvarDiagPerson.DataType = DbType.Int16;
				colvarDiagPerson.MaxLength = 0;
				colvarDiagPerson.AutoIncrement = false;
				colvarDiagPerson.IsNullable = true;
				colvarDiagPerson.IsPrimaryKey = false;
				colvarDiagPerson.IsForeignKey = false;
				colvarDiagPerson.IsReadOnly = false;
				colvarDiagPerson.DefaultSetting = @"";
				colvarDiagPerson.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiagPerson);
				
				TableSchema.TableColumn colvarDepartmentId = new TableSchema.TableColumn(schema);
				colvarDepartmentId.ColumnName = "Department_ID";
				colvarDepartmentId.DataType = DbType.Int16;
				colvarDepartmentId.MaxLength = 0;
				colvarDepartmentId.AutoIncrement = false;
				colvarDepartmentId.IsNullable = true;
				colvarDepartmentId.IsPrimaryKey = false;
				colvarDepartmentId.IsForeignKey = false;
				colvarDepartmentId.IsReadOnly = false;
				colvarDepartmentId.DefaultSetting = @"";
				colvarDepartmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentId);
				
				TableSchema.TableColumn colvarDiscountRate = new TableSchema.TableColumn(schema);
				colvarDiscountRate.ColumnName = "Discount_Rate";
				colvarDiscountRate.DataType = DbType.Decimal;
				colvarDiscountRate.MaxLength = 0;
				colvarDiscountRate.AutoIncrement = false;
				colvarDiscountRate.IsNullable = false;
				colvarDiscountRate.IsPrimaryKey = false;
				colvarDiscountRate.IsForeignKey = false;
				colvarDiscountRate.IsReadOnly = false;
				
						colvarDiscountRate.DefaultSetting = @"((0))";
				colvarDiscountRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiscountRate);
				
				TableSchema.TableColumn colvarDiscountType = new TableSchema.TableColumn(schema);
				colvarDiscountType.ColumnName = "Discount_Type";
				colvarDiscountType.DataType = DbType.Byte;
				colvarDiscountType.MaxLength = 0;
				colvarDiscountType.AutoIncrement = false;
				colvarDiscountType.IsNullable = false;
				colvarDiscountType.IsPrimaryKey = false;
				colvarDiscountType.IsForeignKey = false;
				colvarDiscountType.IsReadOnly = false;
				
						colvarDiscountType.DefaultSetting = @"((0))";
				colvarDiscountType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiscountType);
				
				TableSchema.TableColumn colvarOriginPrice = new TableSchema.TableColumn(schema);
				colvarOriginPrice.ColumnName = "Origin_Price";
				colvarOriginPrice.DataType = DbType.Currency;
				colvarOriginPrice.MaxLength = 0;
				colvarOriginPrice.AutoIncrement = false;
				colvarOriginPrice.IsNullable = false;
				colvarOriginPrice.IsPrimaryKey = false;
				colvarOriginPrice.IsForeignKey = false;
				colvarOriginPrice.IsReadOnly = false;
				colvarOriginPrice.DefaultSetting = @"";
				colvarOriginPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginPrice);
				
				TableSchema.TableColumn colvarDiscountPrice = new TableSchema.TableColumn(schema);
				colvarDiscountPrice.ColumnName = "Discount_Price";
				colvarDiscountPrice.DataType = DbType.Currency;
				colvarDiscountPrice.MaxLength = 0;
				colvarDiscountPrice.AutoIncrement = false;
				colvarDiscountPrice.IsNullable = false;
				colvarDiscountPrice.IsPrimaryKey = false;
				colvarDiscountPrice.IsForeignKey = false;
				colvarDiscountPrice.IsReadOnly = false;
				
						colvarDiscountPrice.DefaultSetting = @"((0))";
				colvarDiscountPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiscountPrice);
				
				TableSchema.TableColumn colvarPaymentDate = new TableSchema.TableColumn(schema);
				colvarPaymentDate.ColumnName = "Payment_Date";
				colvarPaymentDate.DataType = DbType.DateTime;
				colvarPaymentDate.MaxLength = 0;
				colvarPaymentDate.AutoIncrement = false;
				colvarPaymentDate.IsNullable = true;
				colvarPaymentDate.IsPrimaryKey = false;
				colvarPaymentDate.IsForeignKey = false;
				colvarPaymentDate.IsReadOnly = false;
				colvarPaymentDate.DefaultSetting = @"";
				colvarPaymentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentDate);
				
				TableSchema.TableColumn colvarPaymentStatus = new TableSchema.TableColumn(schema);
				colvarPaymentStatus.ColumnName = "Payment_Status";
				colvarPaymentStatus.DataType = DbType.Byte;
				colvarPaymentStatus.MaxLength = 0;
				colvarPaymentStatus.AutoIncrement = false;
				colvarPaymentStatus.IsNullable = false;
				colvarPaymentStatus.IsPrimaryKey = false;
				colvarPaymentStatus.IsForeignKey = false;
				colvarPaymentStatus.IsReadOnly = false;
				
						colvarPaymentStatus.DefaultSetting = @"((0))";
				colvarPaymentStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentStatus);
				
				TableSchema.TableColumn colvarAssignStatus = new TableSchema.TableColumn(schema);
				colvarAssignStatus.ColumnName = "Assign_Status";
				colvarAssignStatus.DataType = DbType.Byte;
				colvarAssignStatus.MaxLength = 0;
				colvarAssignStatus.AutoIncrement = false;
				colvarAssignStatus.IsNullable = true;
				colvarAssignStatus.IsPrimaryKey = false;
				colvarAssignStatus.IsForeignKey = false;
				colvarAssignStatus.IsReadOnly = false;
				
						colvarAssignStatus.DefaultSetting = @"((0))";
				colvarAssignStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAssignStatus);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "Created_by";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "Create_Date";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = true;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				
						colvarCreateDate.DefaultSetting = @"(getdate())";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);
				
				TableSchema.TableColumn colvarAssignCode = new TableSchema.TableColumn(schema);
				colvarAssignCode.ColumnName = "Assign_Code";
				colvarAssignCode.DataType = DbType.AnsiString;
				colvarAssignCode.MaxLength = 50;
				colvarAssignCode.AutoIncrement = false;
				colvarAssignCode.IsNullable = true;
				colvarAssignCode.IsPrimaryKey = false;
				colvarAssignCode.IsForeignKey = false;
				colvarAssignCode.IsReadOnly = false;
				colvarAssignCode.DefaultSetting = @"";
				colvarAssignCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAssignCode);
				
				TableSchema.TableColumn colvarActived = new TableSchema.TableColumn(schema);
				colvarActived.ColumnName = "Actived";
				colvarActived.DataType = DbType.Byte;
				colvarActived.MaxLength = 0;
				colvarActived.AutoIncrement = false;
				colvarActived.IsNullable = true;
				colvarActived.IsPrimaryKey = false;
				colvarActived.IsForeignKey = false;
				colvarActived.IsReadOnly = false;
				
						colvarActived.DefaultSetting = @"((0))";
				colvarActived.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActived);
				
				TableSchema.TableColumn colvarPrintId = new TableSchema.TableColumn(schema);
				colvarPrintId.ColumnName = "Print_ID";
				colvarPrintId.DataType = DbType.Byte;
				colvarPrintId.MaxLength = 0;
				colvarPrintId.AutoIncrement = false;
				colvarPrintId.IsNullable = true;
				colvarPrintId.IsPrimaryKey = false;
				colvarPrintId.IsForeignKey = false;
				colvarPrintId.IsReadOnly = false;
				
						colvarPrintId.DefaultSetting = @"((0))";
				colvarPrintId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrintId);
				
				TableSchema.TableColumn colvarSendId = new TableSchema.TableColumn(schema);
				colvarSendId.ColumnName = "Send_ID";
				colvarSendId.DataType = DbType.Byte;
				colvarSendId.MaxLength = 0;
				colvarSendId.AutoIncrement = false;
				colvarSendId.IsNullable = true;
				colvarSendId.IsPrimaryKey = false;
				colvarSendId.IsForeignKey = false;
				colvarSendId.IsReadOnly = false;
				
						colvarSendId.DefaultSetting = @"((0))";
				colvarSendId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSendId);
				
				TableSchema.TableColumn colvarBarcode = new TableSchema.TableColumn(schema);
				colvarBarcode.ColumnName = "Barcode";
				colvarBarcode.DataType = DbType.String;
				colvarBarcode.MaxLength = 20;
				colvarBarcode.AutoIncrement = false;
				colvarBarcode.IsNullable = true;
				colvarBarcode.IsPrimaryKey = false;
				colvarBarcode.IsForeignKey = false;
				colvarBarcode.IsReadOnly = false;
				colvarBarcode.DefaultSetting = @"";
				colvarBarcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcode);
				
				TableSchema.TableColumn colvarObjectTypeId = new TableSchema.TableColumn(schema);
				colvarObjectTypeId.ColumnName = "ObjectType_Id";
				colvarObjectTypeId.DataType = DbType.Int32;
				colvarObjectTypeId.MaxLength = 0;
				colvarObjectTypeId.AutoIncrement = false;
				colvarObjectTypeId.IsNullable = true;
				colvarObjectTypeId.IsPrimaryKey = false;
				colvarObjectTypeId.IsForeignKey = false;
				colvarObjectTypeId.IsReadOnly = false;
				
						colvarObjectTypeId.DefaultSetting = @"((-1))";
				colvarObjectTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObjectTypeId);
				
				TableSchema.TableColumn colvarNoiTru = new TableSchema.TableColumn(schema);
				colvarNoiTru.ColumnName = "NoiTru";
				colvarNoiTru.DataType = DbType.Byte;
				colvarNoiTru.MaxLength = 0;
				colvarNoiTru.AutoIncrement = false;
				colvarNoiTru.IsNullable = true;
				colvarNoiTru.IsPrimaryKey = false;
				colvarNoiTru.IsForeignKey = false;
				colvarNoiTru.IsReadOnly = false;
				
						colvarNoiTru.DefaultSetting = @"((0))";
				colvarNoiTru.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoiTru);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("KYDONG_T_Assign_Info",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("AssignId")]
		[Bindable(true)]
		public long AssignId 
		{
			get { return GetColumnValue<long>(Columns.AssignId); }
			set { SetColumnValue(Columns.AssignId, value); }
		}
		  
		[XmlAttribute("ExamId")]
		[Bindable(true)]
		public long? ExamId 
		{
			get { return GetColumnValue<long?>(Columns.ExamId); }
			set { SetColumnValue(Columns.ExamId, value); }
		}
		  
		[XmlAttribute("TreatId")]
		[Bindable(true)]
		public int? TreatId 
		{
			get { return GetColumnValue<int?>(Columns.TreatId); }
			set { SetColumnValue(Columns.TreatId, value); }
		}
		  
		[XmlAttribute("PatientDeptId")]
		[Bindable(true)]
		public int? PatientDeptId 
		{
			get { return GetColumnValue<int?>(Columns.PatientDeptId); }
			set { SetColumnValue(Columns.PatientDeptId, value); }
		}
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public long PatientId 
		{
			get { return GetColumnValue<long>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("ServiceId")]
		[Bindable(true)]
		public short ServiceId 
		{
			get { return GetColumnValue<short>(Columns.ServiceId); }
			set { SetColumnValue(Columns.ServiceId, value); }
		}
		  
		[XmlAttribute("ServiceTypeId")]
		[Bindable(true)]
		public short ServiceTypeId 
		{
			get { return GetColumnValue<short>(Columns.ServiceTypeId); }
			set { SetColumnValue(Columns.ServiceTypeId, value); }
		}
		  
		[XmlAttribute("RegDate")]
		[Bindable(true)]
		public DateTime RegDate 
		{
			get { return GetColumnValue<DateTime>(Columns.RegDate); }
			set { SetColumnValue(Columns.RegDate, value); }
		}
		  
		[XmlAttribute("DiagPerson")]
		[Bindable(true)]
		public short? DiagPerson 
		{
			get { return GetColumnValue<short?>(Columns.DiagPerson); }
			set { SetColumnValue(Columns.DiagPerson, value); }
		}
		  
		[XmlAttribute("DepartmentId")]
		[Bindable(true)]
		public short? DepartmentId 
		{
			get { return GetColumnValue<short?>(Columns.DepartmentId); }
			set { SetColumnValue(Columns.DepartmentId, value); }
		}
		  
		[XmlAttribute("DiscountRate")]
		[Bindable(true)]
		public decimal DiscountRate 
		{
			get { return GetColumnValue<decimal>(Columns.DiscountRate); }
			set { SetColumnValue(Columns.DiscountRate, value); }
		}
		  
		[XmlAttribute("DiscountType")]
		[Bindable(true)]
		public byte DiscountType 
		{
			get { return GetColumnValue<byte>(Columns.DiscountType); }
			set { SetColumnValue(Columns.DiscountType, value); }
		}
		  
		[XmlAttribute("OriginPrice")]
		[Bindable(true)]
		public decimal OriginPrice 
		{
			get { return GetColumnValue<decimal>(Columns.OriginPrice); }
			set { SetColumnValue(Columns.OriginPrice, value); }
		}
		  
		[XmlAttribute("DiscountPrice")]
		[Bindable(true)]
		public decimal DiscountPrice 
		{
			get { return GetColumnValue<decimal>(Columns.DiscountPrice); }
			set { SetColumnValue(Columns.DiscountPrice, value); }
		}
		  
		[XmlAttribute("PaymentDate")]
		[Bindable(true)]
		public DateTime? PaymentDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.PaymentDate); }
			set { SetColumnValue(Columns.PaymentDate, value); }
		}
		  
		[XmlAttribute("PaymentStatus")]
		[Bindable(true)]
		public byte PaymentStatus 
		{
			get { return GetColumnValue<byte>(Columns.PaymentStatus); }
			set { SetColumnValue(Columns.PaymentStatus, value); }
		}
		  
		[XmlAttribute("AssignStatus")]
		[Bindable(true)]
		public byte? AssignStatus 
		{
			get { return GetColumnValue<byte?>(Columns.AssignStatus); }
			set { SetColumnValue(Columns.AssignStatus, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime? CreateDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedDate")]
		[Bindable(true)]
		public DateTime? ModifiedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set { SetColumnValue(Columns.ModifiedDate, value); }
		}
		  
		[XmlAttribute("AssignCode")]
		[Bindable(true)]
		public string AssignCode 
		{
			get { return GetColumnValue<string>(Columns.AssignCode); }
			set { SetColumnValue(Columns.AssignCode, value); }
		}
		  
		[XmlAttribute("Actived")]
		[Bindable(true)]
		public byte? Actived 
		{
			get { return GetColumnValue<byte?>(Columns.Actived); }
			set { SetColumnValue(Columns.Actived, value); }
		}
		  
		[XmlAttribute("PrintId")]
		[Bindable(true)]
		public byte? PrintId 
		{
			get { return GetColumnValue<byte?>(Columns.PrintId); }
			set { SetColumnValue(Columns.PrintId, value); }
		}
		  
		[XmlAttribute("SendId")]
		[Bindable(true)]
		public byte? SendId 
		{
			get { return GetColumnValue<byte?>(Columns.SendId); }
			set { SetColumnValue(Columns.SendId, value); }
		}
		  
		[XmlAttribute("Barcode")]
		[Bindable(true)]
		public string Barcode 
		{
			get { return GetColumnValue<string>(Columns.Barcode); }
			set { SetColumnValue(Columns.Barcode, value); }
		}
		  
		[XmlAttribute("ObjectTypeId")]
		[Bindable(true)]
		public int? ObjectTypeId 
		{
			get { return GetColumnValue<int?>(Columns.ObjectTypeId); }
			set { SetColumnValue(Columns.ObjectTypeId, value); }
		}
		  
		[XmlAttribute("NoiTru")]
		[Bindable(true)]
		public byte? NoiTru 
		{
			get { return GetColumnValue<byte?>(Columns.NoiTru); }
			set { SetColumnValue(Columns.NoiTru, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long? varExamId,int? varTreatId,int? varPatientDeptId,string varPatientCode,long varPatientId,short varServiceId,short varServiceTypeId,DateTime varRegDate,short? varDiagPerson,short? varDepartmentId,decimal varDiscountRate,byte varDiscountType,decimal varOriginPrice,decimal varDiscountPrice,DateTime? varPaymentDate,byte varPaymentStatus,byte? varAssignStatus,string varCreatedBy,DateTime? varCreateDate,string varModifiedBy,DateTime? varModifiedDate,string varAssignCode,byte? varActived,byte? varPrintId,byte? varSendId,string varBarcode,int? varObjectTypeId,byte? varNoiTru)
		{
			KydongTAssignInfo item = new KydongTAssignInfo();
			
			item.ExamId = varExamId;
			
			item.TreatId = varTreatId;
			
			item.PatientDeptId = varPatientDeptId;
			
			item.PatientCode = varPatientCode;
			
			item.PatientId = varPatientId;
			
			item.ServiceId = varServiceId;
			
			item.ServiceTypeId = varServiceTypeId;
			
			item.RegDate = varRegDate;
			
			item.DiagPerson = varDiagPerson;
			
			item.DepartmentId = varDepartmentId;
			
			item.DiscountRate = varDiscountRate;
			
			item.DiscountType = varDiscountType;
			
			item.OriginPrice = varOriginPrice;
			
			item.DiscountPrice = varDiscountPrice;
			
			item.PaymentDate = varPaymentDate;
			
			item.PaymentStatus = varPaymentStatus;
			
			item.AssignStatus = varAssignStatus;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreateDate = varCreateDate;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedDate = varModifiedDate;
			
			item.AssignCode = varAssignCode;
			
			item.Actived = varActived;
			
			item.PrintId = varPrintId;
			
			item.SendId = varSendId;
			
			item.Barcode = varBarcode;
			
			item.ObjectTypeId = varObjectTypeId;
			
			item.NoiTru = varNoiTru;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varAssignId,long? varExamId,int? varTreatId,int? varPatientDeptId,string varPatientCode,long varPatientId,short varServiceId,short varServiceTypeId,DateTime varRegDate,short? varDiagPerson,short? varDepartmentId,decimal varDiscountRate,byte varDiscountType,decimal varOriginPrice,decimal varDiscountPrice,DateTime? varPaymentDate,byte varPaymentStatus,byte? varAssignStatus,string varCreatedBy,DateTime? varCreateDate,string varModifiedBy,DateTime? varModifiedDate,string varAssignCode,byte? varActived,byte? varPrintId,byte? varSendId,string varBarcode,int? varObjectTypeId,byte? varNoiTru)
		{
			KydongTAssignInfo item = new KydongTAssignInfo();
			
				item.AssignId = varAssignId;
			
				item.ExamId = varExamId;
			
				item.TreatId = varTreatId;
			
				item.PatientDeptId = varPatientDeptId;
			
				item.PatientCode = varPatientCode;
			
				item.PatientId = varPatientId;
			
				item.ServiceId = varServiceId;
			
				item.ServiceTypeId = varServiceTypeId;
			
				item.RegDate = varRegDate;
			
				item.DiagPerson = varDiagPerson;
			
				item.DepartmentId = varDepartmentId;
			
				item.DiscountRate = varDiscountRate;
			
				item.DiscountType = varDiscountType;
			
				item.OriginPrice = varOriginPrice;
			
				item.DiscountPrice = varDiscountPrice;
			
				item.PaymentDate = varPaymentDate;
			
				item.PaymentStatus = varPaymentStatus;
			
				item.AssignStatus = varAssignStatus;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreateDate = varCreateDate;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedDate = varModifiedDate;
			
				item.AssignCode = varAssignCode;
			
				item.Actived = varActived;
			
				item.PrintId = varPrintId;
			
				item.SendId = varSendId;
			
				item.Barcode = varBarcode;
			
				item.ObjectTypeId = varObjectTypeId;
			
				item.NoiTru = varNoiTru;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn AssignIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ExamIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TreatIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientDeptIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceIdColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceTypeIdColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn RegDateColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn DiagPersonColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIdColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn DiscountRateColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn DiscountTypeColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginPriceColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn DiscountPriceColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentDateColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentStatusColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn AssignStatusColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedDateColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn AssignCodeColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn ActivedColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn PrintIdColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn SendIdColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn BarcodeColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn ObjectTypeIdColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn NoiTruColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string AssignId = @"Assign_ID";
			 public static string ExamId = @"Exam_ID";
			 public static string TreatId = @"Treat_ID";
			 public static string PatientDeptId = @"PatientDept_ID";
			 public static string PatientCode = @"Patient_Code";
			 public static string PatientId = @"Patient_ID";
			 public static string ServiceId = @"Service_ID";
			 public static string ServiceTypeId = @"ServiceType_ID";
			 public static string RegDate = @"Reg_Date";
			 public static string DiagPerson = @"Diag_Person";
			 public static string DepartmentId = @"Department_ID";
			 public static string DiscountRate = @"Discount_Rate";
			 public static string DiscountType = @"Discount_Type";
			 public static string OriginPrice = @"Origin_Price";
			 public static string DiscountPrice = @"Discount_Price";
			 public static string PaymentDate = @"Payment_Date";
			 public static string PaymentStatus = @"Payment_Status";
			 public static string AssignStatus = @"Assign_Status";
			 public static string CreatedBy = @"Created_by";
			 public static string CreateDate = @"Create_Date";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedDate = @"ModifiedDate";
			 public static string AssignCode = @"Assign_Code";
			 public static string Actived = @"Actived";
			 public static string PrintId = @"Print_ID";
			 public static string SendId = @"Send_ID";
			 public static string Barcode = @"Barcode";
			 public static string ObjectTypeId = @"ObjectType_Id";
			 public static string NoiTru = @"NoiTru";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
