using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TPatientInfo class.
	/// </summary>
    [Serializable]
	public partial class TPatientInfoCollection : ActiveList<TPatientInfo, TPatientInfoCollection>
	{	   
		public TPatientInfoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TPatientInfoCollection</returns>
		public TPatientInfoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TPatientInfo o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_PATIENT_INFO table.
	/// </summary>
	[Serializable]
	public partial class TPatientInfo : ActiveRecord<TPatientInfo>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TPatientInfo()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TPatientInfo(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TPatientInfo(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TPatientInfo(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_PATIENT_INFO", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int64;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = true;
				colvarPatientId.IsNullable = false;
				colvarPatientId.IsPrimaryKey = true;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarPatientName = new TableSchema.TableColumn(schema);
				colvarPatientName.ColumnName = "Patient_Name";
				colvarPatientName.DataType = DbType.String;
				colvarPatientName.MaxLength = 100;
				colvarPatientName.AutoIncrement = false;
				colvarPatientName.IsNullable = true;
				colvarPatientName.IsPrimaryKey = false;
				colvarPatientName.IsForeignKey = false;
				colvarPatientName.IsReadOnly = false;
				colvarPatientName.DefaultSetting = @"";
				colvarPatientName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientName);
				
				TableSchema.TableColumn colvarPatientAddr = new TableSchema.TableColumn(schema);
				colvarPatientAddr.ColumnName = "Patient_Addr";
				colvarPatientAddr.DataType = DbType.String;
				colvarPatientAddr.MaxLength = 200;
				colvarPatientAddr.AutoIncrement = false;
				colvarPatientAddr.IsNullable = true;
				colvarPatientAddr.IsPrimaryKey = false;
				colvarPatientAddr.IsForeignKey = false;
				colvarPatientAddr.IsReadOnly = false;
				colvarPatientAddr.DefaultSetting = @"";
				colvarPatientAddr.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientAddr);
				
				TableSchema.TableColumn colvarProvinceId = new TableSchema.TableColumn(schema);
				colvarProvinceId.ColumnName = "Province_ID";
				colvarProvinceId.DataType = DbType.AnsiString;
				colvarProvinceId.MaxLength = 50;
				colvarProvinceId.AutoIncrement = false;
				colvarProvinceId.IsNullable = true;
				colvarProvinceId.IsPrimaryKey = false;
				colvarProvinceId.IsForeignKey = false;
				colvarProvinceId.IsReadOnly = false;
				colvarProvinceId.DefaultSetting = @"";
				colvarProvinceId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProvinceId);
				
				TableSchema.TableColumn colvarDistrictId = new TableSchema.TableColumn(schema);
				colvarDistrictId.ColumnName = "District_ID";
				colvarDistrictId.DataType = DbType.AnsiString;
				colvarDistrictId.MaxLength = 50;
				colvarDistrictId.AutoIncrement = false;
				colvarDistrictId.IsNullable = true;
				colvarDistrictId.IsPrimaryKey = false;
				colvarDistrictId.IsForeignKey = false;
				colvarDistrictId.IsReadOnly = false;
				colvarDistrictId.DefaultSetting = @"";
				colvarDistrictId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDistrictId);
				
				TableSchema.TableColumn colvarPatientBirth = new TableSchema.TableColumn(schema);
				colvarPatientBirth.ColumnName = "Patient_Birth";
				colvarPatientBirth.DataType = DbType.DateTime;
				colvarPatientBirth.MaxLength = 0;
				colvarPatientBirth.AutoIncrement = false;
				colvarPatientBirth.IsNullable = true;
				colvarPatientBirth.IsPrimaryKey = false;
				colvarPatientBirth.IsForeignKey = false;
				colvarPatientBirth.IsReadOnly = false;
				colvarPatientBirth.DefaultSetting = @"";
				colvarPatientBirth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientBirth);
				
				TableSchema.TableColumn colvarYearOfBirth = new TableSchema.TableColumn(schema);
				colvarYearOfBirth.ColumnName = "Year_Of_Birth";
				colvarYearOfBirth.DataType = DbType.Int16;
				colvarYearOfBirth.MaxLength = 0;
				colvarYearOfBirth.AutoIncrement = false;
				colvarYearOfBirth.IsNullable = true;
				colvarYearOfBirth.IsPrimaryKey = false;
				colvarYearOfBirth.IsForeignKey = false;
				colvarYearOfBirth.IsReadOnly = false;
				colvarYearOfBirth.DefaultSetting = @"";
				colvarYearOfBirth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarYearOfBirth);
				
				TableSchema.TableColumn colvarPatientSex = new TableSchema.TableColumn(schema);
				colvarPatientSex.ColumnName = "Patient_Sex";
				colvarPatientSex.DataType = DbType.Byte;
				colvarPatientSex.MaxLength = 0;
				colvarPatientSex.AutoIncrement = false;
				colvarPatientSex.IsNullable = false;
				colvarPatientSex.IsPrimaryKey = false;
				colvarPatientSex.IsForeignKey = false;
				colvarPatientSex.IsReadOnly = false;
				colvarPatientSex.DefaultSetting = @"";
				colvarPatientSex.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientSex);
				
				TableSchema.TableColumn colvarPatientJob = new TableSchema.TableColumn(schema);
				colvarPatientJob.ColumnName = "Patient_Job";
				colvarPatientJob.DataType = DbType.String;
				colvarPatientJob.MaxLength = 100;
				colvarPatientJob.AutoIncrement = false;
				colvarPatientJob.IsNullable = true;
				colvarPatientJob.IsPrimaryKey = false;
				colvarPatientJob.IsForeignKey = false;
				colvarPatientJob.IsReadOnly = false;
				colvarPatientJob.DefaultSetting = @"";
				colvarPatientJob.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientJob);
				
				TableSchema.TableColumn colvarOffices = new TableSchema.TableColumn(schema);
				colvarOffices.ColumnName = "Offices";
				colvarOffices.DataType = DbType.String;
				colvarOffices.MaxLength = 100;
				colvarOffices.AutoIncrement = false;
				colvarOffices.IsNullable = true;
				colvarOffices.IsPrimaryKey = false;
				colvarOffices.IsForeignKey = false;
				colvarOffices.IsReadOnly = false;
				colvarOffices.DefaultSetting = @"";
				colvarOffices.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOffices);
				
				TableSchema.TableColumn colvarIdentifyNum = new TableSchema.TableColumn(schema);
				colvarIdentifyNum.ColumnName = "Identify_Num";
				colvarIdentifyNum.DataType = DbType.AnsiString;
				colvarIdentifyNum.MaxLength = 50;
				colvarIdentifyNum.AutoIncrement = false;
				colvarIdentifyNum.IsNullable = true;
				colvarIdentifyNum.IsPrimaryKey = false;
				colvarIdentifyNum.IsForeignKey = false;
				colvarIdentifyNum.IsReadOnly = false;
				colvarIdentifyNum.DefaultSetting = @"";
				colvarIdentifyNum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdentifyNum);
				
				TableSchema.TableColumn colvarCountryId = new TableSchema.TableColumn(schema);
				colvarCountryId.ColumnName = "Country_ID";
				colvarCountryId.DataType = DbType.Int16;
				colvarCountryId.MaxLength = 0;
				colvarCountryId.AutoIncrement = false;
				colvarCountryId.IsNullable = true;
				colvarCountryId.IsPrimaryKey = false;
				colvarCountryId.IsForeignKey = false;
				colvarCountryId.IsReadOnly = false;
				colvarCountryId.DefaultSetting = @"";
				colvarCountryId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountryId);
				
				TableSchema.TableColumn colvarPatientPhone = new TableSchema.TableColumn(schema);
				colvarPatientPhone.ColumnName = "Patient_Phone";
				colvarPatientPhone.DataType = DbType.String;
				colvarPatientPhone.MaxLength = 50;
				colvarPatientPhone.AutoIncrement = false;
				colvarPatientPhone.IsNullable = true;
				colvarPatientPhone.IsPrimaryKey = false;
				colvarPatientPhone.IsForeignKey = false;
				colvarPatientPhone.IsReadOnly = false;
				colvarPatientPhone.DefaultSetting = @"";
				colvarPatientPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientPhone);
				
				TableSchema.TableColumn colvarPatientEmail = new TableSchema.TableColumn(schema);
				colvarPatientEmail.ColumnName = "Patient_Email";
				colvarPatientEmail.DataType = DbType.String;
				colvarPatientEmail.MaxLength = 50;
				colvarPatientEmail.AutoIncrement = false;
				colvarPatientEmail.IsNullable = true;
				colvarPatientEmail.IsPrimaryKey = false;
				colvarPatientEmail.IsForeignKey = false;
				colvarPatientEmail.IsReadOnly = false;
				colvarPatientEmail.DefaultSetting = @"";
				colvarPatientEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientEmail);
				
				TableSchema.TableColumn colvarInputDate = new TableSchema.TableColumn(schema);
				colvarInputDate.ColumnName = "Input_Date";
				colvarInputDate.DataType = DbType.DateTime;
				colvarInputDate.MaxLength = 0;
				colvarInputDate.AutoIncrement = false;
				colvarInputDate.IsNullable = false;
				colvarInputDate.IsPrimaryKey = false;
				colvarInputDate.IsForeignKey = false;
				colvarInputDate.IsReadOnly = false;
				
						colvarInputDate.DefaultSetting = @"(getdate())";
				colvarInputDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInputDate);
				
				TableSchema.TableColumn colvarUserId = new TableSchema.TableColumn(schema);
				colvarUserId.ColumnName = "User_ID";
				colvarUserId.DataType = DbType.String;
				colvarUserId.MaxLength = 50;
				colvarUserId.AutoIncrement = false;
				colvarUserId.IsNullable = false;
				colvarUserId.IsPrimaryKey = false;
				colvarUserId.IsForeignKey = false;
				colvarUserId.IsReadOnly = false;
				colvarUserId.DefaultSetting = @"";
				colvarUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserId);
				
				TableSchema.TableColumn colvarLocked = new TableSchema.TableColumn(schema);
				colvarLocked.ColumnName = "Locked";
				colvarLocked.DataType = DbType.Byte;
				colvarLocked.MaxLength = 0;
				colvarLocked.AutoIncrement = false;
				colvarLocked.IsNullable = true;
				colvarLocked.IsPrimaryKey = false;
				colvarLocked.IsForeignKey = false;
				colvarLocked.IsReadOnly = false;
				
						colvarLocked.DefaultSetting = @"((0))";
				colvarLocked.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocked);
				
				TableSchema.TableColumn colvarDeleteUserBy = new TableSchema.TableColumn(schema);
				colvarDeleteUserBy.ColumnName = "Delete_User_By";
				colvarDeleteUserBy.DataType = DbType.String;
				colvarDeleteUserBy.MaxLength = 50;
				colvarDeleteUserBy.AutoIncrement = false;
				colvarDeleteUserBy.IsNullable = true;
				colvarDeleteUserBy.IsPrimaryKey = false;
				colvarDeleteUserBy.IsForeignKey = false;
				colvarDeleteUserBy.IsReadOnly = false;
				colvarDeleteUserBy.DefaultSetting = @"";
				colvarDeleteUserBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeleteUserBy);
				
				TableSchema.TableColumn colvarDeleteDateBy = new TableSchema.TableColumn(schema);
				colvarDeleteDateBy.ColumnName = "Delete_Date_By";
				colvarDeleteDateBy.DataType = DbType.DateTime;
				colvarDeleteDateBy.MaxLength = 0;
				colvarDeleteDateBy.AutoIncrement = false;
				colvarDeleteDateBy.IsNullable = true;
				colvarDeleteDateBy.IsPrimaryKey = false;
				colvarDeleteDateBy.IsForeignKey = false;
				colvarDeleteDateBy.IsReadOnly = false;
				colvarDeleteDateBy.DefaultSetting = @"";
				colvarDeleteDateBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeleteDateBy);
				
				TableSchema.TableColumn colvarDeleteReasonBy = new TableSchema.TableColumn(schema);
				colvarDeleteReasonBy.ColumnName = "Delete_Reason_By";
				colvarDeleteReasonBy.DataType = DbType.String;
				colvarDeleteReasonBy.MaxLength = 255;
				colvarDeleteReasonBy.AutoIncrement = false;
				colvarDeleteReasonBy.IsNullable = true;
				colvarDeleteReasonBy.IsPrimaryKey = false;
				colvarDeleteReasonBy.IsForeignKey = false;
				colvarDeleteReasonBy.IsReadOnly = false;
				colvarDeleteReasonBy.DefaultSetting = @"";
				colvarDeleteReasonBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeleteReasonBy);
				
				TableSchema.TableColumn colvarDanToc = new TableSchema.TableColumn(schema);
				colvarDanToc.ColumnName = "Dan_Toc";
				colvarDanToc.DataType = DbType.Int16;
				colvarDanToc.MaxLength = 0;
				colvarDanToc.AutoIncrement = false;
				colvarDanToc.IsNullable = true;
				colvarDanToc.IsPrimaryKey = false;
				colvarDanToc.IsForeignKey = false;
				colvarDanToc.IsReadOnly = false;
				colvarDanToc.DefaultSetting = @"";
				colvarDanToc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDanToc);
				
				TableSchema.TableColumn colvarNgoaiKieu = new TableSchema.TableColumn(schema);
				colvarNgoaiKieu.ColumnName = "Ngoai_Kieu";
				colvarNgoaiKieu.DataType = DbType.String;
				colvarNgoaiKieu.MaxLength = 50;
				colvarNgoaiKieu.AutoIncrement = false;
				colvarNgoaiKieu.IsNullable = true;
				colvarNgoaiKieu.IsPrimaryKey = false;
				colvarNgoaiKieu.IsForeignKey = false;
				colvarNgoaiKieu.IsReadOnly = false;
				colvarNgoaiKieu.DefaultSetting = @"";
				colvarNgoaiKieu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgoaiKieu);
				
				TableSchema.TableColumn colvarTtHonNhan = new TableSchema.TableColumn(schema);
				colvarTtHonNhan.ColumnName = "TT_HON_NHAN";
				colvarTtHonNhan.DataType = DbType.Byte;
				colvarTtHonNhan.MaxLength = 0;
				colvarTtHonNhan.AutoIncrement = false;
				colvarTtHonNhan.IsNullable = true;
				colvarTtHonNhan.IsPrimaryKey = false;
				colvarTtHonNhan.IsForeignKey = false;
				colvarTtHonNhan.IsReadOnly = false;
				
						colvarTtHonNhan.DefaultSetting = @"((0))";
				colvarTtHonNhan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTtHonNhan);
				
				TableSchema.TableColumn colvarNgaySua = new TableSchema.TableColumn(schema);
				colvarNgaySua.ColumnName = "NGAY_SUA";
				colvarNgaySua.DataType = DbType.DateTime;
				colvarNgaySua.MaxLength = 0;
				colvarNgaySua.AutoIncrement = false;
				colvarNgaySua.IsNullable = true;
				colvarNgaySua.IsPrimaryKey = false;
				colvarNgaySua.IsForeignKey = false;
				colvarNgaySua.IsReadOnly = false;
				colvarNgaySua.DefaultSetting = @"";
				colvarNgaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgaySua);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NGAY_TAO";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				
						colvarNgayTao.DefaultSetting = @"(getdate())";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNguoiSua = new TableSchema.TableColumn(schema);
				colvarNguoiSua.ColumnName = "NGUOI_SUA";
				colvarNguoiSua.DataType = DbType.String;
				colvarNguoiSua.MaxLength = 50;
				colvarNguoiSua.AutoIncrement = false;
				colvarNguoiSua.IsNullable = true;
				colvarNguoiSua.IsPrimaryKey = false;
				colvarNguoiSua.IsForeignKey = false;
				colvarNguoiSua.IsReadOnly = false;
				colvarNguoiSua.DefaultSetting = @"";
				colvarNguoiSua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiSua);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "NGUOI_TAO";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 50;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarIpMaySua = new TableSchema.TableColumn(schema);
				colvarIpMaySua.ColumnName = "IP_MAY_SUA";
				colvarIpMaySua.DataType = DbType.String;
				colvarIpMaySua.MaxLength = 50;
				colvarIpMaySua.AutoIncrement = false;
				colvarIpMaySua.IsNullable = true;
				colvarIpMaySua.IsPrimaryKey = false;
				colvarIpMaySua.IsForeignKey = false;
				colvarIpMaySua.IsReadOnly = false;
				colvarIpMaySua.DefaultSetting = @"";
				colvarIpMaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpMaySua);
				
				TableSchema.TableColumn colvarIpMayTao = new TableSchema.TableColumn(schema);
				colvarIpMayTao.ColumnName = "IP_MAY_TAO";
				colvarIpMayTao.DataType = DbType.String;
				colvarIpMayTao.MaxLength = 50;
				colvarIpMayTao.AutoIncrement = false;
				colvarIpMayTao.IsNullable = true;
				colvarIpMayTao.IsPrimaryKey = false;
				colvarIpMayTao.IsForeignKey = false;
				colvarIpMayTao.IsReadOnly = false;
				colvarIpMayTao.DefaultSetting = @"";
				colvarIpMayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpMayTao);
				
				TableSchema.TableColumn colvarTenKhongDau = new TableSchema.TableColumn(schema);
				colvarTenKhongDau.ColumnName = "TEN_KHONG_DAU";
				colvarTenKhongDau.DataType = DbType.String;
				colvarTenKhongDau.MaxLength = 100;
				colvarTenKhongDau.AutoIncrement = false;
				colvarTenKhongDau.IsNullable = true;
				colvarTenKhongDau.IsPrimaryKey = false;
				colvarTenKhongDau.IsForeignKey = false;
				colvarTenKhongDau.IsReadOnly = false;
				colvarTenKhongDau.DefaultSetting = @"";
				colvarTenKhongDau.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenKhongDau);
				
				TableSchema.TableColumn colvarDiaChiBn = new TableSchema.TableColumn(schema);
				colvarDiaChiBn.ColumnName = "DiaChi_BN";
				colvarDiaChiBn.DataType = DbType.String;
				colvarDiaChiBn.MaxLength = 500;
				colvarDiaChiBn.AutoIncrement = false;
				colvarDiaChiBn.IsNullable = true;
				colvarDiaChiBn.IsPrimaryKey = false;
				colvarDiaChiBn.IsForeignKey = false;
				colvarDiaChiBn.IsReadOnly = false;
				colvarDiaChiBn.DefaultSetting = @"";
				colvarDiaChiBn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiaChiBn);
				
				TableSchema.TableColumn colvarSoLo = new TableSchema.TableColumn(schema);
				colvarSoLo.ColumnName = "SO_LO";
				colvarSoLo.DataType = DbType.Int32;
				colvarSoLo.MaxLength = 0;
				colvarSoLo.AutoIncrement = false;
				colvarSoLo.IsNullable = true;
				colvarSoLo.IsPrimaryKey = false;
				colvarSoLo.IsForeignKey = false;
				colvarSoLo.IsReadOnly = false;
				colvarSoLo.DefaultSetting = @"";
				colvarSoLo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoLo);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_PATIENT_INFO",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public long PatientId 
		{
			get { return GetColumnValue<long>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("PatientName")]
		[Bindable(true)]
		public string PatientName 
		{
			get { return GetColumnValue<string>(Columns.PatientName); }
			set { SetColumnValue(Columns.PatientName, value); }
		}
		  
		[XmlAttribute("PatientAddr")]
		[Bindable(true)]
		public string PatientAddr 
		{
			get { return GetColumnValue<string>(Columns.PatientAddr); }
			set { SetColumnValue(Columns.PatientAddr, value); }
		}
		  
		[XmlAttribute("ProvinceId")]
		[Bindable(true)]
		public string ProvinceId 
		{
			get { return GetColumnValue<string>(Columns.ProvinceId); }
			set { SetColumnValue(Columns.ProvinceId, value); }
		}
		  
		[XmlAttribute("DistrictId")]
		[Bindable(true)]
		public string DistrictId 
		{
			get { return GetColumnValue<string>(Columns.DistrictId); }
			set { SetColumnValue(Columns.DistrictId, value); }
		}
		  
		[XmlAttribute("PatientBirth")]
		[Bindable(true)]
		public DateTime? PatientBirth 
		{
			get { return GetColumnValue<DateTime?>(Columns.PatientBirth); }
			set { SetColumnValue(Columns.PatientBirth, value); }
		}
		  
		[XmlAttribute("YearOfBirth")]
		[Bindable(true)]
		public short? YearOfBirth 
		{
			get { return GetColumnValue<short?>(Columns.YearOfBirth); }
			set { SetColumnValue(Columns.YearOfBirth, value); }
		}
		  
		[XmlAttribute("PatientSex")]
		[Bindable(true)]
		public byte PatientSex 
		{
			get { return GetColumnValue<byte>(Columns.PatientSex); }
			set { SetColumnValue(Columns.PatientSex, value); }
		}
		  
		[XmlAttribute("PatientJob")]
		[Bindable(true)]
		public string PatientJob 
		{
			get { return GetColumnValue<string>(Columns.PatientJob); }
			set { SetColumnValue(Columns.PatientJob, value); }
		}
		  
		[XmlAttribute("Offices")]
		[Bindable(true)]
		public string Offices 
		{
			get { return GetColumnValue<string>(Columns.Offices); }
			set { SetColumnValue(Columns.Offices, value); }
		}
		  
		[XmlAttribute("IdentifyNum")]
		[Bindable(true)]
		public string IdentifyNum 
		{
			get { return GetColumnValue<string>(Columns.IdentifyNum); }
			set { SetColumnValue(Columns.IdentifyNum, value); }
		}
		  
		[XmlAttribute("CountryId")]
		[Bindable(true)]
		public short? CountryId 
		{
			get { return GetColumnValue<short?>(Columns.CountryId); }
			set { SetColumnValue(Columns.CountryId, value); }
		}
		  
		[XmlAttribute("PatientPhone")]
		[Bindable(true)]
		public string PatientPhone 
		{
			get { return GetColumnValue<string>(Columns.PatientPhone); }
			set { SetColumnValue(Columns.PatientPhone, value); }
		}
		  
		[XmlAttribute("PatientEmail")]
		[Bindable(true)]
		public string PatientEmail 
		{
			get { return GetColumnValue<string>(Columns.PatientEmail); }
			set { SetColumnValue(Columns.PatientEmail, value); }
		}
		  
		[XmlAttribute("InputDate")]
		[Bindable(true)]
		public DateTime InputDate 
		{
			get { return GetColumnValue<DateTime>(Columns.InputDate); }
			set { SetColumnValue(Columns.InputDate, value); }
		}
		  
		[XmlAttribute("UserId")]
		[Bindable(true)]
		public string UserId 
		{
			get { return GetColumnValue<string>(Columns.UserId); }
			set { SetColumnValue(Columns.UserId, value); }
		}
		  
		[XmlAttribute("Locked")]
		[Bindable(true)]
		public byte? Locked 
		{
			get { return GetColumnValue<byte?>(Columns.Locked); }
			set { SetColumnValue(Columns.Locked, value); }
		}
		  
		[XmlAttribute("DeleteUserBy")]
		[Bindable(true)]
		public string DeleteUserBy 
		{
			get { return GetColumnValue<string>(Columns.DeleteUserBy); }
			set { SetColumnValue(Columns.DeleteUserBy, value); }
		}
		  
		[XmlAttribute("DeleteDateBy")]
		[Bindable(true)]
		public DateTime? DeleteDateBy 
		{
			get { return GetColumnValue<DateTime?>(Columns.DeleteDateBy); }
			set { SetColumnValue(Columns.DeleteDateBy, value); }
		}
		  
		[XmlAttribute("DeleteReasonBy")]
		[Bindable(true)]
		public string DeleteReasonBy 
		{
			get { return GetColumnValue<string>(Columns.DeleteReasonBy); }
			set { SetColumnValue(Columns.DeleteReasonBy, value); }
		}
		  
		[XmlAttribute("DanToc")]
		[Bindable(true)]
		public short? DanToc 
		{
			get { return GetColumnValue<short?>(Columns.DanToc); }
			set { SetColumnValue(Columns.DanToc, value); }
		}
		  
		[XmlAttribute("NgoaiKieu")]
		[Bindable(true)]
		public string NgoaiKieu 
		{
			get { return GetColumnValue<string>(Columns.NgoaiKieu); }
			set { SetColumnValue(Columns.NgoaiKieu, value); }
		}
		  
		[XmlAttribute("TtHonNhan")]
		[Bindable(true)]
		public byte? TtHonNhan 
		{
			get { return GetColumnValue<byte?>(Columns.TtHonNhan); }
			set { SetColumnValue(Columns.TtHonNhan, value); }
		}
		  
		[XmlAttribute("NgaySua")]
		[Bindable(true)]
		public DateTime? NgaySua 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgaySua); }
			set { SetColumnValue(Columns.NgaySua, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NguoiSua")]
		[Bindable(true)]
		public string NguoiSua 
		{
			get { return GetColumnValue<string>(Columns.NguoiSua); }
			set { SetColumnValue(Columns.NguoiSua, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("IpMaySua")]
		[Bindable(true)]
		public string IpMaySua 
		{
			get { return GetColumnValue<string>(Columns.IpMaySua); }
			set { SetColumnValue(Columns.IpMaySua, value); }
		}
		  
		[XmlAttribute("IpMayTao")]
		[Bindable(true)]
		public string IpMayTao 
		{
			get { return GetColumnValue<string>(Columns.IpMayTao); }
			set { SetColumnValue(Columns.IpMayTao, value); }
		}
		  
		[XmlAttribute("TenKhongDau")]
		[Bindable(true)]
		public string TenKhongDau 
		{
			get { return GetColumnValue<string>(Columns.TenKhongDau); }
			set { SetColumnValue(Columns.TenKhongDau, value); }
		}
		  
		[XmlAttribute("DiaChiBn")]
		[Bindable(true)]
		public string DiaChiBn 
		{
			get { return GetColumnValue<string>(Columns.DiaChiBn); }
			set { SetColumnValue(Columns.DiaChiBn, value); }
		}
		  
		[XmlAttribute("SoLo")]
		[Bindable(true)]
		public int? SoLo 
		{
			get { return GetColumnValue<int?>(Columns.SoLo); }
			set { SetColumnValue(Columns.SoLo, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varPatientName,string varPatientAddr,string varProvinceId,string varDistrictId,DateTime? varPatientBirth,short? varYearOfBirth,byte varPatientSex,string varPatientJob,string varOffices,string varIdentifyNum,short? varCountryId,string varPatientPhone,string varPatientEmail,DateTime varInputDate,string varUserId,byte? varLocked,string varDeleteUserBy,DateTime? varDeleteDateBy,string varDeleteReasonBy,short? varDanToc,string varNgoaiKieu,byte? varTtHonNhan,DateTime? varNgaySua,DateTime? varNgayTao,string varNguoiSua,string varNguoiTao,string varIpMaySua,string varIpMayTao,string varTenKhongDau,string varDiaChiBn,int? varSoLo)
		{
			TPatientInfo item = new TPatientInfo();
			
			item.PatientName = varPatientName;
			
			item.PatientAddr = varPatientAddr;
			
			item.ProvinceId = varProvinceId;
			
			item.DistrictId = varDistrictId;
			
			item.PatientBirth = varPatientBirth;
			
			item.YearOfBirth = varYearOfBirth;
			
			item.PatientSex = varPatientSex;
			
			item.PatientJob = varPatientJob;
			
			item.Offices = varOffices;
			
			item.IdentifyNum = varIdentifyNum;
			
			item.CountryId = varCountryId;
			
			item.PatientPhone = varPatientPhone;
			
			item.PatientEmail = varPatientEmail;
			
			item.InputDate = varInputDate;
			
			item.UserId = varUserId;
			
			item.Locked = varLocked;
			
			item.DeleteUserBy = varDeleteUserBy;
			
			item.DeleteDateBy = varDeleteDateBy;
			
			item.DeleteReasonBy = varDeleteReasonBy;
			
			item.DanToc = varDanToc;
			
			item.NgoaiKieu = varNgoaiKieu;
			
			item.TtHonNhan = varTtHonNhan;
			
			item.NgaySua = varNgaySua;
			
			item.NgayTao = varNgayTao;
			
			item.NguoiSua = varNguoiSua;
			
			item.NguoiTao = varNguoiTao;
			
			item.IpMaySua = varIpMaySua;
			
			item.IpMayTao = varIpMayTao;
			
			item.TenKhongDau = varTenKhongDau;
			
			item.DiaChiBn = varDiaChiBn;
			
			item.SoLo = varSoLo;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varPatientId,string varPatientName,string varPatientAddr,string varProvinceId,string varDistrictId,DateTime? varPatientBirth,short? varYearOfBirth,byte varPatientSex,string varPatientJob,string varOffices,string varIdentifyNum,short? varCountryId,string varPatientPhone,string varPatientEmail,DateTime varInputDate,string varUserId,byte? varLocked,string varDeleteUserBy,DateTime? varDeleteDateBy,string varDeleteReasonBy,short? varDanToc,string varNgoaiKieu,byte? varTtHonNhan,DateTime? varNgaySua,DateTime? varNgayTao,string varNguoiSua,string varNguoiTao,string varIpMaySua,string varIpMayTao,string varTenKhongDau,string varDiaChiBn,int? varSoLo)
		{
			TPatientInfo item = new TPatientInfo();
			
				item.PatientId = varPatientId;
			
				item.PatientName = varPatientName;
			
				item.PatientAddr = varPatientAddr;
			
				item.ProvinceId = varProvinceId;
			
				item.DistrictId = varDistrictId;
			
				item.PatientBirth = varPatientBirth;
			
				item.YearOfBirth = varYearOfBirth;
			
				item.PatientSex = varPatientSex;
			
				item.PatientJob = varPatientJob;
			
				item.Offices = varOffices;
			
				item.IdentifyNum = varIdentifyNum;
			
				item.CountryId = varCountryId;
			
				item.PatientPhone = varPatientPhone;
			
				item.PatientEmail = varPatientEmail;
			
				item.InputDate = varInputDate;
			
				item.UserId = varUserId;
			
				item.Locked = varLocked;
			
				item.DeleteUserBy = varDeleteUserBy;
			
				item.DeleteDateBy = varDeleteDateBy;
			
				item.DeleteReasonBy = varDeleteReasonBy;
			
				item.DanToc = varDanToc;
			
				item.NgoaiKieu = varNgoaiKieu;
			
				item.TtHonNhan = varTtHonNhan;
			
				item.NgaySua = varNgaySua;
			
				item.NgayTao = varNgayTao;
			
				item.NguoiSua = varNguoiSua;
			
				item.NguoiTao = varNguoiTao;
			
				item.IpMaySua = varIpMaySua;
			
				item.IpMayTao = varIpMayTao;
			
				item.TenKhongDau = varTenKhongDau;
			
				item.DiaChiBn = varDiaChiBn;
			
				item.SoLo = varSoLo;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientAddrColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ProvinceIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DistrictIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientBirthColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn YearOfBirthColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientSexColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientJobColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn OfficesColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn IdentifyNumColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CountryIdColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientPhoneColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientEmailColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn InputDateColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn UserIdColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn LockedColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn DeleteUserByColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn DeleteDateByColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn DeleteReasonByColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn DanTocColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn NgoaiKieuColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn TtHonNhanColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn NgaySuaColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiSuaColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn IpMaySuaColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn IpMayTaoColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn TenKhongDauColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn DiaChiBnColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn SoLoColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PatientId = @"Patient_ID";
			 public static string PatientName = @"Patient_Name";
			 public static string PatientAddr = @"Patient_Addr";
			 public static string ProvinceId = @"Province_ID";
			 public static string DistrictId = @"District_ID";
			 public static string PatientBirth = @"Patient_Birth";
			 public static string YearOfBirth = @"Year_Of_Birth";
			 public static string PatientSex = @"Patient_Sex";
			 public static string PatientJob = @"Patient_Job";
			 public static string Offices = @"Offices";
			 public static string IdentifyNum = @"Identify_Num";
			 public static string CountryId = @"Country_ID";
			 public static string PatientPhone = @"Patient_Phone";
			 public static string PatientEmail = @"Patient_Email";
			 public static string InputDate = @"Input_Date";
			 public static string UserId = @"User_ID";
			 public static string Locked = @"Locked";
			 public static string DeleteUserBy = @"Delete_User_By";
			 public static string DeleteDateBy = @"Delete_Date_By";
			 public static string DeleteReasonBy = @"Delete_Reason_By";
			 public static string DanToc = @"Dan_Toc";
			 public static string NgoaiKieu = @"Ngoai_Kieu";
			 public static string TtHonNhan = @"TT_HON_NHAN";
			 public static string NgaySua = @"NGAY_SUA";
			 public static string NgayTao = @"NGAY_TAO";
			 public static string NguoiSua = @"NGUOI_SUA";
			 public static string NguoiTao = @"NGUOI_TAO";
			 public static string IpMaySua = @"IP_MAY_SUA";
			 public static string IpMayTao = @"IP_MAY_TAO";
			 public static string TenKhongDau = @"TEN_KHONG_DAU";
			 public static string DiaChiBn = @"DiaChi_BN";
			 public static string SoLo = @"SO_LO";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
