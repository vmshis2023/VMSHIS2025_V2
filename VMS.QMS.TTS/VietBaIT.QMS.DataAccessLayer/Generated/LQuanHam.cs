using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LQuanHam class.
	/// </summary>
    [Serializable]
	public partial class LQuanHamCollection : ActiveList<LQuanHam, LQuanHamCollection>
	{	   
		public LQuanHamCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LQuanHamCollection</returns>
		public LQuanHamCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LQuanHam o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_Quan_Ham table.
	/// </summary>
	[Serializable]
	public partial class LQuanHam : ActiveRecord<LQuanHam>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LQuanHam()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LQuanHam(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LQuanHam(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LQuanHam(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_Quan_Ham", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdQuanHam = new TableSchema.TableColumn(schema);
				colvarIdQuanHam.ColumnName = "ID_QuanHam";
				colvarIdQuanHam.DataType = DbType.Int16;
				colvarIdQuanHam.MaxLength = 0;
				colvarIdQuanHam.AutoIncrement = true;
				colvarIdQuanHam.IsNullable = false;
				colvarIdQuanHam.IsPrimaryKey = true;
				colvarIdQuanHam.IsForeignKey = false;
				colvarIdQuanHam.IsReadOnly = false;
				colvarIdQuanHam.DefaultSetting = @"";
				colvarIdQuanHam.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdQuanHam);
				
				TableSchema.TableColumn colvarMaQuanHam = new TableSchema.TableColumn(schema);
				colvarMaQuanHam.ColumnName = "Ma_QuanHam";
				colvarMaQuanHam.DataType = DbType.String;
				colvarMaQuanHam.MaxLength = 20;
				colvarMaQuanHam.AutoIncrement = false;
				colvarMaQuanHam.IsNullable = true;
				colvarMaQuanHam.IsPrimaryKey = false;
				colvarMaQuanHam.IsForeignKey = false;
				colvarMaQuanHam.IsReadOnly = false;
				colvarMaQuanHam.DefaultSetting = @"";
				colvarMaQuanHam.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaQuanHam);
				
				TableSchema.TableColumn colvarTenQuanHam = new TableSchema.TableColumn(schema);
				colvarTenQuanHam.ColumnName = "Ten_QuanHam";
				colvarTenQuanHam.DataType = DbType.String;
				colvarTenQuanHam.MaxLength = 100;
				colvarTenQuanHam.AutoIncrement = false;
				colvarTenQuanHam.IsNullable = true;
				colvarTenQuanHam.IsPrimaryKey = false;
				colvarTenQuanHam.IsForeignKey = false;
				colvarTenQuanHam.IsReadOnly = false;
				colvarTenQuanHam.DefaultSetting = @"";
				colvarTenQuanHam.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenQuanHam);
				
				TableSchema.TableColumn colvarStt = new TableSchema.TableColumn(schema);
				colvarStt.ColumnName = "STT";
				colvarStt.DataType = DbType.Int16;
				colvarStt.MaxLength = 0;
				colvarStt.AutoIncrement = false;
				colvarStt.IsNullable = true;
				colvarStt.IsPrimaryKey = false;
				colvarStt.IsForeignKey = false;
				colvarStt.IsReadOnly = false;
				colvarStt.DefaultSetting = @"";
				colvarStt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStt);
				
				TableSchema.TableColumn colvarHienThi = new TableSchema.TableColumn(schema);
				colvarHienThi.ColumnName = "Hien_Thi";
				colvarHienThi.DataType = DbType.Byte;
				colvarHienThi.MaxLength = 0;
				colvarHienThi.AutoIncrement = false;
				colvarHienThi.IsNullable = true;
				colvarHienThi.IsPrimaryKey = false;
				colvarHienThi.IsForeignKey = false;
				colvarHienThi.IsReadOnly = false;
				colvarHienThi.DefaultSetting = @"";
				colvarHienThi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHienThi);
				
				TableSchema.TableColumn colvarNhomQuan = new TableSchema.TableColumn(schema);
				colvarNhomQuan.ColumnName = "Nhom_Quan";
				colvarNhomQuan.DataType = DbType.String;
				colvarNhomQuan.MaxLength = 20;
				colvarNhomQuan.AutoIncrement = false;
				colvarNhomQuan.IsNullable = true;
				colvarNhomQuan.IsPrimaryKey = false;
				colvarNhomQuan.IsForeignKey = false;
				colvarNhomQuan.IsReadOnly = false;
				colvarNhomQuan.DefaultSetting = @"";
				colvarNhomQuan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNhomQuan);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_Quan_Ham",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdQuanHam")]
		[Bindable(true)]
		public short IdQuanHam 
		{
			get { return GetColumnValue<short>(Columns.IdQuanHam); }
			set { SetColumnValue(Columns.IdQuanHam, value); }
		}
		  
		[XmlAttribute("MaQuanHam")]
		[Bindable(true)]
		public string MaQuanHam 
		{
			get { return GetColumnValue<string>(Columns.MaQuanHam); }
			set { SetColumnValue(Columns.MaQuanHam, value); }
		}
		  
		[XmlAttribute("TenQuanHam")]
		[Bindable(true)]
		public string TenQuanHam 
		{
			get { return GetColumnValue<string>(Columns.TenQuanHam); }
			set { SetColumnValue(Columns.TenQuanHam, value); }
		}
		  
		[XmlAttribute("Stt")]
		[Bindable(true)]
		public short? Stt 
		{
			get { return GetColumnValue<short?>(Columns.Stt); }
			set { SetColumnValue(Columns.Stt, value); }
		}
		  
		[XmlAttribute("HienThi")]
		[Bindable(true)]
		public byte? HienThi 
		{
			get { return GetColumnValue<byte?>(Columns.HienThi); }
			set { SetColumnValue(Columns.HienThi, value); }
		}
		  
		[XmlAttribute("NhomQuan")]
		[Bindable(true)]
		public string NhomQuan 
		{
			get { return GetColumnValue<string>(Columns.NhomQuan); }
			set { SetColumnValue(Columns.NhomQuan, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaQuanHam,string varTenQuanHam,short? varStt,byte? varHienThi,string varNhomQuan)
		{
			LQuanHam item = new LQuanHam();
			
			item.MaQuanHam = varMaQuanHam;
			
			item.TenQuanHam = varTenQuanHam;
			
			item.Stt = varStt;
			
			item.HienThi = varHienThi;
			
			item.NhomQuan = varNhomQuan;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(short varIdQuanHam,string varMaQuanHam,string varTenQuanHam,short? varStt,byte? varHienThi,string varNhomQuan)
		{
			LQuanHam item = new LQuanHam();
			
				item.IdQuanHam = varIdQuanHam;
			
				item.MaQuanHam = varMaQuanHam;
			
				item.TenQuanHam = varTenQuanHam;
			
				item.Stt = varStt;
			
				item.HienThi = varHienThi;
			
				item.NhomQuan = varNhomQuan;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdQuanHamColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaQuanHamColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenQuanHamColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SttColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn HienThiColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn NhomQuanColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdQuanHam = @"ID_QuanHam";
			 public static string MaQuanHam = @"Ma_QuanHam";
			 public static string TenQuanHam = @"Ten_QuanHam";
			 public static string Stt = @"STT";
			 public static string HienThi = @"Hien_Thi";
			 public static string NhomQuan = @"Nhom_Quan";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
