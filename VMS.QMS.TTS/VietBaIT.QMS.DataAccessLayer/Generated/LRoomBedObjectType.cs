using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LRoomBedObjectType class.
	/// </summary>
    [Serializable]
	public partial class LRoomBedObjectTypeCollection : ActiveList<LRoomBedObjectType, LRoomBedObjectTypeCollection>
	{	   
		public LRoomBedObjectTypeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LRoomBedObjectTypeCollection</returns>
		public LRoomBedObjectTypeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LRoomBedObjectType o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_RoomBed_ObjectType table.
	/// </summary>
	[Serializable]
	public partial class LRoomBedObjectType : ActiveRecord<LRoomBedObjectType>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LRoomBedObjectType()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LRoomBedObjectType(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LRoomBedObjectType(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LRoomBedObjectType(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_RoomBed_ObjectType", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarRomId = new TableSchema.TableColumn(schema);
				colvarRomId.ColumnName = "Rom_ID";
				colvarRomId.DataType = DbType.Int32;
				colvarRomId.MaxLength = 0;
				colvarRomId.AutoIncrement = false;
				colvarRomId.IsNullable = false;
				colvarRomId.IsPrimaryKey = false;
				colvarRomId.IsForeignKey = false;
				colvarRomId.IsReadOnly = false;
				colvarRomId.DefaultSetting = @"";
				colvarRomId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRomId);
				
				TableSchema.TableColumn colvarBedId = new TableSchema.TableColumn(schema);
				colvarBedId.ColumnName = "Bed_ID";
				colvarBedId.DataType = DbType.Int32;
				colvarBedId.MaxLength = 0;
				colvarBedId.AutoIncrement = false;
				colvarBedId.IsNullable = false;
				colvarBedId.IsPrimaryKey = false;
				colvarBedId.IsForeignKey = false;
				colvarBedId.IsReadOnly = false;
				colvarBedId.DefaultSetting = @"";
				colvarBedId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedId);
				
				TableSchema.TableColumn colvarLastPrice = new TableSchema.TableColumn(schema);
				colvarLastPrice.ColumnName = "Last_Price";
				colvarLastPrice.DataType = DbType.Decimal;
				colvarLastPrice.MaxLength = 0;
				colvarLastPrice.AutoIncrement = false;
				colvarLastPrice.IsNullable = false;
				colvarLastPrice.IsPrimaryKey = false;
				colvarLastPrice.IsForeignKey = false;
				colvarLastPrice.IsReadOnly = false;
				colvarLastPrice.DefaultSetting = @"";
				colvarLastPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastPrice);
				
				TableSchema.TableColumn colvarSurcharge = new TableSchema.TableColumn(schema);
				colvarSurcharge.ColumnName = "Surcharge";
				colvarSurcharge.DataType = DbType.Decimal;
				colvarSurcharge.MaxLength = 0;
				colvarSurcharge.AutoIncrement = false;
				colvarSurcharge.IsNullable = false;
				colvarSurcharge.IsPrimaryKey = false;
				colvarSurcharge.IsForeignKey = false;
				colvarSurcharge.IsReadOnly = false;
				colvarSurcharge.DefaultSetting = @"";
				colvarSurcharge.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurcharge);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 255;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				TableSchema.TableColumn colvarObjectTypeCode = new TableSchema.TableColumn(schema);
				colvarObjectTypeCode.ColumnName = "ObjectType_Code";
				colvarObjectTypeCode.DataType = DbType.String;
				colvarObjectTypeCode.MaxLength = 50;
				colvarObjectTypeCode.AutoIncrement = false;
				colvarObjectTypeCode.IsNullable = false;
				colvarObjectTypeCode.IsPrimaryKey = false;
				colvarObjectTypeCode.IsForeignKey = false;
				colvarObjectTypeCode.IsReadOnly = false;
				colvarObjectTypeCode.DefaultSetting = @"";
				colvarObjectTypeCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObjectTypeCode);
				
				TableSchema.TableColumn colvarObjectTypeType = new TableSchema.TableColumn(schema);
				colvarObjectTypeType.ColumnName = "ObjectTypeType";
				colvarObjectTypeType.DataType = DbType.Int32;
				colvarObjectTypeType.MaxLength = 0;
				colvarObjectTypeType.AutoIncrement = false;
				colvarObjectTypeType.IsNullable = true;
				colvarObjectTypeType.IsPrimaryKey = false;
				colvarObjectTypeType.IsForeignKey = false;
				colvarObjectTypeType.IsReadOnly = false;
				colvarObjectTypeType.DefaultSetting = @"";
				colvarObjectTypeType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObjectTypeType);
				
				TableSchema.TableColumn colvarIsPayment = new TableSchema.TableColumn(schema);
				colvarIsPayment.ColumnName = "IsPayment";
				colvarIsPayment.DataType = DbType.Int32;
				colvarIsPayment.MaxLength = 0;
				colvarIsPayment.AutoIncrement = false;
				colvarIsPayment.IsNullable = true;
				colvarIsPayment.IsPrimaryKey = false;
				colvarIsPayment.IsForeignKey = false;
				colvarIsPayment.IsReadOnly = false;
				colvarIsPayment.DefaultSetting = @"";
				colvarIsPayment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPayment);
				
				TableSchema.TableColumn colvarKieuThue = new TableSchema.TableColumn(schema);
				colvarKieuThue.ColumnName = "KIEU_THUE";
				colvarKieuThue.DataType = DbType.String;
				colvarKieuThue.MaxLength = 50;
				colvarKieuThue.AutoIncrement = false;
				colvarKieuThue.IsNullable = true;
				colvarKieuThue.IsPrimaryKey = false;
				colvarKieuThue.IsForeignKey = false;
				colvarKieuThue.IsReadOnly = false;
				colvarKieuThue.DefaultSetting = @"";
				colvarKieuThue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKieuThue);
				
				TableSchema.TableColumn colvarGiaCu = new TableSchema.TableColumn(schema);
				colvarGiaCu.ColumnName = "GIA_CU";
				colvarGiaCu.DataType = DbType.Decimal;
				colvarGiaCu.MaxLength = 0;
				colvarGiaCu.AutoIncrement = false;
				colvarGiaCu.IsNullable = true;
				colvarGiaCu.IsPrimaryKey = false;
				colvarGiaCu.IsForeignKey = false;
				colvarGiaCu.IsReadOnly = false;
				colvarGiaCu.DefaultSetting = @"";
				colvarGiaCu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGiaCu);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_RoomBed_ObjectType",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("RomId")]
		[Bindable(true)]
		public int RomId 
		{
			get { return GetColumnValue<int>(Columns.RomId); }
			set { SetColumnValue(Columns.RomId, value); }
		}
		  
		[XmlAttribute("BedId")]
		[Bindable(true)]
		public int BedId 
		{
			get { return GetColumnValue<int>(Columns.BedId); }
			set { SetColumnValue(Columns.BedId, value); }
		}
		  
		[XmlAttribute("LastPrice")]
		[Bindable(true)]
		public decimal LastPrice 
		{
			get { return GetColumnValue<decimal>(Columns.LastPrice); }
			set { SetColumnValue(Columns.LastPrice, value); }
		}
		  
		[XmlAttribute("Surcharge")]
		[Bindable(true)]
		public decimal Surcharge 
		{
			get { return GetColumnValue<decimal>(Columns.Surcharge); }
			set { SetColumnValue(Columns.Surcharge, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		  
		[XmlAttribute("ObjectTypeCode")]
		[Bindable(true)]
		public string ObjectTypeCode 
		{
			get { return GetColumnValue<string>(Columns.ObjectTypeCode); }
			set { SetColumnValue(Columns.ObjectTypeCode, value); }
		}
		  
		[XmlAttribute("ObjectTypeType")]
		[Bindable(true)]
		public int? ObjectTypeType 
		{
			get { return GetColumnValue<int?>(Columns.ObjectTypeType); }
			set { SetColumnValue(Columns.ObjectTypeType, value); }
		}
		  
		[XmlAttribute("IsPayment")]
		[Bindable(true)]
		public int? IsPayment 
		{
			get { return GetColumnValue<int?>(Columns.IsPayment); }
			set { SetColumnValue(Columns.IsPayment, value); }
		}
		  
		[XmlAttribute("KieuThue")]
		[Bindable(true)]
		public string KieuThue 
		{
			get { return GetColumnValue<string>(Columns.KieuThue); }
			set { SetColumnValue(Columns.KieuThue, value); }
		}
		  
		[XmlAttribute("GiaCu")]
		[Bindable(true)]
		public decimal? GiaCu 
		{
			get { return GetColumnValue<decimal?>(Columns.GiaCu); }
			set { SetColumnValue(Columns.GiaCu, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varRomId,int varBedId,decimal varLastPrice,decimal varSurcharge,string varSDesc,string varObjectTypeCode,int? varObjectTypeType,int? varIsPayment,string varKieuThue,decimal? varGiaCu)
		{
			LRoomBedObjectType item = new LRoomBedObjectType();
			
			item.RomId = varRomId;
			
			item.BedId = varBedId;
			
			item.LastPrice = varLastPrice;
			
			item.Surcharge = varSurcharge;
			
			item.SDesc = varSDesc;
			
			item.ObjectTypeCode = varObjectTypeCode;
			
			item.ObjectTypeType = varObjectTypeType;
			
			item.IsPayment = varIsPayment;
			
			item.KieuThue = varKieuThue;
			
			item.GiaCu = varGiaCu;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int varRomId,int varBedId,decimal varLastPrice,decimal varSurcharge,string varSDesc,string varObjectTypeCode,int? varObjectTypeType,int? varIsPayment,string varKieuThue,decimal? varGiaCu)
		{
			LRoomBedObjectType item = new LRoomBedObjectType();
			
				item.Id = varId;
			
				item.RomId = varRomId;
			
				item.BedId = varBedId;
			
				item.LastPrice = varLastPrice;
			
				item.Surcharge = varSurcharge;
			
				item.SDesc = varSDesc;
			
				item.ObjectTypeCode = varObjectTypeCode;
			
				item.ObjectTypeType = varObjectTypeType;
			
				item.IsPayment = varIsPayment;
			
				item.KieuThue = varKieuThue;
			
				item.GiaCu = varGiaCu;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn RomIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn BedIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn LastPriceColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SurchargeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ObjectTypeCodeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ObjectTypeTypeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IsPaymentColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn KieuThueColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn GiaCuColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string RomId = @"Rom_ID";
			 public static string BedId = @"Bed_ID";
			 public static string LastPrice = @"Last_Price";
			 public static string Surcharge = @"Surcharge";
			 public static string SDesc = @"sDesc";
			 public static string ObjectTypeCode = @"ObjectType_Code";
			 public static string ObjectTypeType = @"ObjectTypeType";
			 public static string IsPayment = @"IsPayment";
			 public static string KieuThue = @"KIEU_THUE";
			 public static string GiaCu = @"GIA_CU";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
