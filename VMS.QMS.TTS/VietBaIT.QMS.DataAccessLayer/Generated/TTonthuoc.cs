using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TTonthuoc class.
	/// </summary>
    [Serializable]
	public partial class TTonthuocCollection : ActiveList<TTonthuoc, TTonthuocCollection>
	{	   
		public TTonthuocCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TTonthuocCollection</returns>
		public TTonthuocCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TTonthuoc o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_TONTHUOC table.
	/// </summary>
	[Serializable]
	public partial class TTonthuoc : ActiveRecord<TTonthuoc>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TTonthuoc()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TTonthuoc(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TTonthuoc(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TTonthuoc(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_TONTHUOC", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarDrugId = new TableSchema.TableColumn(schema);
				colvarDrugId.ColumnName = "DRUG_ID";
				colvarDrugId.DataType = DbType.Int64;
				colvarDrugId.MaxLength = 0;
				colvarDrugId.AutoIncrement = false;
				colvarDrugId.IsNullable = false;
				colvarDrugId.IsPrimaryKey = true;
				colvarDrugId.IsForeignKey = false;
				colvarDrugId.IsReadOnly = false;
				colvarDrugId.DefaultSetting = @"";
				colvarDrugId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDrugId);
				
				TableSchema.TableColumn colvarStockId = new TableSchema.TableColumn(schema);
				colvarStockId.ColumnName = "STOCK_ID";
				colvarStockId.DataType = DbType.Int16;
				colvarStockId.MaxLength = 0;
				colvarStockId.AutoIncrement = false;
				colvarStockId.IsNullable = false;
				colvarStockId.IsPrimaryKey = true;
				colvarStockId.IsForeignKey = false;
				colvarStockId.IsReadOnly = false;
				colvarStockId.DefaultSetting = @"";
				colvarStockId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStockId);
				
				TableSchema.TableColumn colvarExpiredDate = new TableSchema.TableColumn(schema);
				colvarExpiredDate.ColumnName = "EXPIRED_DATE";
				colvarExpiredDate.DataType = DbType.DateTime;
				colvarExpiredDate.MaxLength = 0;
				colvarExpiredDate.AutoIncrement = false;
				colvarExpiredDate.IsNullable = false;
				colvarExpiredDate.IsPrimaryKey = true;
				colvarExpiredDate.IsForeignKey = false;
				colvarExpiredDate.IsReadOnly = false;
				colvarExpiredDate.DefaultSetting = @"";
				colvarExpiredDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpiredDate);
				
				TableSchema.TableColumn colvarPrice = new TableSchema.TableColumn(schema);
				colvarPrice.ColumnName = "PRICE";
				colvarPrice.DataType = DbType.Currency;
				colvarPrice.MaxLength = 0;
				colvarPrice.AutoIncrement = false;
				colvarPrice.IsNullable = false;
				colvarPrice.IsPrimaryKey = true;
				colvarPrice.IsForeignKey = false;
				colvarPrice.IsReadOnly = false;
				colvarPrice.DefaultSetting = @"";
				colvarPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrice);
				
				TableSchema.TableColumn colvarNgay = new TableSchema.TableColumn(schema);
				colvarNgay.ColumnName = "NGAY";
				colvarNgay.DataType = DbType.DateTime;
				colvarNgay.MaxLength = 0;
				colvarNgay.AutoIncrement = false;
				colvarNgay.IsNullable = false;
				colvarNgay.IsPrimaryKey = true;
				colvarNgay.IsForeignKey = false;
				colvarNgay.IsReadOnly = false;
				colvarNgay.DefaultSetting = @"";
				colvarNgay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgay);
				
				TableSchema.TableColumn colvarTonDaungay = new TableSchema.TableColumn(schema);
				colvarTonDaungay.ColumnName = "TON_DAUNGAY";
				colvarTonDaungay.DataType = DbType.Int32;
				colvarTonDaungay.MaxLength = 0;
				colvarTonDaungay.AutoIncrement = false;
				colvarTonDaungay.IsNullable = false;
				colvarTonDaungay.IsPrimaryKey = false;
				colvarTonDaungay.IsForeignKey = false;
				colvarTonDaungay.IsReadOnly = false;
				colvarTonDaungay.DefaultSetting = @"";
				colvarTonDaungay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTonDaungay);
				
				TableSchema.TableColumn colvarNhapTrongngay = new TableSchema.TableColumn(schema);
				colvarNhapTrongngay.ColumnName = "NHAP_TRONGNGAY";
				colvarNhapTrongngay.DataType = DbType.Int32;
				colvarNhapTrongngay.MaxLength = 0;
				colvarNhapTrongngay.AutoIncrement = false;
				colvarNhapTrongngay.IsNullable = false;
				colvarNhapTrongngay.IsPrimaryKey = false;
				colvarNhapTrongngay.IsForeignKey = false;
				colvarNhapTrongngay.IsReadOnly = false;
				colvarNhapTrongngay.DefaultSetting = @"";
				colvarNhapTrongngay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNhapTrongngay);
				
				TableSchema.TableColumn colvarXuatTrongngay = new TableSchema.TableColumn(schema);
				colvarXuatTrongngay.ColumnName = "XUAT_TRONGNGAY";
				colvarXuatTrongngay.DataType = DbType.Int32;
				colvarXuatTrongngay.MaxLength = 0;
				colvarXuatTrongngay.AutoIncrement = false;
				colvarXuatTrongngay.IsNullable = false;
				colvarXuatTrongngay.IsPrimaryKey = false;
				colvarXuatTrongngay.IsForeignKey = false;
				colvarXuatTrongngay.IsReadOnly = false;
				colvarXuatTrongngay.DefaultSetting = @"";
				colvarXuatTrongngay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXuatTrongngay);
				
				TableSchema.TableColumn colvarNhapchotTrongngay = new TableSchema.TableColumn(schema);
				colvarNhapchotTrongngay.ColumnName = "NHAPCHOT_TRONGNGAY";
				colvarNhapchotTrongngay.DataType = DbType.Int32;
				colvarNhapchotTrongngay.MaxLength = 0;
				colvarNhapchotTrongngay.AutoIncrement = false;
				colvarNhapchotTrongngay.IsNullable = true;
				colvarNhapchotTrongngay.IsPrimaryKey = false;
				colvarNhapchotTrongngay.IsForeignKey = false;
				colvarNhapchotTrongngay.IsReadOnly = false;
				
						colvarNhapchotTrongngay.DefaultSetting = @"((0))";
				colvarNhapchotTrongngay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNhapchotTrongngay);
				
				TableSchema.TableColumn colvarXuatchotTrongngay = new TableSchema.TableColumn(schema);
				colvarXuatchotTrongngay.ColumnName = "XUATCHOT_TRONGNGAY";
				colvarXuatchotTrongngay.DataType = DbType.Int32;
				colvarXuatchotTrongngay.MaxLength = 0;
				colvarXuatchotTrongngay.AutoIncrement = false;
				colvarXuatchotTrongngay.IsNullable = true;
				colvarXuatchotTrongngay.IsPrimaryKey = false;
				colvarXuatchotTrongngay.IsForeignKey = false;
				colvarXuatchotTrongngay.IsReadOnly = false;
				
						colvarXuatchotTrongngay.DefaultSetting = @"((0))";
				colvarXuatchotTrongngay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXuatchotTrongngay);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_TONTHUOC",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DrugId")]
		[Bindable(true)]
		public long DrugId 
		{
			get { return GetColumnValue<long>(Columns.DrugId); }
			set { SetColumnValue(Columns.DrugId, value); }
		}
		  
		[XmlAttribute("StockId")]
		[Bindable(true)]
		public short StockId 
		{
			get { return GetColumnValue<short>(Columns.StockId); }
			set { SetColumnValue(Columns.StockId, value); }
		}
		  
		[XmlAttribute("ExpiredDate")]
		[Bindable(true)]
		public DateTime ExpiredDate 
		{
			get { return GetColumnValue<DateTime>(Columns.ExpiredDate); }
			set { SetColumnValue(Columns.ExpiredDate, value); }
		}
		  
		[XmlAttribute("Price")]
		[Bindable(true)]
		public decimal Price 
		{
			get { return GetColumnValue<decimal>(Columns.Price); }
			set { SetColumnValue(Columns.Price, value); }
		}
		  
		[XmlAttribute("Ngay")]
		[Bindable(true)]
		public DateTime Ngay 
		{
			get { return GetColumnValue<DateTime>(Columns.Ngay); }
			set { SetColumnValue(Columns.Ngay, value); }
		}
		  
		[XmlAttribute("TonDaungay")]
		[Bindable(true)]
		public int TonDaungay 
		{
			get { return GetColumnValue<int>(Columns.TonDaungay); }
			set { SetColumnValue(Columns.TonDaungay, value); }
		}
		  
		[XmlAttribute("NhapTrongngay")]
		[Bindable(true)]
		public int NhapTrongngay 
		{
			get { return GetColumnValue<int>(Columns.NhapTrongngay); }
			set { SetColumnValue(Columns.NhapTrongngay, value); }
		}
		  
		[XmlAttribute("XuatTrongngay")]
		[Bindable(true)]
		public int XuatTrongngay 
		{
			get { return GetColumnValue<int>(Columns.XuatTrongngay); }
			set { SetColumnValue(Columns.XuatTrongngay, value); }
		}
		  
		[XmlAttribute("NhapchotTrongngay")]
		[Bindable(true)]
		public int? NhapchotTrongngay 
		{
			get { return GetColumnValue<int?>(Columns.NhapchotTrongngay); }
			set { SetColumnValue(Columns.NhapchotTrongngay, value); }
		}
		  
		[XmlAttribute("XuatchotTrongngay")]
		[Bindable(true)]
		public int? XuatchotTrongngay 
		{
			get { return GetColumnValue<int?>(Columns.XuatchotTrongngay); }
			set { SetColumnValue(Columns.XuatchotTrongngay, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varDrugId,short varStockId,DateTime varExpiredDate,decimal varPrice,DateTime varNgay,int varTonDaungay,int varNhapTrongngay,int varXuatTrongngay,int? varNhapchotTrongngay,int? varXuatchotTrongngay)
		{
			TTonthuoc item = new TTonthuoc();
			
			item.DrugId = varDrugId;
			
			item.StockId = varStockId;
			
			item.ExpiredDate = varExpiredDate;
			
			item.Price = varPrice;
			
			item.Ngay = varNgay;
			
			item.TonDaungay = varTonDaungay;
			
			item.NhapTrongngay = varNhapTrongngay;
			
			item.XuatTrongngay = varXuatTrongngay;
			
			item.NhapchotTrongngay = varNhapchotTrongngay;
			
			item.XuatchotTrongngay = varXuatchotTrongngay;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varDrugId,short varStockId,DateTime varExpiredDate,decimal varPrice,DateTime varNgay,int varTonDaungay,int varNhapTrongngay,int varXuatTrongngay,int? varNhapchotTrongngay,int? varXuatchotTrongngay)
		{
			TTonthuoc item = new TTonthuoc();
			
				item.DrugId = varDrugId;
			
				item.StockId = varStockId;
			
				item.ExpiredDate = varExpiredDate;
			
				item.Price = varPrice;
			
				item.Ngay = varNgay;
			
				item.TonDaungay = varTonDaungay;
			
				item.NhapTrongngay = varNhapTrongngay;
			
				item.XuatTrongngay = varXuatTrongngay;
			
				item.NhapchotTrongngay = varNhapchotTrongngay;
			
				item.XuatchotTrongngay = varXuatchotTrongngay;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DrugIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn StockIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ExpiredDateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TonDaungayColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NhapTrongngayColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XuatTrongngayColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn NhapchotTrongngayColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XuatchotTrongngayColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DrugId = @"DRUG_ID";
			 public static string StockId = @"STOCK_ID";
			 public static string ExpiredDate = @"EXPIRED_DATE";
			 public static string Price = @"PRICE";
			 public static string Ngay = @"NGAY";
			 public static string TonDaungay = @"TON_DAUNGAY";
			 public static string NhapTrongngay = @"NHAP_TRONGNGAY";
			 public static string XuatTrongngay = @"XUAT_TRONGNGAY";
			 public static string NhapchotTrongngay = @"NHAPCHOT_TRONGNGAY";
			 public static string XuatchotTrongngay = @"XUATCHOT_TRONGNGAY";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
