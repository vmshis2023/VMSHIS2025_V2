using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LInsuranceObject class.
	/// </summary>
    [Serializable]
	public partial class LInsuranceObjectCollection : ActiveList<LInsuranceObject, LInsuranceObjectCollection>
	{	   
		public LInsuranceObjectCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LInsuranceObjectCollection</returns>
		public LInsuranceObjectCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LInsuranceObject o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_Insurance_Objects table.
	/// </summary>
	[Serializable]
	public partial class LInsuranceObject : ActiveRecord<LInsuranceObject>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LInsuranceObject()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LInsuranceObject(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LInsuranceObject(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LInsuranceObject(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_Insurance_Objects", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarInsObjectId = new TableSchema.TableColumn(schema);
				colvarInsObjectId.ColumnName = "InsObject_ID";
				colvarInsObjectId.DataType = DbType.Int16;
				colvarInsObjectId.MaxLength = 0;
				colvarInsObjectId.AutoIncrement = true;
				colvarInsObjectId.IsNullable = false;
				colvarInsObjectId.IsPrimaryKey = true;
				colvarInsObjectId.IsForeignKey = false;
				colvarInsObjectId.IsReadOnly = false;
				colvarInsObjectId.DefaultSetting = @"";
				colvarInsObjectId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInsObjectId);
				
				TableSchema.TableColumn colvarInsObjectCode = new TableSchema.TableColumn(schema);
				colvarInsObjectCode.ColumnName = "InsObject_Code";
				colvarInsObjectCode.DataType = DbType.AnsiString;
				colvarInsObjectCode.MaxLength = 50;
				colvarInsObjectCode.AutoIncrement = false;
				colvarInsObjectCode.IsNullable = true;
				colvarInsObjectCode.IsPrimaryKey = false;
				colvarInsObjectCode.IsForeignKey = false;
				colvarInsObjectCode.IsReadOnly = false;
				colvarInsObjectCode.DefaultSetting = @"";
				colvarInsObjectCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInsObjectCode);
				
				TableSchema.TableColumn colvarInsObjectName = new TableSchema.TableColumn(schema);
				colvarInsObjectName.ColumnName = "InsObject_Name";
				colvarInsObjectName.DataType = DbType.String;
				colvarInsObjectName.MaxLength = 100;
				colvarInsObjectName.AutoIncrement = false;
				colvarInsObjectName.IsNullable = true;
				colvarInsObjectName.IsPrimaryKey = false;
				colvarInsObjectName.IsForeignKey = false;
				colvarInsObjectName.IsReadOnly = false;
				colvarInsObjectName.DefaultSetting = @"";
				colvarInsObjectName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInsObjectName);
				
				TableSchema.TableColumn colvarInsuranceGroupId = new TableSchema.TableColumn(schema);
				colvarInsuranceGroupId.ColumnName = "Insurance_Group_ID";
				colvarInsuranceGroupId.DataType = DbType.Int16;
				colvarInsuranceGroupId.MaxLength = 0;
				colvarInsuranceGroupId.AutoIncrement = false;
				colvarInsuranceGroupId.IsNullable = true;
				colvarInsuranceGroupId.IsPrimaryKey = false;
				colvarInsuranceGroupId.IsForeignKey = false;
				colvarInsuranceGroupId.IsReadOnly = false;
				colvarInsuranceGroupId.DefaultSetting = @"";
				colvarInsuranceGroupId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInsuranceGroupId);
				
				TableSchema.TableColumn colvarObjectTypeId = new TableSchema.TableColumn(schema);
				colvarObjectTypeId.ColumnName = "Object_Type_ID";
				colvarObjectTypeId.DataType = DbType.Int16;
				colvarObjectTypeId.MaxLength = 0;
				colvarObjectTypeId.AutoIncrement = false;
				colvarObjectTypeId.IsNullable = true;
				colvarObjectTypeId.IsPrimaryKey = false;
				colvarObjectTypeId.IsForeignKey = false;
				colvarObjectTypeId.IsReadOnly = false;
				colvarObjectTypeId.DefaultSetting = @"";
				colvarObjectTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObjectTypeId);
				
				TableSchema.TableColumn colvarPercent = new TableSchema.TableColumn(schema);
				colvarPercent.ColumnName = "Percent";
				colvarPercent.DataType = DbType.Decimal;
				colvarPercent.MaxLength = 0;
				colvarPercent.AutoIncrement = false;
				colvarPercent.IsNullable = true;
				colvarPercent.IsPrimaryKey = false;
				colvarPercent.IsForeignKey = false;
				colvarPercent.IsReadOnly = false;
				colvarPercent.DefaultSetting = @"";
				colvarPercent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPercent);
				
				TableSchema.TableColumn colvarIntOrder = new TableSchema.TableColumn(schema);
				colvarIntOrder.ColumnName = "intOrder";
				colvarIntOrder.DataType = DbType.Int16;
				colvarIntOrder.MaxLength = 0;
				colvarIntOrder.AutoIncrement = false;
				colvarIntOrder.IsNullable = false;
				colvarIntOrder.IsPrimaryKey = false;
				colvarIntOrder.IsForeignKey = false;
				colvarIntOrder.IsReadOnly = false;
				colvarIntOrder.DefaultSetting = @"";
				colvarIntOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIntOrder);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 255;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				TableSchema.TableColumn colvarSoBhyt = new TableSchema.TableColumn(schema);
				colvarSoBhyt.ColumnName = "SO_BHYT";
				colvarSoBhyt.DataType = DbType.String;
				colvarSoBhyt.MaxLength = 200;
				colvarSoBhyt.AutoIncrement = false;
				colvarSoBhyt.IsNullable = true;
				colvarSoBhyt.IsPrimaryKey = false;
				colvarSoBhyt.IsForeignKey = false;
				colvarSoBhyt.IsReadOnly = false;
				colvarSoBhyt.DefaultSetting = @"";
				colvarSoBhyt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoBhyt);
				
				TableSchema.TableColumn colvarSoQloi = new TableSchema.TableColumn(schema);
				colvarSoQloi.ColumnName = "SO_QLOI";
				colvarSoQloi.DataType = DbType.String;
				colvarSoQloi.MaxLength = 200;
				colvarSoQloi.AutoIncrement = false;
				colvarSoQloi.IsNullable = true;
				colvarSoQloi.IsPrimaryKey = false;
				colvarSoQloi.IsForeignKey = false;
				colvarSoQloi.IsReadOnly = false;
				colvarSoQloi.DefaultSetting = @"";
				colvarSoQloi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoQloi);
				
				TableSchema.TableColumn colvarObjectTypeCode = new TableSchema.TableColumn(schema);
				colvarObjectTypeCode.ColumnName = "ObjectType_Code";
				colvarObjectTypeCode.DataType = DbType.String;
				colvarObjectTypeCode.MaxLength = 10;
				colvarObjectTypeCode.AutoIncrement = false;
				colvarObjectTypeCode.IsNullable = true;
				colvarObjectTypeCode.IsPrimaryKey = false;
				colvarObjectTypeCode.IsForeignKey = false;
				colvarObjectTypeCode.IsReadOnly = false;
				colvarObjectTypeCode.DefaultSetting = @"";
				colvarObjectTypeCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObjectTypeCode);
				
				TableSchema.TableColumn colvarIsEpDungTuyen = new TableSchema.TableColumn(schema);
				colvarIsEpDungTuyen.ColumnName = "IsEp_DungTuyen";
				colvarIsEpDungTuyen.DataType = DbType.Boolean;
				colvarIsEpDungTuyen.MaxLength = 0;
				colvarIsEpDungTuyen.AutoIncrement = false;
				colvarIsEpDungTuyen.IsNullable = true;
				colvarIsEpDungTuyen.IsPrimaryKey = false;
				colvarIsEpDungTuyen.IsForeignKey = false;
				colvarIsEpDungTuyen.IsReadOnly = false;
				
						colvarIsEpDungTuyen.DefaultSetting = @"((0))";
				colvarIsEpDungTuyen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsEpDungTuyen);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_Insurance_Objects",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("InsObjectId")]
		[Bindable(true)]
		public short InsObjectId 
		{
			get { return GetColumnValue<short>(Columns.InsObjectId); }
			set { SetColumnValue(Columns.InsObjectId, value); }
		}
		  
		[XmlAttribute("InsObjectCode")]
		[Bindable(true)]
		public string InsObjectCode 
		{
			get { return GetColumnValue<string>(Columns.InsObjectCode); }
			set { SetColumnValue(Columns.InsObjectCode, value); }
		}
		  
		[XmlAttribute("InsObjectName")]
		[Bindable(true)]
		public string InsObjectName 
		{
			get { return GetColumnValue<string>(Columns.InsObjectName); }
			set { SetColumnValue(Columns.InsObjectName, value); }
		}
		  
		[XmlAttribute("InsuranceGroupId")]
		[Bindable(true)]
		public short? InsuranceGroupId 
		{
			get { return GetColumnValue<short?>(Columns.InsuranceGroupId); }
			set { SetColumnValue(Columns.InsuranceGroupId, value); }
		}
		  
		[XmlAttribute("ObjectTypeId")]
		[Bindable(true)]
		public short? ObjectTypeId 
		{
			get { return GetColumnValue<short?>(Columns.ObjectTypeId); }
			set { SetColumnValue(Columns.ObjectTypeId, value); }
		}
		  
		[XmlAttribute("Percent")]
		[Bindable(true)]
		public decimal? Percent 
		{
			get { return GetColumnValue<decimal?>(Columns.Percent); }
			set { SetColumnValue(Columns.Percent, value); }
		}
		  
		[XmlAttribute("IntOrder")]
		[Bindable(true)]
		public short IntOrder 
		{
			get { return GetColumnValue<short>(Columns.IntOrder); }
			set { SetColumnValue(Columns.IntOrder, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		  
		[XmlAttribute("SoBhyt")]
		[Bindable(true)]
		public string SoBhyt 
		{
			get { return GetColumnValue<string>(Columns.SoBhyt); }
			set { SetColumnValue(Columns.SoBhyt, value); }
		}
		  
		[XmlAttribute("SoQloi")]
		[Bindable(true)]
		public string SoQloi 
		{
			get { return GetColumnValue<string>(Columns.SoQloi); }
			set { SetColumnValue(Columns.SoQloi, value); }
		}
		  
		[XmlAttribute("ObjectTypeCode")]
		[Bindable(true)]
		public string ObjectTypeCode 
		{
			get { return GetColumnValue<string>(Columns.ObjectTypeCode); }
			set { SetColumnValue(Columns.ObjectTypeCode, value); }
		}
		  
		[XmlAttribute("IsEpDungTuyen")]
		[Bindable(true)]
		public bool? IsEpDungTuyen 
		{
			get { return GetColumnValue<bool?>(Columns.IsEpDungTuyen); }
			set { SetColumnValue(Columns.IsEpDungTuyen, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varInsObjectCode,string varInsObjectName,short? varInsuranceGroupId,short? varObjectTypeId,decimal? varPercent,short varIntOrder,string varSDesc,string varSoBhyt,string varSoQloi,string varObjectTypeCode,bool? varIsEpDungTuyen)
		{
			LInsuranceObject item = new LInsuranceObject();
			
			item.InsObjectCode = varInsObjectCode;
			
			item.InsObjectName = varInsObjectName;
			
			item.InsuranceGroupId = varInsuranceGroupId;
			
			item.ObjectTypeId = varObjectTypeId;
			
			item.Percent = varPercent;
			
			item.IntOrder = varIntOrder;
			
			item.SDesc = varSDesc;
			
			item.SoBhyt = varSoBhyt;
			
			item.SoQloi = varSoQloi;
			
			item.ObjectTypeCode = varObjectTypeCode;
			
			item.IsEpDungTuyen = varIsEpDungTuyen;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(short varInsObjectId,string varInsObjectCode,string varInsObjectName,short? varInsuranceGroupId,short? varObjectTypeId,decimal? varPercent,short varIntOrder,string varSDesc,string varSoBhyt,string varSoQloi,string varObjectTypeCode,bool? varIsEpDungTuyen)
		{
			LInsuranceObject item = new LInsuranceObject();
			
				item.InsObjectId = varInsObjectId;
			
				item.InsObjectCode = varInsObjectCode;
			
				item.InsObjectName = varInsObjectName;
			
				item.InsuranceGroupId = varInsuranceGroupId;
			
				item.ObjectTypeId = varObjectTypeId;
			
				item.Percent = varPercent;
			
				item.IntOrder = varIntOrder;
			
				item.SDesc = varSDesc;
			
				item.SoBhyt = varSoBhyt;
			
				item.SoQloi = varSoQloi;
			
				item.ObjectTypeCode = varObjectTypeCode;
			
				item.IsEpDungTuyen = varIsEpDungTuyen;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn InsObjectIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn InsObjectCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn InsObjectNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn InsuranceGroupIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ObjectTypeIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PercentColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IntOrderColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SoBhytColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SoQloiColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ObjectTypeCodeColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn IsEpDungTuyenColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string InsObjectId = @"InsObject_ID";
			 public static string InsObjectCode = @"InsObject_Code";
			 public static string InsObjectName = @"InsObject_Name";
			 public static string InsuranceGroupId = @"Insurance_Group_ID";
			 public static string ObjectTypeId = @"Object_Type_ID";
			 public static string Percent = @"Percent";
			 public static string IntOrder = @"intOrder";
			 public static string SDesc = @"sDesc";
			 public static string SoBhyt = @"SO_BHYT";
			 public static string SoQloi = @"SO_QLOI";
			 public static string ObjectTypeCode = @"ObjectType_Code";
			 public static string IsEpDungTuyen = @"IsEp_DungTuyen";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
