using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
    /// <summary>
    /// Controller class for T_Prescriptions
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TPrescriptionController
    {
        // Preload our schema..
        TPrescription thisSchemaLoad = new TPrescription();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TPrescriptionCollection FetchAll()
        {
            TPrescriptionCollection coll = new TPrescriptionCollection();
            Query qry = new Query(TPrescription.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TPrescriptionCollection FetchByID(object PresId)
        {
            TPrescriptionCollection coll = new TPrescriptionCollection().Where("Pres_ID", PresId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TPrescriptionCollection FetchByQuery(Query qry)
        {
            TPrescriptionCollection coll = new TPrescriptionCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object PresId)
        {
            return (TPrescription.Delete(PresId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object PresId)
        {
            return (TPrescription.Destroy(PresId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int? TreatId,int? PatientDeptId,int? ReplacePresId,long? ExamId,short? StockId,long? PatientId,string PatientCode,DateTime PresDate,short? AssignId,byte Status,byte PaymentStatus,DateTime? PaymentDate,string CreatedBy,DateTime CreatedDate,string Modifiedby,DateTime? ModifiedDate,string SDesc,string PresName,string PresCode,short? Signer,DateTime? SignedDate,byte? PreHos,byte? PresType,short? DepartmentId,short? RoomId,short? BedId,byte? PresStatus,string KieuDonthuoc,string LoiDanBsy,string TaiKham,DateTime? NgayTaiKham,string MaKhoaThien,byte? KeDonTquay,DateTime? NgayPhatThuoc,string NguoiPhatThuoc,int? IdChot,DateTime? NgayChot)
	    {
		    TPrescription item = new TPrescription();
		    
            item.TreatId = TreatId;
            
            item.PatientDeptId = PatientDeptId;
            
            item.ReplacePresId = ReplacePresId;
            
            item.ExamId = ExamId;
            
            item.StockId = StockId;
            
            item.PatientId = PatientId;
            
            item.PatientCode = PatientCode;
            
            item.PresDate = PresDate;
            
            item.AssignId = AssignId;
            
            item.Status = Status;
            
            item.PaymentStatus = PaymentStatus;
            
            item.PaymentDate = PaymentDate;
            
            item.CreatedBy = CreatedBy;
            
            item.CreatedDate = CreatedDate;
            
            item.Modifiedby = Modifiedby;
            
            item.ModifiedDate = ModifiedDate;
            
            item.SDesc = SDesc;
            
            item.PresName = PresName;
            
            item.PresCode = PresCode;
            
            item.Signer = Signer;
            
            item.SignedDate = SignedDate;
            
            item.PreHos = PreHos;
            
            item.PresType = PresType;
            
            item.DepartmentId = DepartmentId;
            
            item.RoomId = RoomId;
            
            item.BedId = BedId;
            
            item.PresStatus = PresStatus;
            
            item.KieuDonthuoc = KieuDonthuoc;
            
            item.LoiDanBsy = LoiDanBsy;
            
            item.TaiKham = TaiKham;
            
            item.NgayTaiKham = NgayTaiKham;
            
            item.MaKhoaThien = MaKhoaThien;
            
            item.KeDonTquay = KeDonTquay;
            
            item.NgayPhatThuoc = NgayPhatThuoc;
            
            item.NguoiPhatThuoc = NguoiPhatThuoc;
            
            item.IdChot = IdChot;
            
            item.NgayChot = NgayChot;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int PresId,int? TreatId,int? PatientDeptId,int? ReplacePresId,long? ExamId,short? StockId,long? PatientId,string PatientCode,DateTime PresDate,short? AssignId,byte Status,byte PaymentStatus,DateTime? PaymentDate,string CreatedBy,DateTime CreatedDate,string Modifiedby,DateTime? ModifiedDate,string SDesc,string PresName,string PresCode,short? Signer,DateTime? SignedDate,byte? PreHos,byte? PresType,short? DepartmentId,short? RoomId,short? BedId,byte? PresStatus,string KieuDonthuoc,string LoiDanBsy,string TaiKham,DateTime? NgayTaiKham,string MaKhoaThien,byte? KeDonTquay,DateTime? NgayPhatThuoc,string NguoiPhatThuoc,int? IdChot,DateTime? NgayChot)
	    {
		    TPrescription item = new TPrescription();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.PresId = PresId;
				
			item.TreatId = TreatId;
				
			item.PatientDeptId = PatientDeptId;
				
			item.ReplacePresId = ReplacePresId;
				
			item.ExamId = ExamId;
				
			item.StockId = StockId;
				
			item.PatientId = PatientId;
				
			item.PatientCode = PatientCode;
				
			item.PresDate = PresDate;
				
			item.AssignId = AssignId;
				
			item.Status = Status;
				
			item.PaymentStatus = PaymentStatus;
				
			item.PaymentDate = PaymentDate;
				
			item.CreatedBy = CreatedBy;
				
			item.CreatedDate = CreatedDate;
				
			item.Modifiedby = Modifiedby;
				
			item.ModifiedDate = ModifiedDate;
				
			item.SDesc = SDesc;
				
			item.PresName = PresName;
				
			item.PresCode = PresCode;
				
			item.Signer = Signer;
				
			item.SignedDate = SignedDate;
				
			item.PreHos = PreHos;
				
			item.PresType = PresType;
				
			item.DepartmentId = DepartmentId;
				
			item.RoomId = RoomId;
				
			item.BedId = BedId;
				
			item.PresStatus = PresStatus;
				
			item.KieuDonthuoc = KieuDonthuoc;
				
			item.LoiDanBsy = LoiDanBsy;
				
			item.TaiKham = TaiKham;
				
			item.NgayTaiKham = NgayTaiKham;
				
			item.MaKhoaThien = MaKhoaThien;
				
			item.KeDonTquay = KeDonTquay;
				
			item.NgayPhatThuoc = NgayPhatThuoc;
				
			item.NguoiPhatThuoc = NguoiPhatThuoc;
				
			item.IdChot = IdChot;
				
			item.NgayChot = NgayChot;
				
	        item.Save(UserName);
	    }
    }
}
