using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LHoadonLog class.
	/// </summary>
    [Serializable]
	public partial class LHoadonLogCollection : ActiveList<LHoadonLog, LHoadonLogCollection>
	{	   
		public LHoadonLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LHoadonLogCollection</returns>
		public LHoadonLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LHoadonLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_HOADON_LOG table.
	/// </summary>
	[Serializable]
	public partial class LHoadonLog : ActiveRecord<LHoadonLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LHoadonLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LHoadonLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LHoadonLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LHoadonLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_HOADON_LOG", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarHdonLogId = new TableSchema.TableColumn(schema);
				colvarHdonLogId.ColumnName = "HDON_LOG_ID";
				colvarHdonLogId.DataType = DbType.Decimal;
				colvarHdonLogId.MaxLength = 0;
				colvarHdonLogId.AutoIncrement = true;
				colvarHdonLogId.IsNullable = false;
				colvarHdonLogId.IsPrimaryKey = true;
				colvarHdonLogId.IsForeignKey = false;
				colvarHdonLogId.IsReadOnly = false;
				colvarHdonLogId.DefaultSetting = @"";
				colvarHdonLogId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHdonLogId);
				
				TableSchema.TableColumn colvarCapphatId = new TableSchema.TableColumn(schema);
				colvarCapphatId.ColumnName = "CAPPHAT_ID";
				colvarCapphatId.DataType = DbType.Decimal;
				colvarCapphatId.MaxLength = 0;
				colvarCapphatId.AutoIncrement = false;
				colvarCapphatId.IsNullable = false;
				colvarCapphatId.IsPrimaryKey = false;
				colvarCapphatId.IsForeignKey = false;
				colvarCapphatId.IsReadOnly = false;
				colvarCapphatId.DefaultSetting = @"";
				colvarCapphatId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCapphatId);
				
				TableSchema.TableColumn colvarPaymentId = new TableSchema.TableColumn(schema);
				colvarPaymentId.ColumnName = "PAYMENT_ID";
				colvarPaymentId.DataType = DbType.Decimal;
				colvarPaymentId.MaxLength = 0;
				colvarPaymentId.AutoIncrement = false;
				colvarPaymentId.IsNullable = false;
				colvarPaymentId.IsPrimaryKey = false;
				colvarPaymentId.IsForeignKey = false;
				colvarPaymentId.IsReadOnly = false;
				colvarPaymentId.DefaultSetting = @"";
				colvarPaymentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentId);
				
				TableSchema.TableColumn colvarTongTien = new TableSchema.TableColumn(schema);
				colvarTongTien.ColumnName = "TONG_TIEN";
				colvarTongTien.DataType = DbType.Decimal;
				colvarTongTien.MaxLength = 0;
				colvarTongTien.AutoIncrement = false;
				colvarTongTien.IsNullable = false;
				colvarTongTien.IsPrimaryKey = false;
				colvarTongTien.IsForeignKey = false;
				colvarTongTien.IsReadOnly = false;
				colvarTongTien.DefaultSetting = @"";
				colvarTongTien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTongTien);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "PATIENT_ID";
				colvarPatientId.DataType = DbType.Int64;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = false;
				colvarPatientId.IsPrimaryKey = false;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "PATIENT_CODE";
				colvarPatientCode.DataType = DbType.AnsiString;
				colvarPatientCode.MaxLength = 30;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = false;
				colvarPatientCode.IsPrimaryKey = false;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarMauHdon = new TableSchema.TableColumn(schema);
				colvarMauHdon.ColumnName = "MAU_HDON";
				colvarMauHdon.DataType = DbType.String;
				colvarMauHdon.MaxLength = 15;
				colvarMauHdon.AutoIncrement = false;
				colvarMauHdon.IsNullable = false;
				colvarMauHdon.IsPrimaryKey = false;
				colvarMauHdon.IsForeignKey = false;
				colvarMauHdon.IsReadOnly = false;
				colvarMauHdon.DefaultSetting = @"";
				colvarMauHdon.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMauHdon);
				
				TableSchema.TableColumn colvarKiHieu = new TableSchema.TableColumn(schema);
				colvarKiHieu.ColumnName = "KI_HIEU";
				colvarKiHieu.DataType = DbType.String;
				colvarKiHieu.MaxLength = 10;
				colvarKiHieu.AutoIncrement = false;
				colvarKiHieu.IsNullable = false;
				colvarKiHieu.IsPrimaryKey = false;
				colvarKiHieu.IsForeignKey = false;
				colvarKiHieu.IsReadOnly = false;
				colvarKiHieu.DefaultSetting = @"";
				colvarKiHieu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKiHieu);
				
				TableSchema.TableColumn colvarMaQuyen = new TableSchema.TableColumn(schema);
				colvarMaQuyen.ColumnName = "MA_QUYEN";
				colvarMaQuyen.DataType = DbType.String;
				colvarMaQuyen.MaxLength = 15;
				colvarMaQuyen.AutoIncrement = false;
				colvarMaQuyen.IsNullable = false;
				colvarMaQuyen.IsPrimaryKey = false;
				colvarMaQuyen.IsForeignKey = false;
				colvarMaQuyen.IsReadOnly = false;
				colvarMaQuyen.DefaultSetting = @"";
				colvarMaQuyen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaQuyen);
				
				TableSchema.TableColumn colvarSerie = new TableSchema.TableColumn(schema);
				colvarSerie.ColumnName = "SERIE";
				colvarSerie.DataType = DbType.String;
				colvarSerie.MaxLength = 10;
				colvarSerie.AutoIncrement = false;
				colvarSerie.IsNullable = false;
				colvarSerie.IsPrimaryKey = false;
				colvarSerie.IsForeignKey = false;
				colvarSerie.IsReadOnly = false;
				colvarSerie.DefaultSetting = @"";
				colvarSerie.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSerie);
				
				TableSchema.TableColumn colvarMaNvien = new TableSchema.TableColumn(schema);
				colvarMaNvien.ColumnName = "MA_NVIEN";
				colvarMaNvien.DataType = DbType.String;
				colvarMaNvien.MaxLength = 30;
				colvarMaNvien.AutoIncrement = false;
				colvarMaNvien.IsNullable = false;
				colvarMaNvien.IsPrimaryKey = false;
				colvarMaNvien.IsForeignKey = false;
				colvarMaNvien.IsReadOnly = false;
				colvarMaNvien.DefaultSetting = @"";
				colvarMaNvien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaNvien);
				
				TableSchema.TableColumn colvarMaLdo = new TableSchema.TableColumn(schema);
				colvarMaLdo.ColumnName = "MA_LDO";
				colvarMaLdo.DataType = DbType.String;
				colvarMaLdo.MaxLength = 30;
				colvarMaLdo.AutoIncrement = false;
				colvarMaLdo.IsNullable = true;
				colvarMaLdo.IsPrimaryKey = false;
				colvarMaLdo.IsForeignKey = false;
				colvarMaLdo.IsReadOnly = false;
				colvarMaLdo.DefaultSetting = @"";
				colvarMaLdo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaLdo);
				
				TableSchema.TableColumn colvarNgayIn = new TableSchema.TableColumn(schema);
				colvarNgayIn.ColumnName = "NGAY_IN";
				colvarNgayIn.DataType = DbType.DateTime;
				colvarNgayIn.MaxLength = 0;
				colvarNgayIn.AutoIncrement = false;
				colvarNgayIn.IsNullable = false;
				colvarNgayIn.IsPrimaryKey = false;
				colvarNgayIn.IsForeignKey = false;
				colvarNgayIn.IsReadOnly = false;
				colvarNgayIn.DefaultSetting = @"";
				colvarNgayIn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayIn);
				
				TableSchema.TableColumn colvarIpAddress = new TableSchema.TableColumn(schema);
				colvarIpAddress.ColumnName = "IP_ADDRESS";
				colvarIpAddress.DataType = DbType.AnsiString;
				colvarIpAddress.MaxLength = 15;
				colvarIpAddress.AutoIncrement = false;
				colvarIpAddress.IsNullable = false;
				colvarIpAddress.IsPrimaryKey = false;
				colvarIpAddress.IsForeignKey = false;
				colvarIpAddress.IsReadOnly = false;
				colvarIpAddress.DefaultSetting = @"";
				colvarIpAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpAddress);
				
				TableSchema.TableColumn colvarMacAddress = new TableSchema.TableColumn(schema);
				colvarMacAddress.ColumnName = "MAC_ADDRESS";
				colvarMacAddress.DataType = DbType.AnsiString;
				colvarMacAddress.MaxLength = 15;
				colvarMacAddress.AutoIncrement = false;
				colvarMacAddress.IsNullable = false;
				colvarMacAddress.IsPrimaryKey = false;
				colvarMacAddress.IsForeignKey = false;
				colvarMacAddress.IsReadOnly = false;
				colvarMacAddress.DefaultSetting = @"";
				colvarMacAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMacAddress);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "TRANG_THAI";
				colvarTrangThai.DataType = DbType.Int16;
				colvarTrangThai.MaxLength = 0;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = false;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				colvarTrangThai.DefaultSetting = @"";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_HOADON_LOG",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("HdonLogId")]
		[Bindable(true)]
		public decimal HdonLogId 
		{
			get { return GetColumnValue<decimal>(Columns.HdonLogId); }
			set { SetColumnValue(Columns.HdonLogId, value); }
		}
		  
		[XmlAttribute("CapphatId")]
		[Bindable(true)]
		public decimal CapphatId 
		{
			get { return GetColumnValue<decimal>(Columns.CapphatId); }
			set { SetColumnValue(Columns.CapphatId, value); }
		}
		  
		[XmlAttribute("PaymentId")]
		[Bindable(true)]
		public decimal PaymentId 
		{
			get { return GetColumnValue<decimal>(Columns.PaymentId); }
			set { SetColumnValue(Columns.PaymentId, value); }
		}
		  
		[XmlAttribute("TongTien")]
		[Bindable(true)]
		public decimal TongTien 
		{
			get { return GetColumnValue<decimal>(Columns.TongTien); }
			set { SetColumnValue(Columns.TongTien, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public long PatientId 
		{
			get { return GetColumnValue<long>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("MauHdon")]
		[Bindable(true)]
		public string MauHdon 
		{
			get { return GetColumnValue<string>(Columns.MauHdon); }
			set { SetColumnValue(Columns.MauHdon, value); }
		}
		  
		[XmlAttribute("KiHieu")]
		[Bindable(true)]
		public string KiHieu 
		{
			get { return GetColumnValue<string>(Columns.KiHieu); }
			set { SetColumnValue(Columns.KiHieu, value); }
		}
		  
		[XmlAttribute("MaQuyen")]
		[Bindable(true)]
		public string MaQuyen 
		{
			get { return GetColumnValue<string>(Columns.MaQuyen); }
			set { SetColumnValue(Columns.MaQuyen, value); }
		}
		  
		[XmlAttribute("Serie")]
		[Bindable(true)]
		public string Serie 
		{
			get { return GetColumnValue<string>(Columns.Serie); }
			set { SetColumnValue(Columns.Serie, value); }
		}
		  
		[XmlAttribute("MaNvien")]
		[Bindable(true)]
		public string MaNvien 
		{
			get { return GetColumnValue<string>(Columns.MaNvien); }
			set { SetColumnValue(Columns.MaNvien, value); }
		}
		  
		[XmlAttribute("MaLdo")]
		[Bindable(true)]
		public string MaLdo 
		{
			get { return GetColumnValue<string>(Columns.MaLdo); }
			set { SetColumnValue(Columns.MaLdo, value); }
		}
		  
		[XmlAttribute("NgayIn")]
		[Bindable(true)]
		public DateTime NgayIn 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayIn); }
			set { SetColumnValue(Columns.NgayIn, value); }
		}
		  
		[XmlAttribute("IpAddress")]
		[Bindable(true)]
		public string IpAddress 
		{
			get { return GetColumnValue<string>(Columns.IpAddress); }
			set { SetColumnValue(Columns.IpAddress, value); }
		}
		  
		[XmlAttribute("MacAddress")]
		[Bindable(true)]
		public string MacAddress 
		{
			get { return GetColumnValue<string>(Columns.MacAddress); }
			set { SetColumnValue(Columns.MacAddress, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public short TrangThai 
		{
			get { return GetColumnValue<short>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal varCapphatId,decimal varPaymentId,decimal varTongTien,long varPatientId,string varPatientCode,string varMauHdon,string varKiHieu,string varMaQuyen,string varSerie,string varMaNvien,string varMaLdo,DateTime varNgayIn,string varIpAddress,string varMacAddress,short varTrangThai)
		{
			LHoadonLog item = new LHoadonLog();
			
			item.CapphatId = varCapphatId;
			
			item.PaymentId = varPaymentId;
			
			item.TongTien = varTongTien;
			
			item.PatientId = varPatientId;
			
			item.PatientCode = varPatientCode;
			
			item.MauHdon = varMauHdon;
			
			item.KiHieu = varKiHieu;
			
			item.MaQuyen = varMaQuyen;
			
			item.Serie = varSerie;
			
			item.MaNvien = varMaNvien;
			
			item.MaLdo = varMaLdo;
			
			item.NgayIn = varNgayIn;
			
			item.IpAddress = varIpAddress;
			
			item.MacAddress = varMacAddress;
			
			item.TrangThai = varTrangThai;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(decimal varHdonLogId,decimal varCapphatId,decimal varPaymentId,decimal varTongTien,long varPatientId,string varPatientCode,string varMauHdon,string varKiHieu,string varMaQuyen,string varSerie,string varMaNvien,string varMaLdo,DateTime varNgayIn,string varIpAddress,string varMacAddress,short varTrangThai)
		{
			LHoadonLog item = new LHoadonLog();
			
				item.HdonLogId = varHdonLogId;
			
				item.CapphatId = varCapphatId;
			
				item.PaymentId = varPaymentId;
			
				item.TongTien = varTongTien;
			
				item.PatientId = varPatientId;
			
				item.PatientCode = varPatientCode;
			
				item.MauHdon = varMauHdon;
			
				item.KiHieu = varKiHieu;
			
				item.MaQuyen = varMaQuyen;
			
				item.Serie = varSerie;
			
				item.MaNvien = varMaNvien;
			
				item.MaLdo = varMaLdo;
			
				item.NgayIn = varNgayIn;
			
				item.IpAddress = varIpAddress;
			
				item.MacAddress = varMacAddress;
			
				item.TrangThai = varTrangThai;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn HdonLogIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CapphatIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TongTienColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn MauHdonColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn KiHieuColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn MaQuyenColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SerieColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn MaNvienColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn MaLdoColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayInColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn IpAddressColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn MacAddressColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string HdonLogId = @"HDON_LOG_ID";
			 public static string CapphatId = @"CAPPHAT_ID";
			 public static string PaymentId = @"PAYMENT_ID";
			 public static string TongTien = @"TONG_TIEN";
			 public static string PatientId = @"PATIENT_ID";
			 public static string PatientCode = @"PATIENT_CODE";
			 public static string MauHdon = @"MAU_HDON";
			 public static string KiHieu = @"KI_HIEU";
			 public static string MaQuyen = @"MA_QUYEN";
			 public static string Serie = @"SERIE";
			 public static string MaNvien = @"MA_NVIEN";
			 public static string MaLdo = @"MA_LDO";
			 public static string NgayIn = @"NGAY_IN";
			 public static string IpAddress = @"IP_ADDRESS";
			 public static string MacAddress = @"MAC_ADDRESS";
			 public static string TrangThai = @"TRANG_THAI";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
