using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TExamFull class.
	/// </summary>
    [Serializable]
	public partial class TExamFullCollection : ActiveList<TExamFull, TExamFullCollection>
	{	   
		public TExamFullCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TExamFullCollection</returns>
		public TExamFullCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TExamFull o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Exam_Full table.
	/// </summary>
	[Serializable]
	public partial class TExamFull : ActiveRecord<TExamFull>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TExamFull()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TExamFull(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TExamFull(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TExamFull(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Exam_Full", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "Patient_Code";
				colvarPatientCode.DataType = DbType.String;
				colvarPatientCode.MaxLength = 50;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = false;
				colvarPatientCode.IsPrimaryKey = true;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int32;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = false;
				colvarPatientId.IsPrimaryKey = true;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarBloodType = new TableSchema.TableColumn(schema);
				colvarBloodType.ColumnName = "Blood_Type";
				colvarBloodType.DataType = DbType.String;
				colvarBloodType.MaxLength = 5;
				colvarBloodType.AutoIncrement = false;
				colvarBloodType.IsNullable = true;
				colvarBloodType.IsPrimaryKey = false;
				colvarBloodType.IsForeignKey = false;
				colvarBloodType.IsReadOnly = false;
				colvarBloodType.DefaultSetting = @"";
				colvarBloodType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBloodType);
				
				TableSchema.TableColumn colvarBodyTemp = new TableSchema.TableColumn(schema);
				colvarBodyTemp.ColumnName = "Body_Temp";
				colvarBodyTemp.DataType = DbType.String;
				colvarBodyTemp.MaxLength = 10;
				colvarBodyTemp.AutoIncrement = false;
				colvarBodyTemp.IsNullable = true;
				colvarBodyTemp.IsPrimaryKey = false;
				colvarBodyTemp.IsForeignKey = false;
				colvarBodyTemp.IsReadOnly = false;
				colvarBodyTemp.DefaultSetting = @"";
				colvarBodyTemp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBodyTemp);
				
				TableSchema.TableColumn colvarBloodPres = new TableSchema.TableColumn(schema);
				colvarBloodPres.ColumnName = "Blood_Pres";
				colvarBloodPres.DataType = DbType.String;
				colvarBloodPres.MaxLength = 20;
				colvarBloodPres.AutoIncrement = false;
				colvarBloodPres.IsNullable = true;
				colvarBloodPres.IsPrimaryKey = false;
				colvarBloodPres.IsForeignKey = false;
				colvarBloodPres.IsReadOnly = false;
				colvarBloodPres.DefaultSetting = @"";
				colvarBloodPres.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBloodPres);
				
				TableSchema.TableColumn colvarArtery = new TableSchema.TableColumn(schema);
				colvarArtery.ColumnName = "Artery";
				colvarArtery.DataType = DbType.String;
				colvarArtery.MaxLength = 10;
				colvarArtery.AutoIncrement = false;
				colvarArtery.IsNullable = true;
				colvarArtery.IsPrimaryKey = false;
				colvarArtery.IsForeignKey = false;
				colvarArtery.IsReadOnly = false;
				colvarArtery.DefaultSetting = @"";
				colvarArtery.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArtery);
				
				TableSchema.TableColumn colvarBreatheRate = new TableSchema.TableColumn(schema);
				colvarBreatheRate.ColumnName = "Breathe_Rate";
				colvarBreatheRate.DataType = DbType.String;
				colvarBreatheRate.MaxLength = 10;
				colvarBreatheRate.AutoIncrement = false;
				colvarBreatheRate.IsNullable = true;
				colvarBreatheRate.IsPrimaryKey = false;
				colvarBreatheRate.IsForeignKey = false;
				colvarBreatheRate.IsReadOnly = false;
				colvarBreatheRate.DefaultSetting = @"";
				colvarBreatheRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBreatheRate);
				
				TableSchema.TableColumn colvarHeight = new TableSchema.TableColumn(schema);
				colvarHeight.ColumnName = "Height";
				colvarHeight.DataType = DbType.String;
				colvarHeight.MaxLength = 5;
				colvarHeight.AutoIncrement = false;
				colvarHeight.IsNullable = true;
				colvarHeight.IsPrimaryKey = false;
				colvarHeight.IsForeignKey = false;
				colvarHeight.IsReadOnly = false;
				colvarHeight.DefaultSetting = @"";
				colvarHeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHeight);
				
				TableSchema.TableColumn colvarWeight = new TableSchema.TableColumn(schema);
				colvarWeight.ColumnName = "Weight";
				colvarWeight.DataType = DbType.String;
				colvarWeight.MaxLength = 5;
				colvarWeight.AutoIncrement = false;
				colvarWeight.IsNullable = true;
				colvarWeight.IsPrimaryKey = false;
				colvarWeight.IsForeignKey = false;
				colvarWeight.IsReadOnly = false;
				colvarWeight.DefaultSetting = @"";
				colvarWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeight);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 255;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "Created_By";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "Create_Date";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = true;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				
						colvarCreateDate.DefaultSetting = @"(getdate())";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_Exam_Full",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public int PatientId 
		{
			get { return GetColumnValue<int>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("BloodType")]
		[Bindable(true)]
		public string BloodType 
		{
			get { return GetColumnValue<string>(Columns.BloodType); }
			set { SetColumnValue(Columns.BloodType, value); }
		}
		  
		[XmlAttribute("BodyTemp")]
		[Bindable(true)]
		public string BodyTemp 
		{
			get { return GetColumnValue<string>(Columns.BodyTemp); }
			set { SetColumnValue(Columns.BodyTemp, value); }
		}
		  
		[XmlAttribute("BloodPres")]
		[Bindable(true)]
		public string BloodPres 
		{
			get { return GetColumnValue<string>(Columns.BloodPres); }
			set { SetColumnValue(Columns.BloodPres, value); }
		}
		  
		[XmlAttribute("Artery")]
		[Bindable(true)]
		public string Artery 
		{
			get { return GetColumnValue<string>(Columns.Artery); }
			set { SetColumnValue(Columns.Artery, value); }
		}
		  
		[XmlAttribute("BreatheRate")]
		[Bindable(true)]
		public string BreatheRate 
		{
			get { return GetColumnValue<string>(Columns.BreatheRate); }
			set { SetColumnValue(Columns.BreatheRate, value); }
		}
		  
		[XmlAttribute("Height")]
		[Bindable(true)]
		public string Height 
		{
			get { return GetColumnValue<string>(Columns.Height); }
			set { SetColumnValue(Columns.Height, value); }
		}
		  
		[XmlAttribute("Weight")]
		[Bindable(true)]
		public string Weight 
		{
			get { return GetColumnValue<string>(Columns.Weight); }
			set { SetColumnValue(Columns.Weight, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime? CreateDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedDate")]
		[Bindable(true)]
		public DateTime? ModifiedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set { SetColumnValue(Columns.ModifiedDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varPatientCode,int varPatientId,string varBloodType,string varBodyTemp,string varBloodPres,string varArtery,string varBreatheRate,string varHeight,string varWeight,string varSDesc,string varCreatedBy,DateTime? varCreateDate,string varModifiedBy,DateTime? varModifiedDate)
		{
			TExamFull item = new TExamFull();
			
			item.PatientCode = varPatientCode;
			
			item.PatientId = varPatientId;
			
			item.BloodType = varBloodType;
			
			item.BodyTemp = varBodyTemp;
			
			item.BloodPres = varBloodPres;
			
			item.Artery = varArtery;
			
			item.BreatheRate = varBreatheRate;
			
			item.Height = varHeight;
			
			item.Weight = varWeight;
			
			item.SDesc = varSDesc;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreateDate = varCreateDate;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedDate = varModifiedDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varPatientCode,int varPatientId,string varBloodType,string varBodyTemp,string varBloodPres,string varArtery,string varBreatheRate,string varHeight,string varWeight,string varSDesc,string varCreatedBy,DateTime? varCreateDate,string varModifiedBy,DateTime? varModifiedDate)
		{
			TExamFull item = new TExamFull();
			
				item.PatientCode = varPatientCode;
			
				item.PatientId = varPatientId;
			
				item.BloodType = varBloodType;
			
				item.BodyTemp = varBodyTemp;
			
				item.BloodPres = varBloodPres;
			
				item.Artery = varArtery;
			
				item.BreatheRate = varBreatheRate;
			
				item.Height = varHeight;
			
				item.Weight = varWeight;
			
				item.SDesc = varSDesc;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreateDate = varCreateDate;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedDate = varModifiedDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn BloodTypeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn BodyTempColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn BloodPresColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ArteryColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn BreatheRateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn HeightColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn WeightColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedDateColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PatientCode = @"Patient_Code";
			 public static string PatientId = @"Patient_ID";
			 public static string BloodType = @"Blood_Type";
			 public static string BodyTemp = @"Body_Temp";
			 public static string BloodPres = @"Blood_Pres";
			 public static string Artery = @"Artery";
			 public static string BreatheRate = @"Breathe_Rate";
			 public static string Height = @"Height";
			 public static string Weight = @"Weight";
			 public static string SDesc = @"sDesc";
			 public static string CreatedBy = @"Created_By";
			 public static string CreateDate = @"Create_Date";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedDate = @"ModifiedDate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
