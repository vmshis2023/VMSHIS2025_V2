using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TExamOther class.
	/// </summary>
    [Serializable]
	public partial class TExamOtherCollection : ActiveList<TExamOther, TExamOtherCollection>
	{	   
		public TExamOtherCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TExamOtherCollection</returns>
		public TExamOtherCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TExamOther o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Exam_Other table.
	/// </summary>
	[Serializable]
	public partial class TExamOther : ActiveRecord<TExamOther>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TExamOther()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TExamOther(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TExamOther(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TExamOther(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Exam_Other", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarExamId = new TableSchema.TableColumn(schema);
				colvarExamId.ColumnName = "Exam_ID";
				colvarExamId.DataType = DbType.Int64;
				colvarExamId.MaxLength = 0;
				colvarExamId.AutoIncrement = false;
				colvarExamId.IsNullable = false;
				colvarExamId.IsPrimaryKey = true;
				colvarExamId.IsForeignKey = false;
				colvarExamId.IsReadOnly = false;
				colvarExamId.DefaultSetting = @"";
				colvarExamId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExamId);
				
				TableSchema.TableColumn colvarAllergy = new TableSchema.TableColumn(schema);
				colvarAllergy.ColumnName = "Allergy";
				colvarAllergy.DataType = DbType.Byte;
				colvarAllergy.MaxLength = 0;
				colvarAllergy.AutoIncrement = false;
				colvarAllergy.IsNullable = true;
				colvarAllergy.IsPrimaryKey = false;
				colvarAllergy.IsForeignKey = false;
				colvarAllergy.IsReadOnly = false;
				
						colvarAllergy.DefaultSetting = @"((0))";
				colvarAllergy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllergy);
				
				TableSchema.TableColumn colvarAllericDay = new TableSchema.TableColumn(schema);
				colvarAllericDay.ColumnName = "Alleric_Day";
				colvarAllericDay.DataType = DbType.Int16;
				colvarAllericDay.MaxLength = 0;
				colvarAllericDay.AutoIncrement = false;
				colvarAllericDay.IsNullable = true;
				colvarAllericDay.IsPrimaryKey = false;
				colvarAllericDay.IsForeignKey = false;
				colvarAllericDay.IsReadOnly = false;
				colvarAllericDay.DefaultSetting = @"";
				colvarAllericDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllericDay);
				
				TableSchema.TableColumn colvarDrugInfo = new TableSchema.TableColumn(schema);
				colvarDrugInfo.ColumnName = "Drug_Info";
				colvarDrugInfo.DataType = DbType.Byte;
				colvarDrugInfo.MaxLength = 0;
				colvarDrugInfo.AutoIncrement = false;
				colvarDrugInfo.IsNullable = true;
				colvarDrugInfo.IsPrimaryKey = false;
				colvarDrugInfo.IsForeignKey = false;
				colvarDrugInfo.IsReadOnly = false;
				
						colvarDrugInfo.DefaultSetting = @"((0))";
				colvarDrugInfo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDrugInfo);
				
				TableSchema.TableColumn colvarDrugDay = new TableSchema.TableColumn(schema);
				colvarDrugDay.ColumnName = "Drug_Day";
				colvarDrugDay.DataType = DbType.Int16;
				colvarDrugDay.MaxLength = 0;
				colvarDrugDay.AutoIncrement = false;
				colvarDrugDay.IsNullable = true;
				colvarDrugDay.IsPrimaryKey = false;
				colvarDrugDay.IsForeignKey = false;
				colvarDrugDay.IsReadOnly = false;
				colvarDrugDay.DefaultSetting = @"";
				colvarDrugDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDrugDay);
				
				TableSchema.TableColumn colvarWineInfo = new TableSchema.TableColumn(schema);
				colvarWineInfo.ColumnName = "Wine_Info";
				colvarWineInfo.DataType = DbType.Byte;
				colvarWineInfo.MaxLength = 0;
				colvarWineInfo.AutoIncrement = false;
				colvarWineInfo.IsNullable = true;
				colvarWineInfo.IsPrimaryKey = false;
				colvarWineInfo.IsForeignKey = false;
				colvarWineInfo.IsReadOnly = false;
				
						colvarWineInfo.DefaultSetting = @"((0))";
				colvarWineInfo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWineInfo);
				
				TableSchema.TableColumn colvarWineDay = new TableSchema.TableColumn(schema);
				colvarWineDay.ColumnName = "Wine_Day";
				colvarWineDay.DataType = DbType.Int16;
				colvarWineDay.MaxLength = 0;
				colvarWineDay.AutoIncrement = false;
				colvarWineDay.IsNullable = true;
				colvarWineDay.IsPrimaryKey = false;
				colvarWineDay.IsForeignKey = false;
				colvarWineDay.IsReadOnly = false;
				colvarWineDay.DefaultSetting = @"";
				colvarWineDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWineDay);
				
				TableSchema.TableColumn colvarTobaccoInfo = new TableSchema.TableColumn(schema);
				colvarTobaccoInfo.ColumnName = "Tobacco_info";
				colvarTobaccoInfo.DataType = DbType.Byte;
				colvarTobaccoInfo.MaxLength = 0;
				colvarTobaccoInfo.AutoIncrement = false;
				colvarTobaccoInfo.IsNullable = true;
				colvarTobaccoInfo.IsPrimaryKey = false;
				colvarTobaccoInfo.IsForeignKey = false;
				colvarTobaccoInfo.IsReadOnly = false;
				colvarTobaccoInfo.DefaultSetting = @"";
				colvarTobaccoInfo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTobaccoInfo);
				
				TableSchema.TableColumn colvarTobaccoDay = new TableSchema.TableColumn(schema);
				colvarTobaccoDay.ColumnName = "Tobacco_Day";
				colvarTobaccoDay.DataType = DbType.Int16;
				colvarTobaccoDay.MaxLength = 0;
				colvarTobaccoDay.AutoIncrement = false;
				colvarTobaccoDay.IsNullable = true;
				colvarTobaccoDay.IsPrimaryKey = false;
				colvarTobaccoDay.IsForeignKey = false;
				colvarTobaccoDay.IsReadOnly = false;
				colvarTobaccoDay.DefaultSetting = @"";
				colvarTobaccoDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTobaccoDay);
				
				TableSchema.TableColumn colvarPipeInfo = new TableSchema.TableColumn(schema);
				colvarPipeInfo.ColumnName = "Pipe_Info";
				colvarPipeInfo.DataType = DbType.Byte;
				colvarPipeInfo.MaxLength = 0;
				colvarPipeInfo.AutoIncrement = false;
				colvarPipeInfo.IsNullable = true;
				colvarPipeInfo.IsPrimaryKey = false;
				colvarPipeInfo.IsForeignKey = false;
				colvarPipeInfo.IsReadOnly = false;
				colvarPipeInfo.DefaultSetting = @"";
				colvarPipeInfo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPipeInfo);
				
				TableSchema.TableColumn colvarPipeTobaDay = new TableSchema.TableColumn(schema);
				colvarPipeTobaDay.ColumnName = "PipeToba_Day";
				colvarPipeTobaDay.DataType = DbType.Int16;
				colvarPipeTobaDay.MaxLength = 0;
				colvarPipeTobaDay.AutoIncrement = false;
				colvarPipeTobaDay.IsNullable = true;
				colvarPipeTobaDay.IsPrimaryKey = false;
				colvarPipeTobaDay.IsForeignKey = false;
				colvarPipeTobaDay.IsReadOnly = false;
				colvarPipeTobaDay.DefaultSetting = @"";
				colvarPipeTobaDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPipeTobaDay);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "Created_by";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "Create_Date";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = true;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				colvarCreateDate.DefaultSetting = @"";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_Exam_Other",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ExamId")]
		[Bindable(true)]
		public long ExamId 
		{
			get { return GetColumnValue<long>(Columns.ExamId); }
			set { SetColumnValue(Columns.ExamId, value); }
		}
		  
		[XmlAttribute("Allergy")]
		[Bindable(true)]
		public byte? Allergy 
		{
			get { return GetColumnValue<byte?>(Columns.Allergy); }
			set { SetColumnValue(Columns.Allergy, value); }
		}
		  
		[XmlAttribute("AllericDay")]
		[Bindable(true)]
		public short? AllericDay 
		{
			get { return GetColumnValue<short?>(Columns.AllericDay); }
			set { SetColumnValue(Columns.AllericDay, value); }
		}
		  
		[XmlAttribute("DrugInfo")]
		[Bindable(true)]
		public byte? DrugInfo 
		{
			get { return GetColumnValue<byte?>(Columns.DrugInfo); }
			set { SetColumnValue(Columns.DrugInfo, value); }
		}
		  
		[XmlAttribute("DrugDay")]
		[Bindable(true)]
		public short? DrugDay 
		{
			get { return GetColumnValue<short?>(Columns.DrugDay); }
			set { SetColumnValue(Columns.DrugDay, value); }
		}
		  
		[XmlAttribute("WineInfo")]
		[Bindable(true)]
		public byte? WineInfo 
		{
			get { return GetColumnValue<byte?>(Columns.WineInfo); }
			set { SetColumnValue(Columns.WineInfo, value); }
		}
		  
		[XmlAttribute("WineDay")]
		[Bindable(true)]
		public short? WineDay 
		{
			get { return GetColumnValue<short?>(Columns.WineDay); }
			set { SetColumnValue(Columns.WineDay, value); }
		}
		  
		[XmlAttribute("TobaccoInfo")]
		[Bindable(true)]
		public byte? TobaccoInfo 
		{
			get { return GetColumnValue<byte?>(Columns.TobaccoInfo); }
			set { SetColumnValue(Columns.TobaccoInfo, value); }
		}
		  
		[XmlAttribute("TobaccoDay")]
		[Bindable(true)]
		public short? TobaccoDay 
		{
			get { return GetColumnValue<short?>(Columns.TobaccoDay); }
			set { SetColumnValue(Columns.TobaccoDay, value); }
		}
		  
		[XmlAttribute("PipeInfo")]
		[Bindable(true)]
		public byte? PipeInfo 
		{
			get { return GetColumnValue<byte?>(Columns.PipeInfo); }
			set { SetColumnValue(Columns.PipeInfo, value); }
		}
		  
		[XmlAttribute("PipeTobaDay")]
		[Bindable(true)]
		public short? PipeTobaDay 
		{
			get { return GetColumnValue<short?>(Columns.PipeTobaDay); }
			set { SetColumnValue(Columns.PipeTobaDay, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime? CreateDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedDate")]
		[Bindable(true)]
		public DateTime? ModifiedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set { SetColumnValue(Columns.ModifiedDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varExamId,byte? varAllergy,short? varAllericDay,byte? varDrugInfo,short? varDrugDay,byte? varWineInfo,short? varWineDay,byte? varTobaccoInfo,short? varTobaccoDay,byte? varPipeInfo,short? varPipeTobaDay,string varCreatedBy,DateTime? varCreateDate,string varModifiedBy,DateTime? varModifiedDate)
		{
			TExamOther item = new TExamOther();
			
			item.ExamId = varExamId;
			
			item.Allergy = varAllergy;
			
			item.AllericDay = varAllericDay;
			
			item.DrugInfo = varDrugInfo;
			
			item.DrugDay = varDrugDay;
			
			item.WineInfo = varWineInfo;
			
			item.WineDay = varWineDay;
			
			item.TobaccoInfo = varTobaccoInfo;
			
			item.TobaccoDay = varTobaccoDay;
			
			item.PipeInfo = varPipeInfo;
			
			item.PipeTobaDay = varPipeTobaDay;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreateDate = varCreateDate;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedDate = varModifiedDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varExamId,byte? varAllergy,short? varAllericDay,byte? varDrugInfo,short? varDrugDay,byte? varWineInfo,short? varWineDay,byte? varTobaccoInfo,short? varTobaccoDay,byte? varPipeInfo,short? varPipeTobaDay,string varCreatedBy,DateTime? varCreateDate,string varModifiedBy,DateTime? varModifiedDate)
		{
			TExamOther item = new TExamOther();
			
				item.ExamId = varExamId;
			
				item.Allergy = varAllergy;
			
				item.AllericDay = varAllericDay;
			
				item.DrugInfo = varDrugInfo;
			
				item.DrugDay = varDrugDay;
			
				item.WineInfo = varWineInfo;
			
				item.WineDay = varWineDay;
			
				item.TobaccoInfo = varTobaccoInfo;
			
				item.TobaccoDay = varTobaccoDay;
			
				item.PipeInfo = varPipeInfo;
			
				item.PipeTobaDay = varPipeTobaDay;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreateDate = varCreateDate;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedDate = varModifiedDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ExamIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn AllergyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn AllericDayColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DrugInfoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DrugDayColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn WineInfoColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn WineDayColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn TobaccoInfoColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn TobaccoDayColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PipeInfoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn PipeTobaDayColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedDateColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ExamId = @"Exam_ID";
			 public static string Allergy = @"Allergy";
			 public static string AllericDay = @"Alleric_Day";
			 public static string DrugInfo = @"Drug_Info";
			 public static string DrugDay = @"Drug_Day";
			 public static string WineInfo = @"Wine_Info";
			 public static string WineDay = @"Wine_Day";
			 public static string TobaccoInfo = @"Tobacco_info";
			 public static string TobaccoDay = @"Tobacco_Day";
			 public static string PipeInfo = @"Pipe_Info";
			 public static string PipeTobaDay = @"PipeToba_Day";
			 public static string CreatedBy = @"Created_by";
			 public static string CreateDate = @"Create_Date";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedDate = @"ModifiedDate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
