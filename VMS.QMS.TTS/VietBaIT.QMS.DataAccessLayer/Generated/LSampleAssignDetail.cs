using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LSampleAssignDetail class.
	/// </summary>
    [Serializable]
	public partial class LSampleAssignDetailCollection : ActiveList<LSampleAssignDetail, LSampleAssignDetailCollection>
	{	   
		public LSampleAssignDetailCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LSampleAssignDetailCollection</returns>
		public LSampleAssignDetailCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LSampleAssignDetail o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_Sample_Assign_Detail table.
	/// </summary>
	[Serializable]
	public partial class LSampleAssignDetail : ActiveRecord<LSampleAssignDetail>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LSampleAssignDetail()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LSampleAssignDetail(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LSampleAssignDetail(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LSampleAssignDetail(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_Sample_Assign_Detail", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarAssignDetailId = new TableSchema.TableColumn(schema);
				colvarAssignDetailId.ColumnName = "AssignDetail_ID";
				colvarAssignDetailId.DataType = DbType.Int64;
				colvarAssignDetailId.MaxLength = 0;
				colvarAssignDetailId.AutoIncrement = true;
				colvarAssignDetailId.IsNullable = false;
				colvarAssignDetailId.IsPrimaryKey = true;
				colvarAssignDetailId.IsForeignKey = false;
				colvarAssignDetailId.IsReadOnly = false;
				colvarAssignDetailId.DefaultSetting = @"";
				colvarAssignDetailId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAssignDetailId);
				
				TableSchema.TableColumn colvarAssignId = new TableSchema.TableColumn(schema);
				colvarAssignId.ColumnName = "Assign_ID";
				colvarAssignId.DataType = DbType.Int32;
				colvarAssignId.MaxLength = 0;
				colvarAssignId.AutoIncrement = false;
				colvarAssignId.IsNullable = true;
				colvarAssignId.IsPrimaryKey = false;
				colvarAssignId.IsForeignKey = false;
				colvarAssignId.IsReadOnly = false;
				colvarAssignId.DefaultSetting = @"";
				colvarAssignId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAssignId);
				
				TableSchema.TableColumn colvarAssignCode = new TableSchema.TableColumn(schema);
				colvarAssignCode.ColumnName = "Assign_Code";
				colvarAssignCode.DataType = DbType.String;
				colvarAssignCode.MaxLength = 100;
				colvarAssignCode.AutoIncrement = false;
				colvarAssignCode.IsNullable = true;
				colvarAssignCode.IsPrimaryKey = false;
				colvarAssignCode.IsForeignKey = false;
				colvarAssignCode.IsReadOnly = false;
				colvarAssignCode.DefaultSetting = @"";
				colvarAssignCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAssignCode);
				
				TableSchema.TableColumn colvarAssignName = new TableSchema.TableColumn(schema);
				colvarAssignName.ColumnName = "Assign_Name";
				colvarAssignName.DataType = DbType.String;
				colvarAssignName.MaxLength = 255;
				colvarAssignName.AutoIncrement = false;
				colvarAssignName.IsNullable = true;
				colvarAssignName.IsPrimaryKey = false;
				colvarAssignName.IsForeignKey = false;
				colvarAssignName.IsReadOnly = false;
				colvarAssignName.DefaultSetting = @"";
				colvarAssignName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAssignName);
				
				TableSchema.TableColumn colvarServiceId = new TableSchema.TableColumn(schema);
				colvarServiceId.ColumnName = "Service_ID";
				colvarServiceId.DataType = DbType.Int16;
				colvarServiceId.MaxLength = 0;
				colvarServiceId.AutoIncrement = false;
				colvarServiceId.IsNullable = true;
				colvarServiceId.IsPrimaryKey = false;
				colvarServiceId.IsForeignKey = false;
				colvarServiceId.IsReadOnly = false;
				
						colvarServiceId.DefaultSetting = @"((0))";
				colvarServiceId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceId);
				
				TableSchema.TableColumn colvarServiceDetailId = new TableSchema.TableColumn(schema);
				colvarServiceDetailId.ColumnName = "ServiceDetail_ID";
				colvarServiceDetailId.DataType = DbType.Int32;
				colvarServiceDetailId.MaxLength = 0;
				colvarServiceDetailId.AutoIncrement = false;
				colvarServiceDetailId.IsNullable = false;
				colvarServiceDetailId.IsPrimaryKey = false;
				colvarServiceDetailId.IsForeignKey = false;
				colvarServiceDetailId.IsReadOnly = false;
				colvarServiceDetailId.DefaultSetting = @"";
				colvarServiceDetailId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceDetailId);
				
				TableSchema.TableColumn colvarOriginPrice = new TableSchema.TableColumn(schema);
				colvarOriginPrice.ColumnName = "Origin_Price";
				colvarOriginPrice.DataType = DbType.Decimal;
				colvarOriginPrice.MaxLength = 0;
				colvarOriginPrice.AutoIncrement = false;
				colvarOriginPrice.IsNullable = false;
				colvarOriginPrice.IsPrimaryKey = false;
				colvarOriginPrice.IsForeignKey = false;
				colvarOriginPrice.IsReadOnly = false;
				colvarOriginPrice.DefaultSetting = @"";
				colvarOriginPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginPrice);
				
				TableSchema.TableColumn colvarDiscountPrice = new TableSchema.TableColumn(schema);
				colvarDiscountPrice.ColumnName = "Discount_Price";
				colvarDiscountPrice.DataType = DbType.Decimal;
				colvarDiscountPrice.MaxLength = 0;
				colvarDiscountPrice.AutoIncrement = false;
				colvarDiscountPrice.IsNullable = true;
				colvarDiscountPrice.IsPrimaryKey = false;
				colvarDiscountPrice.IsForeignKey = false;
				colvarDiscountPrice.IsReadOnly = false;
				colvarDiscountPrice.DefaultSetting = @"";
				colvarDiscountPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiscountPrice);
				
				TableSchema.TableColumn colvarSurchargePrice = new TableSchema.TableColumn(schema);
				colvarSurchargePrice.ColumnName = "Surcharge_Price";
				colvarSurchargePrice.DataType = DbType.Decimal;
				colvarSurchargePrice.MaxLength = 0;
				colvarSurchargePrice.AutoIncrement = false;
				colvarSurchargePrice.IsNullable = true;
				colvarSurchargePrice.IsPrimaryKey = false;
				colvarSurchargePrice.IsForeignKey = false;
				colvarSurchargePrice.IsReadOnly = false;
				colvarSurchargePrice.DefaultSetting = @"";
				colvarSurchargePrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurchargePrice);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "Created_By";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "Created_Date";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				
						colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);
				
				TableSchema.TableColumn colvarModifyDate = new TableSchema.TableColumn(schema);
				colvarModifyDate.ColumnName = "Modify_Date";
				colvarModifyDate.DataType = DbType.DateTime;
				colvarModifyDate.MaxLength = 0;
				colvarModifyDate.AutoIncrement = false;
				colvarModifyDate.IsNullable = true;
				colvarModifyDate.IsPrimaryKey = false;
				colvarModifyDate.IsForeignKey = false;
				colvarModifyDate.IsReadOnly = false;
				colvarModifyDate.DefaultSetting = @"";
				colvarModifyDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifyDate);
				
				TableSchema.TableColumn colvarModifyBy = new TableSchema.TableColumn(schema);
				colvarModifyBy.ColumnName = "Modify_By";
				colvarModifyBy.DataType = DbType.String;
				colvarModifyBy.MaxLength = 50;
				colvarModifyBy.AutoIncrement = false;
				colvarModifyBy.IsNullable = true;
				colvarModifyBy.IsPrimaryKey = false;
				colvarModifyBy.IsForeignKey = false;
				colvarModifyBy.IsReadOnly = false;
				colvarModifyBy.DefaultSetting = @"";
				colvarModifyBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifyBy);
				
				TableSchema.TableColumn colvarKeyCode = new TableSchema.TableColumn(schema);
				colvarKeyCode.ColumnName = "Key_Code";
				colvarKeyCode.DataType = DbType.String;
				colvarKeyCode.MaxLength = 50;
				colvarKeyCode.AutoIncrement = false;
				colvarKeyCode.IsNullable = true;
				colvarKeyCode.IsPrimaryKey = false;
				colvarKeyCode.IsForeignKey = false;
				colvarKeyCode.IsReadOnly = false;
				colvarKeyCode.DefaultSetting = @"";
				colvarKeyCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKeyCode);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_Sample_Assign_Detail",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("AssignDetailId")]
		[Bindable(true)]
		public long AssignDetailId 
		{
			get { return GetColumnValue<long>(Columns.AssignDetailId); }
			set { SetColumnValue(Columns.AssignDetailId, value); }
		}
		  
		[XmlAttribute("AssignId")]
		[Bindable(true)]
		public int? AssignId 
		{
			get { return GetColumnValue<int?>(Columns.AssignId); }
			set { SetColumnValue(Columns.AssignId, value); }
		}
		  
		[XmlAttribute("AssignCode")]
		[Bindable(true)]
		public string AssignCode 
		{
			get { return GetColumnValue<string>(Columns.AssignCode); }
			set { SetColumnValue(Columns.AssignCode, value); }
		}
		  
		[XmlAttribute("AssignName")]
		[Bindable(true)]
		public string AssignName 
		{
			get { return GetColumnValue<string>(Columns.AssignName); }
			set { SetColumnValue(Columns.AssignName, value); }
		}
		  
		[XmlAttribute("ServiceId")]
		[Bindable(true)]
		public short? ServiceId 
		{
			get { return GetColumnValue<short?>(Columns.ServiceId); }
			set { SetColumnValue(Columns.ServiceId, value); }
		}
		  
		[XmlAttribute("ServiceDetailId")]
		[Bindable(true)]
		public int ServiceDetailId 
		{
			get { return GetColumnValue<int>(Columns.ServiceDetailId); }
			set { SetColumnValue(Columns.ServiceDetailId, value); }
		}
		  
		[XmlAttribute("OriginPrice")]
		[Bindable(true)]
		public decimal OriginPrice 
		{
			get { return GetColumnValue<decimal>(Columns.OriginPrice); }
			set { SetColumnValue(Columns.OriginPrice, value); }
		}
		  
		[XmlAttribute("DiscountPrice")]
		[Bindable(true)]
		public decimal? DiscountPrice 
		{
			get { return GetColumnValue<decimal?>(Columns.DiscountPrice); }
			set { SetColumnValue(Columns.DiscountPrice, value); }
		}
		  
		[XmlAttribute("SurchargePrice")]
		[Bindable(true)]
		public decimal? SurchargePrice 
		{
			get { return GetColumnValue<decimal?>(Columns.SurchargePrice); }
			set { SetColumnValue(Columns.SurchargePrice, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedDate")]
		[Bindable(true)]
		public DateTime? CreatedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set { SetColumnValue(Columns.CreatedDate, value); }
		}
		  
		[XmlAttribute("ModifyDate")]
		[Bindable(true)]
		public DateTime? ModifyDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifyDate); }
			set { SetColumnValue(Columns.ModifyDate, value); }
		}
		  
		[XmlAttribute("ModifyBy")]
		[Bindable(true)]
		public string ModifyBy 
		{
			get { return GetColumnValue<string>(Columns.ModifyBy); }
			set { SetColumnValue(Columns.ModifyBy, value); }
		}
		  
		[XmlAttribute("KeyCode")]
		[Bindable(true)]
		public string KeyCode 
		{
			get { return GetColumnValue<string>(Columns.KeyCode); }
			set { SetColumnValue(Columns.KeyCode, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varAssignId,string varAssignCode,string varAssignName,short? varServiceId,int varServiceDetailId,decimal varOriginPrice,decimal? varDiscountPrice,decimal? varSurchargePrice,string varCreatedBy,DateTime? varCreatedDate,DateTime? varModifyDate,string varModifyBy,string varKeyCode)
		{
			LSampleAssignDetail item = new LSampleAssignDetail();
			
			item.AssignId = varAssignId;
			
			item.AssignCode = varAssignCode;
			
			item.AssignName = varAssignName;
			
			item.ServiceId = varServiceId;
			
			item.ServiceDetailId = varServiceDetailId;
			
			item.OriginPrice = varOriginPrice;
			
			item.DiscountPrice = varDiscountPrice;
			
			item.SurchargePrice = varSurchargePrice;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedDate = varCreatedDate;
			
			item.ModifyDate = varModifyDate;
			
			item.ModifyBy = varModifyBy;
			
			item.KeyCode = varKeyCode;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varAssignDetailId,int? varAssignId,string varAssignCode,string varAssignName,short? varServiceId,int varServiceDetailId,decimal varOriginPrice,decimal? varDiscountPrice,decimal? varSurchargePrice,string varCreatedBy,DateTime? varCreatedDate,DateTime? varModifyDate,string varModifyBy,string varKeyCode)
		{
			LSampleAssignDetail item = new LSampleAssignDetail();
			
				item.AssignDetailId = varAssignDetailId;
			
				item.AssignId = varAssignId;
			
				item.AssignCode = varAssignCode;
			
				item.AssignName = varAssignName;
			
				item.ServiceId = varServiceId;
			
				item.ServiceDetailId = varServiceDetailId;
			
				item.OriginPrice = varOriginPrice;
			
				item.DiscountPrice = varDiscountPrice;
			
				item.SurchargePrice = varSurchargePrice;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedDate = varCreatedDate;
			
				item.ModifyDate = varModifyDate;
			
				item.ModifyBy = varModifyBy;
			
				item.KeyCode = varKeyCode;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn AssignDetailIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn AssignIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn AssignCodeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn AssignNameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceDetailIdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginPriceColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DiscountPriceColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SurchargePriceColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedDateColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifyDateColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifyByColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn KeyCodeColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string AssignDetailId = @"AssignDetail_ID";
			 public static string AssignId = @"Assign_ID";
			 public static string AssignCode = @"Assign_Code";
			 public static string AssignName = @"Assign_Name";
			 public static string ServiceId = @"Service_ID";
			 public static string ServiceDetailId = @"ServiceDetail_ID";
			 public static string OriginPrice = @"Origin_Price";
			 public static string DiscountPrice = @"Discount_Price";
			 public static string SurchargePrice = @"Surcharge_Price";
			 public static string CreatedBy = @"Created_By";
			 public static string CreatedDate = @"Created_Date";
			 public static string ModifyDate = @"Modify_Date";
			 public static string ModifyBy = @"Modify_By";
			 public static string KeyCode = @"Key_Code";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
