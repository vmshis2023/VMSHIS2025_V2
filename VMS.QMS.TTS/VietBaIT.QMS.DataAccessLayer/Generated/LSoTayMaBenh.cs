using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LSoTayMaBenh class.
	/// </summary>
    [Serializable]
	public partial class LSoTayMaBenhCollection : ActiveList<LSoTayMaBenh, LSoTayMaBenhCollection>
	{	   
		public LSoTayMaBenhCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LSoTayMaBenhCollection</returns>
		public LSoTayMaBenhCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LSoTayMaBenh o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_SoTay_MaBenh table.
	/// </summary>
	[Serializable]
	public partial class LSoTayMaBenh : ActiveRecord<LSoTayMaBenh>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LSoTayMaBenh()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LSoTayMaBenh(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LSoTayMaBenh(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LSoTayMaBenh(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_SoTay_MaBenh", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdBenh = new TableSchema.TableColumn(schema);
				colvarIdBenh.ColumnName = "ID_Benh";
				colvarIdBenh.DataType = DbType.Int32;
				colvarIdBenh.MaxLength = 0;
				colvarIdBenh.AutoIncrement = false;
				colvarIdBenh.IsNullable = false;
				colvarIdBenh.IsPrimaryKey = true;
				colvarIdBenh.IsForeignKey = false;
				colvarIdBenh.IsReadOnly = false;
				colvarIdBenh.DefaultSetting = @"";
				colvarIdBenh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdBenh);
				
				TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
				colvarUserName.ColumnName = "User_Name";
				colvarUserName.DataType = DbType.String;
				colvarUserName.MaxLength = 20;
				colvarUserName.AutoIncrement = false;
				colvarUserName.IsNullable = false;
				colvarUserName.IsPrimaryKey = true;
				colvarUserName.IsForeignKey = false;
				colvarUserName.IsReadOnly = false;
				colvarUserName.DefaultSetting = @"";
				colvarUserName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserName);
				
				TableSchema.TableColumn colvarMaBenh = new TableSchema.TableColumn(schema);
				colvarMaBenh.ColumnName = "MA_BENH";
				colvarMaBenh.DataType = DbType.String;
				colvarMaBenh.MaxLength = 10;
				colvarMaBenh.AutoIncrement = false;
				colvarMaBenh.IsNullable = true;
				colvarMaBenh.IsPrimaryKey = false;
				colvarMaBenh.IsForeignKey = false;
				colvarMaBenh.IsReadOnly = false;
				colvarMaBenh.DefaultSetting = @"";
				colvarMaBenh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaBenh);
				
				TableSchema.TableColumn colvarChanDoan = new TableSchema.TableColumn(schema);
				colvarChanDoan.ColumnName = "CHAN_DOAN";
				colvarChanDoan.DataType = DbType.String;
				colvarChanDoan.MaxLength = 200;
				colvarChanDoan.AutoIncrement = false;
				colvarChanDoan.IsNullable = true;
				colvarChanDoan.IsPrimaryKey = false;
				colvarChanDoan.IsForeignKey = false;
				colvarChanDoan.IsReadOnly = false;
				colvarChanDoan.DefaultSetting = @"";
				colvarChanDoan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChanDoan);
				
				TableSchema.TableColumn colvarLoai = new TableSchema.TableColumn(schema);
				colvarLoai.ColumnName = "LOAI";
				colvarLoai.DataType = DbType.Byte;
				colvarLoai.MaxLength = 0;
				colvarLoai.AutoIncrement = false;
				colvarLoai.IsNullable = false;
				colvarLoai.IsPrimaryKey = true;
				colvarLoai.IsForeignKey = false;
				colvarLoai.IsReadOnly = false;
				
						colvarLoai.DefaultSetting = @"((0))";
				colvarLoai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoai);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_SoTay_MaBenh",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdBenh")]
		[Bindable(true)]
		public int IdBenh 
		{
			get { return GetColumnValue<int>(Columns.IdBenh); }
			set { SetColumnValue(Columns.IdBenh, value); }
		}
		  
		[XmlAttribute("UserName")]
		[Bindable(true)]
		public string UserName 
		{
			get { return GetColumnValue<string>(Columns.UserName); }
			set { SetColumnValue(Columns.UserName, value); }
		}
		  
		[XmlAttribute("MaBenh")]
		[Bindable(true)]
		public string MaBenh 
		{
			get { return GetColumnValue<string>(Columns.MaBenh); }
			set { SetColumnValue(Columns.MaBenh, value); }
		}
		  
		[XmlAttribute("ChanDoan")]
		[Bindable(true)]
		public string ChanDoan 
		{
			get { return GetColumnValue<string>(Columns.ChanDoan); }
			set { SetColumnValue(Columns.ChanDoan, value); }
		}
		  
		[XmlAttribute("Loai")]
		[Bindable(true)]
		public byte Loai 
		{
			get { return GetColumnValue<byte>(Columns.Loai); }
			set { SetColumnValue(Columns.Loai, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varIdBenh,string varUserName,string varMaBenh,string varChanDoan,byte varLoai)
		{
			LSoTayMaBenh item = new LSoTayMaBenh();
			
			item.IdBenh = varIdBenh;
			
			item.UserName = varUserName;
			
			item.MaBenh = varMaBenh;
			
			item.ChanDoan = varChanDoan;
			
			item.Loai = varLoai;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdBenh,string varUserName,string varMaBenh,string varChanDoan,byte varLoai)
		{
			LSoTayMaBenh item = new LSoTayMaBenh();
			
				item.IdBenh = varIdBenh;
			
				item.UserName = varUserName;
			
				item.MaBenh = varMaBenh;
			
				item.ChanDoan = varChanDoan;
			
				item.Loai = varLoai;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdBenhColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn UserNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MaBenhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ChanDoanColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn LoaiColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdBenh = @"ID_Benh";
			 public static string UserName = @"User_Name";
			 public static string MaBenh = @"MA_BENH";
			 public static string ChanDoan = @"CHAN_DOAN";
			 public static string Loai = @"LOAI";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
