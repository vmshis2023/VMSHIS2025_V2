using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LStock class.
	/// </summary>
    [Serializable]
	public partial class LStockCollection : ActiveList<LStock, LStockCollection>
	{	   
		public LStockCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LStockCollection</returns>
		public LStockCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LStock o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_Stocks table.
	/// </summary>
	[Serializable]
	public partial class LStock : ActiveRecord<LStock>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LStock()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LStock(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LStock(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LStock(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_Stocks", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarStockId = new TableSchema.TableColumn(schema);
				colvarStockId.ColumnName = "Stock_ID";
				colvarStockId.DataType = DbType.Int16;
				colvarStockId.MaxLength = 0;
				colvarStockId.AutoIncrement = true;
				colvarStockId.IsNullable = false;
				colvarStockId.IsPrimaryKey = true;
				colvarStockId.IsForeignKey = false;
				colvarStockId.IsReadOnly = false;
				colvarStockId.DefaultSetting = @"";
				colvarStockId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStockId);
				
				TableSchema.TableColumn colvarStockCode = new TableSchema.TableColumn(schema);
				colvarStockCode.ColumnName = "Stock_Code";
				colvarStockCode.DataType = DbType.String;
				colvarStockCode.MaxLength = 20;
				colvarStockCode.AutoIncrement = false;
				colvarStockCode.IsNullable = false;
				colvarStockCode.IsPrimaryKey = false;
				colvarStockCode.IsForeignKey = false;
				colvarStockCode.IsReadOnly = false;
				
						colvarStockCode.DefaultSetting = @"('')";
				colvarStockCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStockCode);
				
				TableSchema.TableColumn colvarStockName = new TableSchema.TableColumn(schema);
				colvarStockName.ColumnName = "Stock_Name";
				colvarStockName.DataType = DbType.String;
				colvarStockName.MaxLength = 100;
				colvarStockName.AutoIncrement = false;
				colvarStockName.IsNullable = false;
				colvarStockName.IsPrimaryKey = false;
				colvarStockName.IsForeignKey = false;
				colvarStockName.IsReadOnly = false;
				colvarStockName.DefaultSetting = @"";
				colvarStockName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStockName);
				
				TableSchema.TableColumn colvarStockNature = new TableSchema.TableColumn(schema);
				colvarStockNature.ColumnName = "Stock_Nature";
				colvarStockNature.DataType = DbType.Byte;
				colvarStockNature.MaxLength = 0;
				colvarStockNature.AutoIncrement = false;
				colvarStockNature.IsNullable = false;
				colvarStockNature.IsPrimaryKey = false;
				colvarStockNature.IsForeignKey = false;
				colvarStockNature.IsReadOnly = false;
				
						colvarStockNature.DefaultSetting = @"((0))";
				colvarStockNature.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStockNature);
				
				TableSchema.TableColumn colvarStockType = new TableSchema.TableColumn(schema);
				colvarStockType.ColumnName = "Stock_Type";
				colvarStockType.DataType = DbType.Byte;
				colvarStockType.MaxLength = 0;
				colvarStockType.AutoIncrement = false;
				colvarStockType.IsNullable = false;
				colvarStockType.IsPrimaryKey = false;
				colvarStockType.IsForeignKey = false;
				colvarStockType.IsReadOnly = false;
				colvarStockType.DefaultSetting = @"";
				colvarStockType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStockType);
				
				TableSchema.TableColumn colvarDepartmentId = new TableSchema.TableColumn(schema);
				colvarDepartmentId.ColumnName = "Department_ID";
				colvarDepartmentId.DataType = DbType.Int16;
				colvarDepartmentId.MaxLength = 0;
				colvarDepartmentId.AutoIncrement = false;
				colvarDepartmentId.IsNullable = false;
				colvarDepartmentId.IsPrimaryKey = false;
				colvarDepartmentId.IsForeignKey = false;
				colvarDepartmentId.IsReadOnly = false;
				
						colvarDepartmentId.DefaultSetting = @"((-1))";
				colvarDepartmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentId);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 255;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				TableSchema.TableColumn colvarStockCategory = new TableSchema.TableColumn(schema);
				colvarStockCategory.ColumnName = "Stock_category";
				colvarStockCategory.DataType = DbType.Byte;
				colvarStockCategory.MaxLength = 0;
				colvarStockCategory.AutoIncrement = false;
				colvarStockCategory.IsNullable = true;
				colvarStockCategory.IsPrimaryKey = false;
				colvarStockCategory.IsForeignKey = false;
				colvarStockCategory.IsReadOnly = false;
				
						colvarStockCategory.DefaultSetting = @"((0))";
				colvarStockCategory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStockCategory);
				
				TableSchema.TableColumn colvarIntOrder = new TableSchema.TableColumn(schema);
				colvarIntOrder.ColumnName = "IntOrder";
				colvarIntOrder.DataType = DbType.Int32;
				colvarIntOrder.MaxLength = 0;
				colvarIntOrder.AutoIncrement = false;
				colvarIntOrder.IsNullable = true;
				colvarIntOrder.IsPrimaryKey = false;
				colvarIntOrder.IsForeignKey = false;
				colvarIntOrder.IsReadOnly = false;
				colvarIntOrder.DefaultSetting = @"";
				colvarIntOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIntOrder);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_Stocks",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("StockId")]
		[Bindable(true)]
		public short StockId 
		{
			get { return GetColumnValue<short>(Columns.StockId); }
			set { SetColumnValue(Columns.StockId, value); }
		}
		  
		[XmlAttribute("StockCode")]
		[Bindable(true)]
		public string StockCode 
		{
			get { return GetColumnValue<string>(Columns.StockCode); }
			set { SetColumnValue(Columns.StockCode, value); }
		}
		  
		[XmlAttribute("StockName")]
		[Bindable(true)]
		public string StockName 
		{
			get { return GetColumnValue<string>(Columns.StockName); }
			set { SetColumnValue(Columns.StockName, value); }
		}
		  
		[XmlAttribute("StockNature")]
		[Bindable(true)]
		public byte StockNature 
		{
			get { return GetColumnValue<byte>(Columns.StockNature); }
			set { SetColumnValue(Columns.StockNature, value); }
		}
		  
		[XmlAttribute("StockType")]
		[Bindable(true)]
		public byte StockType 
		{
			get { return GetColumnValue<byte>(Columns.StockType); }
			set { SetColumnValue(Columns.StockType, value); }
		}
		  
		[XmlAttribute("DepartmentId")]
		[Bindable(true)]
		public short DepartmentId 
		{
			get { return GetColumnValue<short>(Columns.DepartmentId); }
			set { SetColumnValue(Columns.DepartmentId, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		  
		[XmlAttribute("StockCategory")]
		[Bindable(true)]
		public byte? StockCategory 
		{
			get { return GetColumnValue<byte?>(Columns.StockCategory); }
			set { SetColumnValue(Columns.StockCategory, value); }
		}
		  
		[XmlAttribute("IntOrder")]
		[Bindable(true)]
		public int? IntOrder 
		{
			get { return GetColumnValue<int?>(Columns.IntOrder); }
			set { SetColumnValue(Columns.IntOrder, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varStockCode,string varStockName,byte varStockNature,byte varStockType,short varDepartmentId,string varSDesc,byte? varStockCategory,int? varIntOrder)
		{
			LStock item = new LStock();
			
			item.StockCode = varStockCode;
			
			item.StockName = varStockName;
			
			item.StockNature = varStockNature;
			
			item.StockType = varStockType;
			
			item.DepartmentId = varDepartmentId;
			
			item.SDesc = varSDesc;
			
			item.StockCategory = varStockCategory;
			
			item.IntOrder = varIntOrder;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(short varStockId,string varStockCode,string varStockName,byte varStockNature,byte varStockType,short varDepartmentId,string varSDesc,byte? varStockCategory,int? varIntOrder)
		{
			LStock item = new LStock();
			
				item.StockId = varStockId;
			
				item.StockCode = varStockCode;
			
				item.StockName = varStockName;
			
				item.StockNature = varStockNature;
			
				item.StockType = varStockType;
			
				item.DepartmentId = varDepartmentId;
			
				item.SDesc = varSDesc;
			
				item.StockCategory = varStockCategory;
			
				item.IntOrder = varIntOrder;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn StockIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn StockCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn StockNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn StockNatureColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn StockTypeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn StockCategoryColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IntOrderColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string StockId = @"Stock_ID";
			 public static string StockCode = @"Stock_Code";
			 public static string StockName = @"Stock_Name";
			 public static string StockNature = @"Stock_Nature";
			 public static string StockType = @"Stock_Type";
			 public static string DepartmentId = @"Department_ID";
			 public static string SDesc = @"sDesc";
			 public static string StockCategory = @"Stock_category";
			 public static string IntOrder = @"IntOrder";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
