using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
    /// <summary>
    /// Controller class for L_Object_Type
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class LObjectTypeController
    {
        // Preload our schema..
        LObjectType thisSchemaLoad = new LObjectType();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public LObjectTypeCollection FetchAll()
        {
            LObjectTypeCollection coll = new LObjectTypeCollection();
            Query qry = new Query(LObjectType.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public LObjectTypeCollection FetchByID(object ObjectTypeId)
        {
            LObjectTypeCollection coll = new LObjectTypeCollection().Where("ObjectType_ID", ObjectTypeId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public LObjectTypeCollection FetchByQuery(Query qry)
        {
            LObjectTypeCollection coll = new LObjectTypeCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object ObjectTypeId)
        {
            return (LObjectType.Delete(ObjectTypeId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object ObjectTypeId)
        {
            return (LObjectType.Destroy(ObjectTypeId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string ObjectTypeName,short InsuranceLevel,byte ViewType,short IntOrder,decimal DiscountCorrectLine,decimal? DiscountDiscorrectLine,byte ObjectTypeType,string SDesc,string ObjectTypeCode,string TenDonThuoc,byte? KeTaiQthuoc,byte? ThanhToanKhamTiepDon,byte? ThanhToanClsTiepDon,short? PtramBhytMoi)
	    {
		    LObjectType item = new LObjectType();
		    
            item.ObjectTypeName = ObjectTypeName;
            
            item.InsuranceLevel = InsuranceLevel;
            
            item.ViewType = ViewType;
            
            item.IntOrder = IntOrder;
            
            item.DiscountCorrectLine = DiscountCorrectLine;
            
            item.DiscountDiscorrectLine = DiscountDiscorrectLine;
            
            item.ObjectTypeType = ObjectTypeType;
            
            item.SDesc = SDesc;
            
            item.ObjectTypeCode = ObjectTypeCode;
            
            item.TenDonThuoc = TenDonThuoc;
            
            item.KeTaiQthuoc = KeTaiQthuoc;
            
            item.ThanhToanKhamTiepDon = ThanhToanKhamTiepDon;
            
            item.ThanhToanClsTiepDon = ThanhToanClsTiepDon;
            
            item.PtramBhytMoi = PtramBhytMoi;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(short ObjectTypeId,string ObjectTypeName,short InsuranceLevel,byte ViewType,short IntOrder,decimal DiscountCorrectLine,decimal? DiscountDiscorrectLine,byte ObjectTypeType,string SDesc,string ObjectTypeCode,string TenDonThuoc,byte? KeTaiQthuoc,byte? ThanhToanKhamTiepDon,byte? ThanhToanClsTiepDon,short? PtramBhytMoi)
	    {
		    LObjectType item = new LObjectType();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.ObjectTypeId = ObjectTypeId;
				
			item.ObjectTypeName = ObjectTypeName;
				
			item.InsuranceLevel = InsuranceLevel;
				
			item.ViewType = ViewType;
				
			item.IntOrder = IntOrder;
				
			item.DiscountCorrectLine = DiscountCorrectLine;
				
			item.DiscountDiscorrectLine = DiscountDiscorrectLine;
				
			item.ObjectTypeType = ObjectTypeType;
				
			item.SDesc = SDesc;
				
			item.ObjectTypeCode = ObjectTypeCode;
				
			item.TenDonThuoc = TenDonThuoc;
				
			item.KeTaiQthuoc = KeTaiQthuoc;
				
			item.ThanhToanKhamTiepDon = ThanhToanKhamTiepDon;
				
			item.ThanhToanClsTiepDon = ThanhToanClsTiepDon;
				
			item.PtramBhytMoi = PtramBhytMoi;
				
	        item.Save(UserName);
	    }
    }
}
