using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
    /// <summary>
    /// Controller class for D_PHIEU_CAPPHAT_CT
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class DPhieuCapphatCtController
    {
        // Preload our schema..
        DPhieuCapphatCt thisSchemaLoad = new DPhieuCapphatCt();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public DPhieuCapphatCtCollection FetchAll()
        {
            DPhieuCapphatCtCollection coll = new DPhieuCapphatCtCollection();
            Query qry = new Query(DPhieuCapphatCt.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public DPhieuCapphatCtCollection FetchByID(object IdCapPhatCt)
        {
            DPhieuCapphatCtCollection coll = new DPhieuCapphatCtCollection().Where("ID_CapPhat_CT", IdCapPhatCt).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public DPhieuCapphatCtCollection FetchByQuery(Query qry)
        {
            DPhieuCapphatCtCollection coll = new DPhieuCapphatCtCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object IdCapPhatCt)
        {
            return (DPhieuCapphatCt.Delete(IdCapPhatCt) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object IdCapPhatCt)
        {
            return (DPhieuCapphatCt.Destroy(IdCapPhatCt) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int IdCapphat,int IdDonthuoc,int IdDonthuocCtiet,bool? DaLinh,int SoLuong,int IdThuoc,int? IdDtri)
	    {
		    DPhieuCapphatCt item = new DPhieuCapphatCt();
		    
            item.IdCapphat = IdCapphat;
            
            item.IdDonthuoc = IdDonthuoc;
            
            item.IdDonthuocCtiet = IdDonthuocCtiet;
            
            item.DaLinh = DaLinh;
            
            item.SoLuong = SoLuong;
            
            item.IdThuoc = IdThuoc;
            
            item.IdDtri = IdDtri;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int IdCapPhatCt,int IdCapphat,int IdDonthuoc,int IdDonthuocCtiet,bool? DaLinh,int SoLuong,int IdThuoc,int? IdDtri)
	    {
		    DPhieuCapphatCt item = new DPhieuCapphatCt();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.IdCapPhatCt = IdCapPhatCt;
				
			item.IdCapphat = IdCapphat;
				
			item.IdDonthuoc = IdDonthuoc;
				
			item.IdDonthuocCtiet = IdDonthuocCtiet;
				
			item.DaLinh = DaLinh;
				
			item.SoLuong = SoLuong;
				
			item.IdThuoc = IdThuoc;
				
			item.IdDtri = IdDtri;
				
	        item.Save(UserName);
	    }
    }
}
