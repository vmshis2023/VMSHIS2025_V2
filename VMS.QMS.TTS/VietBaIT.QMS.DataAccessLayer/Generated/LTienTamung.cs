using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LTienTamung class.
	/// </summary>
    [Serializable]
	public partial class LTienTamungCollection : ActiveList<LTienTamung, LTienTamungCollection>
	{	   
		public LTienTamungCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LTienTamungCollection</returns>
		public LTienTamungCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LTienTamung o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_TIEN_TAMUNG table.
	/// </summary>
	[Serializable]
	public partial class LTienTamung : ActiveRecord<LTienTamung>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LTienTamung()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LTienTamung(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LTienTamung(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LTienTamung(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_TIEN_TAMUNG", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMaTamung = new TableSchema.TableColumn(schema);
				colvarMaTamung.ColumnName = "MA_TAMUNG";
				colvarMaTamung.DataType = DbType.String;
				colvarMaTamung.MaxLength = 50;
				colvarMaTamung.AutoIncrement = false;
				colvarMaTamung.IsNullable = false;
				colvarMaTamung.IsPrimaryKey = true;
				colvarMaTamung.IsForeignKey = false;
				colvarMaTamung.IsReadOnly = false;
				colvarMaTamung.DefaultSetting = @"";
				colvarMaTamung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaTamung);
				
				TableSchema.TableColumn colvarTenTamung = new TableSchema.TableColumn(schema);
				colvarTenTamung.ColumnName = "TEN_TAMUNG";
				colvarTenTamung.DataType = DbType.String;
				colvarTenTamung.MaxLength = 50;
				colvarTenTamung.AutoIncrement = false;
				colvarTenTamung.IsNullable = false;
				colvarTenTamung.IsPrimaryKey = false;
				colvarTenTamung.IsForeignKey = false;
				colvarTenTamung.IsReadOnly = false;
				colvarTenTamung.DefaultSetting = @"";
				colvarTenTamung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenTamung);
				
				TableSchema.TableColumn colvarDonGia = new TableSchema.TableColumn(schema);
				colvarDonGia.ColumnName = "DON_GIA";
				colvarDonGia.DataType = DbType.Decimal;
				colvarDonGia.MaxLength = 0;
				colvarDonGia.AutoIncrement = false;
				colvarDonGia.IsNullable = false;
				colvarDonGia.IsPrimaryKey = false;
				colvarDonGia.IsForeignKey = false;
				colvarDonGia.IsReadOnly = false;
				colvarDonGia.DefaultSetting = @"";
				colvarDonGia.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDonGia);
				
				TableSchema.TableColumn colvarStt = new TableSchema.TableColumn(schema);
				colvarStt.ColumnName = "STT";
				colvarStt.DataType = DbType.Int16;
				colvarStt.MaxLength = 0;
				colvarStt.AutoIncrement = false;
				colvarStt.IsNullable = true;
				colvarStt.IsPrimaryKey = false;
				colvarStt.IsForeignKey = false;
				colvarStt.IsReadOnly = false;
				colvarStt.DefaultSetting = @"";
				colvarStt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStt);
				
				TableSchema.TableColumn colvarMoTa = new TableSchema.TableColumn(schema);
				colvarMoTa.ColumnName = "MO_TA";
				colvarMoTa.DataType = DbType.String;
				colvarMoTa.MaxLength = 255;
				colvarMoTa.AutoIncrement = false;
				colvarMoTa.IsNullable = true;
				colvarMoTa.IsPrimaryKey = false;
				colvarMoTa.IsForeignKey = false;
				colvarMoTa.IsReadOnly = false;
				colvarMoTa.DefaultSetting = @"";
				colvarMoTa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoTa);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_TIEN_TAMUNG",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MaTamung")]
		[Bindable(true)]
		public string MaTamung 
		{
			get { return GetColumnValue<string>(Columns.MaTamung); }
			set { SetColumnValue(Columns.MaTamung, value); }
		}
		  
		[XmlAttribute("TenTamung")]
		[Bindable(true)]
		public string TenTamung 
		{
			get { return GetColumnValue<string>(Columns.TenTamung); }
			set { SetColumnValue(Columns.TenTamung, value); }
		}
		  
		[XmlAttribute("DonGia")]
		[Bindable(true)]
		public decimal DonGia 
		{
			get { return GetColumnValue<decimal>(Columns.DonGia); }
			set { SetColumnValue(Columns.DonGia, value); }
		}
		  
		[XmlAttribute("Stt")]
		[Bindable(true)]
		public short? Stt 
		{
			get { return GetColumnValue<short?>(Columns.Stt); }
			set { SetColumnValue(Columns.Stt, value); }
		}
		  
		[XmlAttribute("MoTa")]
		[Bindable(true)]
		public string MoTa 
		{
			get { return GetColumnValue<string>(Columns.MoTa); }
			set { SetColumnValue(Columns.MoTa, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaTamung,string varTenTamung,decimal varDonGia,short? varStt,string varMoTa)
		{
			LTienTamung item = new LTienTamung();
			
			item.MaTamung = varMaTamung;
			
			item.TenTamung = varTenTamung;
			
			item.DonGia = varDonGia;
			
			item.Stt = varStt;
			
			item.MoTa = varMoTa;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varMaTamung,string varTenTamung,decimal varDonGia,short? varStt,string varMoTa)
		{
			LTienTamung item = new LTienTamung();
			
				item.MaTamung = varMaTamung;
			
				item.TenTamung = varTenTamung;
			
				item.DonGia = varDonGia;
			
				item.Stt = varStt;
			
				item.MoTa = varMoTa;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MaTamungColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TenTamungColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DonGiaColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SttColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MoTaColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MaTamung = @"MA_TAMUNG";
			 public static string TenTamung = @"TEN_TAMUNG";
			 public static string DonGia = @"DON_GIA";
			 public static string Stt = @"STT";
			 public static string MoTa = @"MO_TA";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
