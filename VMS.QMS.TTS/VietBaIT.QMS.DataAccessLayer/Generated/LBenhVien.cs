using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LBenhVien class.
	/// </summary>
    [Serializable]
	public partial class LBenhVienCollection : ActiveList<LBenhVien, LBenhVienCollection>
	{	   
		public LBenhVienCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LBenhVienCollection</returns>
		public LBenhVienCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LBenhVien o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_BenhVien table.
	/// </summary>
	[Serializable]
	public partial class LBenhVien : ActiveRecord<LBenhVien>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LBenhVien()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LBenhVien(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LBenhVien(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LBenhVien(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_BenhVien", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdBenhVien = new TableSchema.TableColumn(schema);
				colvarIdBenhVien.ColumnName = "ID_BenhVien";
				colvarIdBenhVien.DataType = DbType.Int32;
				colvarIdBenhVien.MaxLength = 0;
				colvarIdBenhVien.AutoIncrement = true;
				colvarIdBenhVien.IsNullable = false;
				colvarIdBenhVien.IsPrimaryKey = true;
				colvarIdBenhVien.IsForeignKey = false;
				colvarIdBenhVien.IsReadOnly = false;
				colvarIdBenhVien.DefaultSetting = @"";
				colvarIdBenhVien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdBenhVien);
				
				TableSchema.TableColumn colvarMaBenhVien = new TableSchema.TableColumn(schema);
				colvarMaBenhVien.ColumnName = "Ma_BenhVien";
				colvarMaBenhVien.DataType = DbType.String;
				colvarMaBenhVien.MaxLength = 10;
				colvarMaBenhVien.AutoIncrement = false;
				colvarMaBenhVien.IsNullable = false;
				colvarMaBenhVien.IsPrimaryKey = false;
				colvarMaBenhVien.IsForeignKey = false;
				colvarMaBenhVien.IsReadOnly = false;
				colvarMaBenhVien.DefaultSetting = @"";
				colvarMaBenhVien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaBenhVien);
				
				TableSchema.TableColumn colvarTenBenhVien = new TableSchema.TableColumn(schema);
				colvarTenBenhVien.ColumnName = "Ten_BenhVien";
				colvarTenBenhVien.DataType = DbType.String;
				colvarTenBenhVien.MaxLength = 200;
				colvarTenBenhVien.AutoIncrement = false;
				colvarTenBenhVien.IsNullable = false;
				colvarTenBenhVien.IsPrimaryKey = false;
				colvarTenBenhVien.IsForeignKey = false;
				colvarTenBenhVien.IsReadOnly = false;
				colvarTenBenhVien.DefaultSetting = @"";
				colvarTenBenhVien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenBenhVien);
				
				TableSchema.TableColumn colvarMaTinh = new TableSchema.TableColumn(schema);
				colvarMaTinh.ColumnName = "Ma_Tinh";
				colvarMaTinh.DataType = DbType.String;
				colvarMaTinh.MaxLength = 20;
				colvarMaTinh.AutoIncrement = false;
				colvarMaTinh.IsNullable = false;
				colvarMaTinh.IsPrimaryKey = false;
				colvarMaTinh.IsForeignKey = false;
				colvarMaTinh.IsReadOnly = false;
				colvarMaTinh.DefaultSetting = @"";
				colvarMaTinh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaTinh);
				
				TableSchema.TableColumn colvarHienThi = new TableSchema.TableColumn(schema);
				colvarHienThi.ColumnName = "Hien_thi";
				colvarHienThi.DataType = DbType.Byte;
				colvarHienThi.MaxLength = 0;
				colvarHienThi.AutoIncrement = false;
				colvarHienThi.IsNullable = true;
				colvarHienThi.IsPrimaryKey = false;
				colvarHienThi.IsForeignKey = false;
				colvarHienThi.IsReadOnly = false;
				colvarHienThi.DefaultSetting = @"";
				colvarHienThi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHienThi);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_BenhVien",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdBenhVien")]
		[Bindable(true)]
		public int IdBenhVien 
		{
			get { return GetColumnValue<int>(Columns.IdBenhVien); }
			set { SetColumnValue(Columns.IdBenhVien, value); }
		}
		  
		[XmlAttribute("MaBenhVien")]
		[Bindable(true)]
		public string MaBenhVien 
		{
			get { return GetColumnValue<string>(Columns.MaBenhVien); }
			set { SetColumnValue(Columns.MaBenhVien, value); }
		}
		  
		[XmlAttribute("TenBenhVien")]
		[Bindable(true)]
		public string TenBenhVien 
		{
			get { return GetColumnValue<string>(Columns.TenBenhVien); }
			set { SetColumnValue(Columns.TenBenhVien, value); }
		}
		  
		[XmlAttribute("MaTinh")]
		[Bindable(true)]
		public string MaTinh 
		{
			get { return GetColumnValue<string>(Columns.MaTinh); }
			set { SetColumnValue(Columns.MaTinh, value); }
		}
		  
		[XmlAttribute("HienThi")]
		[Bindable(true)]
		public byte? HienThi 
		{
			get { return GetColumnValue<byte?>(Columns.HienThi); }
			set { SetColumnValue(Columns.HienThi, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaBenhVien,string varTenBenhVien,string varMaTinh,byte? varHienThi)
		{
			LBenhVien item = new LBenhVien();
			
			item.MaBenhVien = varMaBenhVien;
			
			item.TenBenhVien = varTenBenhVien;
			
			item.MaTinh = varMaTinh;
			
			item.HienThi = varHienThi;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdBenhVien,string varMaBenhVien,string varTenBenhVien,string varMaTinh,byte? varHienThi)
		{
			LBenhVien item = new LBenhVien();
			
				item.IdBenhVien = varIdBenhVien;
			
				item.MaBenhVien = varMaBenhVien;
			
				item.TenBenhVien = varTenBenhVien;
			
				item.MaTinh = varMaTinh;
			
				item.HienThi = varHienThi;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdBenhVienColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaBenhVienColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenBenhVienColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn MaTinhColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn HienThiColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdBenhVien = @"ID_BenhVien";
			 public static string MaBenhVien = @"Ma_BenhVien";
			 public static string TenBenhVien = @"Ten_BenhVien";
			 public static string MaTinh = @"Ma_Tinh";
			 public static string HienThi = @"Hien_thi";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
