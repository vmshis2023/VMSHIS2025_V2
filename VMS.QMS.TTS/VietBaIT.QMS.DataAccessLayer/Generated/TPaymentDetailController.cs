using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
    /// <summary>
    /// Controller class for T_Payment_Detail
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TPaymentDetailController
    {
        // Preload our schema..
        TPaymentDetail thisSchemaLoad = new TPaymentDetail();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TPaymentDetailCollection FetchAll()
        {
            TPaymentDetailCollection coll = new TPaymentDetailCollection();
            Query qry = new Query(TPaymentDetail.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TPaymentDetailCollection FetchByID(object PaymentDetailId)
        {
            TPaymentDetailCollection coll = new TPaymentDetailCollection().Where("PaymentDetail_ID", PaymentDetailId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TPaymentDetailCollection FetchByQuery(Query qry)
        {
            TPaymentDetailCollection coll = new TPaymentDetailCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object PaymentDetailId)
        {
            return (TPaymentDetail.Delete(PaymentDetailId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object PaymentDetailId)
        {
            return (TPaymentDetail.Destroy(PaymentDetailId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int PaymentId,int? Quantity,decimal? OriginPrice,decimal? DiscountRate,decimal? DiscountPrice,decimal? TienBnTra,decimal? SurchargePrice,int? Id,int? IdDetail,int? ServiceId,int? ServiceDetailId,string ServiceDetailName,byte? PaymentTypeId,byte? IsCancel,byte? IsPayment,string CancelBy,DateTime? CancelDate,short? DepartmentId,short? DoctorAssignId,int? ThuTuIn,string DonViTinh,string MaDv,decimal? PTramBh,string MaKieuTtoan,int? IdGoiDvu,decimal? PtramCkhau,byte? TrongGoi,byte? DaThien,DateTime? NgayTao,string NguoiTao,byte? NoiTru,string IpMacTao,string IpMayTao,string TenHienThi,byte? TtChuyen,byte? BhytStatus,short? IdNvienThien)
	    {
		    TPaymentDetail item = new TPaymentDetail();
		    
            item.PaymentId = PaymentId;
            
            item.Quantity = Quantity;
            
            item.OriginPrice = OriginPrice;
            
            item.DiscountRate = DiscountRate;
            
            item.DiscountPrice = DiscountPrice;
            
            item.TienBnTra = TienBnTra;
            
            item.SurchargePrice = SurchargePrice;
            
            item.Id = Id;
            
            item.IdDetail = IdDetail;
            
            item.ServiceId = ServiceId;
            
            item.ServiceDetailId = ServiceDetailId;
            
            item.ServiceDetailName = ServiceDetailName;
            
            item.PaymentTypeId = PaymentTypeId;
            
            item.IsCancel = IsCancel;
            
            item.IsPayment = IsPayment;
            
            item.CancelBy = CancelBy;
            
            item.CancelDate = CancelDate;
            
            item.DepartmentId = DepartmentId;
            
            item.DoctorAssignId = DoctorAssignId;
            
            item.ThuTuIn = ThuTuIn;
            
            item.DonViTinh = DonViTinh;
            
            item.MaDv = MaDv;
            
            item.PTramBh = PTramBh;
            
            item.MaKieuTtoan = MaKieuTtoan;
            
            item.IdGoiDvu = IdGoiDvu;
            
            item.PtramCkhau = PtramCkhau;
            
            item.TrongGoi = TrongGoi;
            
            item.DaThien = DaThien;
            
            item.NgayTao = NgayTao;
            
            item.NguoiTao = NguoiTao;
            
            item.NoiTru = NoiTru;
            
            item.IpMacTao = IpMacTao;
            
            item.IpMayTao = IpMayTao;
            
            item.TenHienThi = TenHienThi;
            
            item.TtChuyen = TtChuyen;
            
            item.BhytStatus = BhytStatus;
            
            item.IdNvienThien = IdNvienThien;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(long PaymentDetailId,int PaymentId,int? Quantity,decimal? OriginPrice,decimal? DiscountRate,decimal? DiscountPrice,decimal? TienBnTra,decimal? SurchargePrice,int? Id,int? IdDetail,int? ServiceId,int? ServiceDetailId,string ServiceDetailName,byte? PaymentTypeId,byte? IsCancel,byte? IsPayment,string CancelBy,DateTime? CancelDate,short? DepartmentId,short? DoctorAssignId,int? ThuTuIn,string DonViTinh,string MaDv,decimal? PTramBh,string MaKieuTtoan,int? IdGoiDvu,decimal? PtramCkhau,byte? TrongGoi,byte? DaThien,DateTime? NgayTao,string NguoiTao,byte? NoiTru,string IpMacTao,string IpMayTao,string TenHienThi,byte? TtChuyen,byte? BhytStatus,short? IdNvienThien)
	    {
		    TPaymentDetail item = new TPaymentDetail();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.PaymentDetailId = PaymentDetailId;
				
			item.PaymentId = PaymentId;
				
			item.Quantity = Quantity;
				
			item.OriginPrice = OriginPrice;
				
			item.DiscountRate = DiscountRate;
				
			item.DiscountPrice = DiscountPrice;
				
			item.TienBnTra = TienBnTra;
				
			item.SurchargePrice = SurchargePrice;
				
			item.Id = Id;
				
			item.IdDetail = IdDetail;
				
			item.ServiceId = ServiceId;
				
			item.ServiceDetailId = ServiceDetailId;
				
			item.ServiceDetailName = ServiceDetailName;
				
			item.PaymentTypeId = PaymentTypeId;
				
			item.IsCancel = IsCancel;
				
			item.IsPayment = IsPayment;
				
			item.CancelBy = CancelBy;
				
			item.CancelDate = CancelDate;
				
			item.DepartmentId = DepartmentId;
				
			item.DoctorAssignId = DoctorAssignId;
				
			item.ThuTuIn = ThuTuIn;
				
			item.DonViTinh = DonViTinh;
				
			item.MaDv = MaDv;
				
			item.PTramBh = PTramBh;
				
			item.MaKieuTtoan = MaKieuTtoan;
				
			item.IdGoiDvu = IdGoiDvu;
				
			item.PtramCkhau = PtramCkhau;
				
			item.TrongGoi = TrongGoi;
				
			item.DaThien = DaThien;
				
			item.NgayTao = NgayTao;
				
			item.NguoiTao = NguoiTao;
				
			item.NoiTru = NoiTru;
				
			item.IpMacTao = IpMacTao;
				
			item.IpMayTao = IpMayTao;
				
			item.TenHienThi = TenHienThi;
				
			item.TtChuyen = TtChuyen;
				
			item.BhytStatus = BhytStatus;
				
			item.IdNvienThien = IdNvienThien;
				
	        item.Save(UserName);
	    }
    }
}
