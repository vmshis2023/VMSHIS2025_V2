using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TDeposit class.
	/// </summary>
    [Serializable]
	public partial class TDepositCollection : ActiveList<TDeposit, TDepositCollection>
	{	   
		public TDepositCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TDepositCollection</returns>
		public TDepositCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TDeposit o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Deposits table.
	/// </summary>
	[Serializable]
	public partial class TDeposit : ActiveRecord<TDeposit>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TDeposit()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TDeposit(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TDeposit(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TDeposit(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Deposits", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarDepositId = new TableSchema.TableColumn(schema);
				colvarDepositId.ColumnName = "Deposit_ID";
				colvarDepositId.DataType = DbType.Int64;
				colvarDepositId.MaxLength = 0;
				colvarDepositId.AutoIncrement = true;
				colvarDepositId.IsNullable = false;
				colvarDepositId.IsPrimaryKey = true;
				colvarDepositId.IsForeignKey = false;
				colvarDepositId.IsReadOnly = false;
				colvarDepositId.DefaultSetting = @"";
				colvarDepositId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepositId);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int64;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = false;
				colvarPatientId.IsPrimaryKey = false;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "Patient_Code";
				colvarPatientCode.DataType = DbType.AnsiString;
				colvarPatientCode.MaxLength = 20;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = false;
				colvarPatientCode.IsPrimaryKey = false;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarToTalMoney = new TableSchema.TableColumn(schema);
				colvarToTalMoney.ColumnName = "ToTalMoney";
				colvarToTalMoney.DataType = DbType.Decimal;
				colvarToTalMoney.MaxLength = 0;
				colvarToTalMoney.AutoIncrement = false;
				colvarToTalMoney.IsNullable = true;
				colvarToTalMoney.IsPrimaryKey = false;
				colvarToTalMoney.IsForeignKey = false;
				colvarToTalMoney.IsReadOnly = false;
				colvarToTalMoney.DefaultSetting = @"";
				colvarToTalMoney.ForeignKeyTableName = "";
				schema.Columns.Add(colvarToTalMoney);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "Status";
				colvarStatus.DataType = DbType.Byte;
				colvarStatus.MaxLength = 0;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = false;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				
						colvarStatus.DefaultSetting = @"((0))";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarDepositDate = new TableSchema.TableColumn(schema);
				colvarDepositDate.ColumnName = "Deposit_Date";
				colvarDepositDate.DataType = DbType.DateTime;
				colvarDepositDate.MaxLength = 0;
				colvarDepositDate.AutoIncrement = false;
				colvarDepositDate.IsNullable = true;
				colvarDepositDate.IsPrimaryKey = false;
				colvarDepositDate.IsForeignKey = false;
				colvarDepositDate.IsReadOnly = false;
				colvarDepositDate.DefaultSetting = @"";
				colvarDepositDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepositDate);
				
				TableSchema.TableColumn colvarDepositType = new TableSchema.TableColumn(schema);
				colvarDepositType.ColumnName = "Deposit_Type";
				colvarDepositType.DataType = DbType.Byte;
				colvarDepositType.MaxLength = 0;
				colvarDepositType.AutoIncrement = false;
				colvarDepositType.IsNullable = true;
				colvarDepositType.IsPrimaryKey = false;
				colvarDepositType.IsForeignKey = false;
				colvarDepositType.IsReadOnly = false;
				
						colvarDepositType.DefaultSetting = @"((0))";
				colvarDepositType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepositType);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 255;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.String;
				colvarModifiedBy.MaxLength = 20;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "Created_by";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 20;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "Created_Date";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				
						colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);
				
				TableSchema.TableColumn colvarDepartmentId = new TableSchema.TableColumn(schema);
				colvarDepartmentId.ColumnName = "Department_ID";
				colvarDepartmentId.DataType = DbType.Int16;
				colvarDepartmentId.MaxLength = 0;
				colvarDepartmentId.AutoIncrement = false;
				colvarDepartmentId.IsNullable = true;
				colvarDepartmentId.IsPrimaryKey = false;
				colvarDepartmentId.IsForeignKey = false;
				colvarDepartmentId.IsReadOnly = false;
				colvarDepartmentId.DefaultSetting = @"";
				colvarDepartmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentId);
				
				TableSchema.TableColumn colvarPaymentId = new TableSchema.TableColumn(schema);
				colvarPaymentId.ColumnName = "Payment_ID";
				colvarPaymentId.DataType = DbType.Int32;
				colvarPaymentId.MaxLength = 0;
				colvarPaymentId.AutoIncrement = false;
				colvarPaymentId.IsNullable = true;
				colvarPaymentId.IsPrimaryKey = false;
				colvarPaymentId.IsForeignKey = false;
				colvarPaymentId.IsReadOnly = false;
				colvarPaymentId.DefaultSetting = @"";
				colvarPaymentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentId);
				
				TableSchema.TableColumn colvarIdGoiDvu = new TableSchema.TableColumn(schema);
				colvarIdGoiDvu.ColumnName = "ID_GOI_DVU";
				colvarIdGoiDvu.DataType = DbType.Int32;
				colvarIdGoiDvu.MaxLength = 0;
				colvarIdGoiDvu.AutoIncrement = false;
				colvarIdGoiDvu.IsNullable = true;
				colvarIdGoiDvu.IsPrimaryKey = false;
				colvarIdGoiDvu.IsForeignKey = false;
				colvarIdGoiDvu.IsReadOnly = false;
				colvarIdGoiDvu.DefaultSetting = @"";
				colvarIdGoiDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdGoiDvu);
				
				TableSchema.TableColumn colvarIdPhieuGoiDvu = new TableSchema.TableColumn(schema);
				colvarIdPhieuGoiDvu.ColumnName = "ID_PHIEU_GOI_DVU";
				colvarIdPhieuGoiDvu.DataType = DbType.Int32;
				colvarIdPhieuGoiDvu.MaxLength = 0;
				colvarIdPhieuGoiDvu.AutoIncrement = false;
				colvarIdPhieuGoiDvu.IsNullable = true;
				colvarIdPhieuGoiDvu.IsPrimaryKey = false;
				colvarIdPhieuGoiDvu.IsForeignKey = false;
				colvarIdPhieuGoiDvu.IsReadOnly = false;
				colvarIdPhieuGoiDvu.DefaultSetting = @"";
				colvarIdPhieuGoiDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhieuGoiDvu);
				
				TableSchema.TableColumn colvarPtramTung = new TableSchema.TableColumn(schema);
				colvarPtramTung.ColumnName = "PTRAM_TUNG";
				colvarPtramTung.DataType = DbType.Decimal;
				colvarPtramTung.MaxLength = 0;
				colvarPtramTung.AutoIncrement = false;
				colvarPtramTung.IsNullable = true;
				colvarPtramTung.IsPrimaryKey = false;
				colvarPtramTung.IsForeignKey = false;
				colvarPtramTung.IsReadOnly = false;
				colvarPtramTung.DefaultSetting = @"";
				colvarPtramTung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPtramTung);
				
				TableSchema.TableColumn colvarPaymentDate = new TableSchema.TableColumn(schema);
				colvarPaymentDate.ColumnName = "Payment_Date";
				colvarPaymentDate.DataType = DbType.DateTime;
				colvarPaymentDate.MaxLength = 0;
				colvarPaymentDate.AutoIncrement = false;
				colvarPaymentDate.IsNullable = true;
				colvarPaymentDate.IsPrimaryKey = false;
				colvarPaymentDate.IsForeignKey = false;
				colvarPaymentDate.IsReadOnly = false;
				colvarPaymentDate.DefaultSetting = @"";
				colvarPaymentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentDate);
				
				TableSchema.TableColumn colvarIpMaySua = new TableSchema.TableColumn(schema);
				colvarIpMaySua.ColumnName = "IP_MAY_SUA";
				colvarIpMaySua.DataType = DbType.String;
				colvarIpMaySua.MaxLength = 20;
				colvarIpMaySua.AutoIncrement = false;
				colvarIpMaySua.IsNullable = true;
				colvarIpMaySua.IsPrimaryKey = false;
				colvarIpMaySua.IsForeignKey = false;
				colvarIpMaySua.IsReadOnly = false;
				colvarIpMaySua.DefaultSetting = @"";
				colvarIpMaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpMaySua);
				
				TableSchema.TableColumn colvarIpMayTao = new TableSchema.TableColumn(schema);
				colvarIpMayTao.ColumnName = "IP_MAY_TAO";
				colvarIpMayTao.DataType = DbType.String;
				colvarIpMayTao.MaxLength = 20;
				colvarIpMayTao.AutoIncrement = false;
				colvarIpMayTao.IsNullable = true;
				colvarIpMayTao.IsPrimaryKey = false;
				colvarIpMayTao.IsForeignKey = false;
				colvarIpMayTao.IsReadOnly = false;
				colvarIpMayTao.DefaultSetting = @"";
				colvarIpMayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpMayTao);
				
				TableSchema.TableColumn colvarTrangThaiChuyen = new TableSchema.TableColumn(schema);
				colvarTrangThaiChuyen.ColumnName = "TRANG_THAI_CHUYEN";
				colvarTrangThaiChuyen.DataType = DbType.Byte;
				colvarTrangThaiChuyen.MaxLength = 0;
				colvarTrangThaiChuyen.AutoIncrement = false;
				colvarTrangThaiChuyen.IsNullable = true;
				colvarTrangThaiChuyen.IsPrimaryKey = false;
				colvarTrangThaiChuyen.IsForeignKey = false;
				colvarTrangThaiChuyen.IsReadOnly = false;
				colvarTrangThaiChuyen.DefaultSetting = @"";
				colvarTrangThaiChuyen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThaiChuyen);
				
				TableSchema.TableColumn colvarIdNhanVien = new TableSchema.TableColumn(schema);
				colvarIdNhanVien.ColumnName = "ID_NHAN_VIEN";
				colvarIdNhanVien.DataType = DbType.Int16;
				colvarIdNhanVien.MaxLength = 0;
				colvarIdNhanVien.AutoIncrement = false;
				colvarIdNhanVien.IsNullable = true;
				colvarIdNhanVien.IsPrimaryKey = false;
				colvarIdNhanVien.IsForeignKey = false;
				colvarIdNhanVien.IsReadOnly = false;
				colvarIdNhanVien.DefaultSetting = @"";
				colvarIdNhanVien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdNhanVien);
				
				TableSchema.TableColumn colvarLyDoHuy = new TableSchema.TableColumn(schema);
				colvarLyDoHuy.ColumnName = "LY_DO_HUY";
				colvarLyDoHuy.DataType = DbType.String;
				colvarLyDoHuy.MaxLength = 200;
				colvarLyDoHuy.AutoIncrement = false;
				colvarLyDoHuy.IsNullable = true;
				colvarLyDoHuy.IsPrimaryKey = false;
				colvarLyDoHuy.IsForeignKey = false;
				colvarLyDoHuy.IsReadOnly = false;
				colvarLyDoHuy.DefaultSetting = @"";
				colvarLyDoHuy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLyDoHuy);
				
				TableSchema.TableColumn colvarNguoiNop = new TableSchema.TableColumn(schema);
				colvarNguoiNop.ColumnName = "NGUOI_NOP";
				colvarNguoiNop.DataType = DbType.String;
				colvarNguoiNop.MaxLength = 50;
				colvarNguoiNop.AutoIncrement = false;
				colvarNguoiNop.IsNullable = true;
				colvarNguoiNop.IsPrimaryKey = false;
				colvarNguoiNop.IsForeignKey = false;
				colvarNguoiNop.IsReadOnly = false;
				colvarNguoiNop.DefaultSetting = @"";
				colvarNguoiNop.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiNop);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_Deposits",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DepositId")]
		[Bindable(true)]
		public long DepositId 
		{
			get { return GetColumnValue<long>(Columns.DepositId); }
			set { SetColumnValue(Columns.DepositId, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public long PatientId 
		{
			get { return GetColumnValue<long>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("ToTalMoney")]
		[Bindable(true)]
		public decimal? ToTalMoney 
		{
			get { return GetColumnValue<decimal?>(Columns.ToTalMoney); }
			set { SetColumnValue(Columns.ToTalMoney, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public byte Status 
		{
			get { return GetColumnValue<byte>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("DepositDate")]
		[Bindable(true)]
		public DateTime? DepositDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.DepositDate); }
			set { SetColumnValue(Columns.DepositDate, value); }
		}
		  
		[XmlAttribute("DepositType")]
		[Bindable(true)]
		public byte? DepositType 
		{
			get { return GetColumnValue<byte?>(Columns.DepositType); }
			set { SetColumnValue(Columns.DepositType, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedDate")]
		[Bindable(true)]
		public DateTime? ModifiedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set { SetColumnValue(Columns.ModifiedDate, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedDate")]
		[Bindable(true)]
		public DateTime? CreatedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set { SetColumnValue(Columns.CreatedDate, value); }
		}
		  
		[XmlAttribute("DepartmentId")]
		[Bindable(true)]
		public short? DepartmentId 
		{
			get { return GetColumnValue<short?>(Columns.DepartmentId); }
			set { SetColumnValue(Columns.DepartmentId, value); }
		}
		  
		[XmlAttribute("PaymentId")]
		[Bindable(true)]
		public int? PaymentId 
		{
			get { return GetColumnValue<int?>(Columns.PaymentId); }
			set { SetColumnValue(Columns.PaymentId, value); }
		}
		  
		[XmlAttribute("IdGoiDvu")]
		[Bindable(true)]
		public int? IdGoiDvu 
		{
			get { return GetColumnValue<int?>(Columns.IdGoiDvu); }
			set { SetColumnValue(Columns.IdGoiDvu, value); }
		}
		  
		[XmlAttribute("IdPhieuGoiDvu")]
		[Bindable(true)]
		public int? IdPhieuGoiDvu 
		{
			get { return GetColumnValue<int?>(Columns.IdPhieuGoiDvu); }
			set { SetColumnValue(Columns.IdPhieuGoiDvu, value); }
		}
		  
		[XmlAttribute("PtramTung")]
		[Bindable(true)]
		public decimal? PtramTung 
		{
			get { return GetColumnValue<decimal?>(Columns.PtramTung); }
			set { SetColumnValue(Columns.PtramTung, value); }
		}
		  
		[XmlAttribute("PaymentDate")]
		[Bindable(true)]
		public DateTime? PaymentDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.PaymentDate); }
			set { SetColumnValue(Columns.PaymentDate, value); }
		}
		  
		[XmlAttribute("IpMaySua")]
		[Bindable(true)]
		public string IpMaySua 
		{
			get { return GetColumnValue<string>(Columns.IpMaySua); }
			set { SetColumnValue(Columns.IpMaySua, value); }
		}
		  
		[XmlAttribute("IpMayTao")]
		[Bindable(true)]
		public string IpMayTao 
		{
			get { return GetColumnValue<string>(Columns.IpMayTao); }
			set { SetColumnValue(Columns.IpMayTao, value); }
		}
		  
		[XmlAttribute("TrangThaiChuyen")]
		[Bindable(true)]
		public byte? TrangThaiChuyen 
		{
			get { return GetColumnValue<byte?>(Columns.TrangThaiChuyen); }
			set { SetColumnValue(Columns.TrangThaiChuyen, value); }
		}
		  
		[XmlAttribute("IdNhanVien")]
		[Bindable(true)]
		public short? IdNhanVien 
		{
			get { return GetColumnValue<short?>(Columns.IdNhanVien); }
			set { SetColumnValue(Columns.IdNhanVien, value); }
		}
		  
		[XmlAttribute("LyDoHuy")]
		[Bindable(true)]
		public string LyDoHuy 
		{
			get { return GetColumnValue<string>(Columns.LyDoHuy); }
			set { SetColumnValue(Columns.LyDoHuy, value); }
		}
		  
		[XmlAttribute("NguoiNop")]
		[Bindable(true)]
		public string NguoiNop 
		{
			get { return GetColumnValue<string>(Columns.NguoiNop); }
			set { SetColumnValue(Columns.NguoiNop, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varPatientId,string varPatientCode,decimal? varToTalMoney,byte varStatus,DateTime? varDepositDate,byte? varDepositType,string varSDesc,string varModifiedBy,DateTime? varModifiedDate,string varCreatedBy,DateTime? varCreatedDate,short? varDepartmentId,int? varPaymentId,int? varIdGoiDvu,int? varIdPhieuGoiDvu,decimal? varPtramTung,DateTime? varPaymentDate,string varIpMaySua,string varIpMayTao,byte? varTrangThaiChuyen,short? varIdNhanVien,string varLyDoHuy,string varNguoiNop)
		{
			TDeposit item = new TDeposit();
			
			item.PatientId = varPatientId;
			
			item.PatientCode = varPatientCode;
			
			item.ToTalMoney = varToTalMoney;
			
			item.Status = varStatus;
			
			item.DepositDate = varDepositDate;
			
			item.DepositType = varDepositType;
			
			item.SDesc = varSDesc;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedDate = varModifiedDate;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedDate = varCreatedDate;
			
			item.DepartmentId = varDepartmentId;
			
			item.PaymentId = varPaymentId;
			
			item.IdGoiDvu = varIdGoiDvu;
			
			item.IdPhieuGoiDvu = varIdPhieuGoiDvu;
			
			item.PtramTung = varPtramTung;
			
			item.PaymentDate = varPaymentDate;
			
			item.IpMaySua = varIpMaySua;
			
			item.IpMayTao = varIpMayTao;
			
			item.TrangThaiChuyen = varTrangThaiChuyen;
			
			item.IdNhanVien = varIdNhanVien;
			
			item.LyDoHuy = varLyDoHuy;
			
			item.NguoiNop = varNguoiNop;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varDepositId,long varPatientId,string varPatientCode,decimal? varToTalMoney,byte varStatus,DateTime? varDepositDate,byte? varDepositType,string varSDesc,string varModifiedBy,DateTime? varModifiedDate,string varCreatedBy,DateTime? varCreatedDate,short? varDepartmentId,int? varPaymentId,int? varIdGoiDvu,int? varIdPhieuGoiDvu,decimal? varPtramTung,DateTime? varPaymentDate,string varIpMaySua,string varIpMayTao,byte? varTrangThaiChuyen,short? varIdNhanVien,string varLyDoHuy,string varNguoiNop)
		{
			TDeposit item = new TDeposit();
			
				item.DepositId = varDepositId;
			
				item.PatientId = varPatientId;
			
				item.PatientCode = varPatientCode;
			
				item.ToTalMoney = varToTalMoney;
			
				item.Status = varStatus;
			
				item.DepositDate = varDepositDate;
			
				item.DepositType = varDepositType;
			
				item.SDesc = varSDesc;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedDate = varModifiedDate;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedDate = varCreatedDate;
			
				item.DepartmentId = varDepartmentId;
			
				item.PaymentId = varPaymentId;
			
				item.IdGoiDvu = varIdGoiDvu;
			
				item.IdPhieuGoiDvu = varIdPhieuGoiDvu;
			
				item.PtramTung = varPtramTung;
			
				item.PaymentDate = varPaymentDate;
			
				item.IpMaySua = varIpMaySua;
			
				item.IpMayTao = varIpMayTao;
			
				item.TrangThaiChuyen = varTrangThaiChuyen;
			
				item.IdNhanVien = varIdNhanVien;
			
				item.LyDoHuy = varLyDoHuy;
			
				item.NguoiNop = varNguoiNop;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DepositIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ToTalMoneyColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DepositDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DepositTypeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedDateColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedDateColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIdColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentIdColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn IdGoiDvuColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn IdPhieuGoiDvuColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn PtramTungColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentDateColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn IpMaySuaColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn IpMayTaoColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiChuyenColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn IdNhanVienColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn LyDoHuyColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiNopColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DepositId = @"Deposit_ID";
			 public static string PatientId = @"Patient_ID";
			 public static string PatientCode = @"Patient_Code";
			 public static string ToTalMoney = @"ToTalMoney";
			 public static string Status = @"Status";
			 public static string DepositDate = @"Deposit_Date";
			 public static string DepositType = @"Deposit_Type";
			 public static string SDesc = @"sDesc";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedDate = @"ModifiedDate";
			 public static string CreatedBy = @"Created_by";
			 public static string CreatedDate = @"Created_Date";
			 public static string DepartmentId = @"Department_ID";
			 public static string PaymentId = @"Payment_ID";
			 public static string IdGoiDvu = @"ID_GOI_DVU";
			 public static string IdPhieuGoiDvu = @"ID_PHIEU_GOI_DVU";
			 public static string PtramTung = @"PTRAM_TUNG";
			 public static string PaymentDate = @"Payment_Date";
			 public static string IpMaySua = @"IP_MAY_SUA";
			 public static string IpMayTao = @"IP_MAY_TAO";
			 public static string TrangThaiChuyen = @"TRANG_THAI_CHUYEN";
			 public static string IdNhanVien = @"ID_NHAN_VIEN";
			 public static string LyDoHuy = @"LY_DO_HUY";
			 public static string NguoiNop = @"NGUOI_NOP";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
