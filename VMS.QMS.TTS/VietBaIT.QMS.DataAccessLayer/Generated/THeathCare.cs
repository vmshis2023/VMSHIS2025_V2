using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the THeathCare class.
	/// </summary>
    [Serializable]
	public partial class THeathCareCollection : ActiveList<THeathCare, THeathCareCollection>
	{	   
		public THeathCareCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>THeathCareCollection</returns>
		public THeathCareCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                THeathCare o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Heath_Care table.
	/// </summary>
	[Serializable]
	public partial class THeathCare : ActiveRecord<THeathCare>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public THeathCare()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public THeathCare(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public THeathCare(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public THeathCare(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Heath_Care", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarHeathId = new TableSchema.TableColumn(schema);
				colvarHeathId.ColumnName = "Heath_ID";
				colvarHeathId.DataType = DbType.Int32;
				colvarHeathId.MaxLength = 0;
				colvarHeathId.AutoIncrement = true;
				colvarHeathId.IsNullable = false;
				colvarHeathId.IsPrimaryKey = true;
				colvarHeathId.IsForeignKey = false;
				colvarHeathId.IsReadOnly = false;
				colvarHeathId.DefaultSetting = @"";
				colvarHeathId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHeathId);
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "Patient_Code";
				colvarPatientCode.DataType = DbType.AnsiString;
				colvarPatientCode.MaxLength = 20;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = true;
				colvarPatientCode.IsPrimaryKey = false;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int32;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = true;
				colvarPatientId.IsPrimaryKey = false;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarDepartmentId = new TableSchema.TableColumn(schema);
				colvarDepartmentId.ColumnName = "Department_ID";
				colvarDepartmentId.DataType = DbType.Int16;
				colvarDepartmentId.MaxLength = 0;
				colvarDepartmentId.AutoIncrement = false;
				colvarDepartmentId.IsNullable = true;
				colvarDepartmentId.IsPrimaryKey = false;
				colvarDepartmentId.IsForeignKey = false;
				colvarDepartmentId.IsReadOnly = false;
				colvarDepartmentId.DefaultSetting = @"";
				colvarDepartmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentId);
				
				TableSchema.TableColumn colvarStaffId = new TableSchema.TableColumn(schema);
				colvarStaffId.ColumnName = "Staff_ID";
				colvarStaffId.DataType = DbType.Int16;
				colvarStaffId.MaxLength = 0;
				colvarStaffId.AutoIncrement = false;
				colvarStaffId.IsNullable = true;
				colvarStaffId.IsPrimaryKey = false;
				colvarStaffId.IsForeignKey = false;
				colvarStaffId.IsReadOnly = false;
				colvarStaffId.DefaultSetting = @"";
				colvarStaffId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStaffId);
				
				TableSchema.TableColumn colvarEvents = new TableSchema.TableColumn(schema);
				colvarEvents.ColumnName = "Events";
				colvarEvents.DataType = DbType.String;
				colvarEvents.MaxLength = 500;
				colvarEvents.AutoIncrement = false;
				colvarEvents.IsNullable = true;
				colvarEvents.IsPrimaryKey = false;
				colvarEvents.IsForeignKey = false;
				colvarEvents.IsReadOnly = false;
				colvarEvents.DefaultSetting = @"";
				colvarEvents.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEvents);
				
				TableSchema.TableColumn colvarReviews = new TableSchema.TableColumn(schema);
				colvarReviews.ColumnName = "Reviews";
				colvarReviews.DataType = DbType.String;
				colvarReviews.MaxLength = 500;
				colvarReviews.AutoIncrement = false;
				colvarReviews.IsNullable = true;
				colvarReviews.IsPrimaryKey = false;
				colvarReviews.IsForeignKey = false;
				colvarReviews.IsReadOnly = false;
				colvarReviews.DefaultSetting = @"";
				colvarReviews.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReviews);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "Create_Date";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = false;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				colvarCreateDate.DefaultSetting = @"";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				TableSchema.TableColumn colvarCreateBy = new TableSchema.TableColumn(schema);
				colvarCreateBy.ColumnName = "Create_By";
				colvarCreateBy.DataType = DbType.String;
				colvarCreateBy.MaxLength = 20;
				colvarCreateBy.AutoIncrement = false;
				colvarCreateBy.IsNullable = false;
				colvarCreateBy.IsPrimaryKey = false;
				colvarCreateBy.IsForeignKey = false;
				colvarCreateBy.IsReadOnly = false;
				colvarCreateBy.DefaultSetting = @"";
				colvarCreateBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateBy);
				
				TableSchema.TableColumn colvarModifyDate = new TableSchema.TableColumn(schema);
				colvarModifyDate.ColumnName = "Modify_Date";
				colvarModifyDate.DataType = DbType.DateTime;
				colvarModifyDate.MaxLength = 0;
				colvarModifyDate.AutoIncrement = false;
				colvarModifyDate.IsNullable = true;
				colvarModifyDate.IsPrimaryKey = false;
				colvarModifyDate.IsForeignKey = false;
				colvarModifyDate.IsReadOnly = false;
				colvarModifyDate.DefaultSetting = @"";
				colvarModifyDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifyDate);
				
				TableSchema.TableColumn colvarModifyBy = new TableSchema.TableColumn(schema);
				colvarModifyBy.ColumnName = "Modify_By";
				colvarModifyBy.DataType = DbType.String;
				colvarModifyBy.MaxLength = 20;
				colvarModifyBy.AutoIncrement = false;
				colvarModifyBy.IsNullable = true;
				colvarModifyBy.IsPrimaryKey = false;
				colvarModifyBy.IsForeignKey = false;
				colvarModifyBy.IsReadOnly = false;
				colvarModifyBy.DefaultSetting = @"";
				colvarModifyBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifyBy);
				
				TableSchema.TableColumn colvarNgayDky = new TableSchema.TableColumn(schema);
				colvarNgayDky.ColumnName = "NGAY_DKY";
				colvarNgayDky.DataType = DbType.DateTime;
				colvarNgayDky.MaxLength = 0;
				colvarNgayDky.AutoIncrement = false;
				colvarNgayDky.IsNullable = true;
				colvarNgayDky.IsPrimaryKey = false;
				colvarNgayDky.IsForeignKey = false;
				colvarNgayDky.IsReadOnly = false;
				colvarNgayDky.DefaultSetting = @"";
				colvarNgayDky.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayDky);
				
				TableSchema.TableColumn colvarGioDky = new TableSchema.TableColumn(schema);
				colvarGioDky.ColumnName = "GIO_DKY";
				colvarGioDky.DataType = DbType.AnsiString;
				colvarGioDky.MaxLength = 10;
				colvarGioDky.AutoIncrement = false;
				colvarGioDky.IsNullable = true;
				colvarGioDky.IsPrimaryKey = false;
				colvarGioDky.IsForeignKey = false;
				colvarGioDky.IsReadOnly = false;
				colvarGioDky.DefaultSetting = @"";
				colvarGioDky.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGioDky);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_Heath_Care",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("HeathId")]
		[Bindable(true)]
		public int HeathId 
		{
			get { return GetColumnValue<int>(Columns.HeathId); }
			set { SetColumnValue(Columns.HeathId, value); }
		}
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public int? PatientId 
		{
			get { return GetColumnValue<int?>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("DepartmentId")]
		[Bindable(true)]
		public short? DepartmentId 
		{
			get { return GetColumnValue<short?>(Columns.DepartmentId); }
			set { SetColumnValue(Columns.DepartmentId, value); }
		}
		  
		[XmlAttribute("StaffId")]
		[Bindable(true)]
		public short? StaffId 
		{
			get { return GetColumnValue<short?>(Columns.StaffId); }
			set { SetColumnValue(Columns.StaffId, value); }
		}
		  
		[XmlAttribute("Events")]
		[Bindable(true)]
		public string Events 
		{
			get { return GetColumnValue<string>(Columns.Events); }
			set { SetColumnValue(Columns.Events, value); }
		}
		  
		[XmlAttribute("Reviews")]
		[Bindable(true)]
		public string Reviews 
		{
			get { return GetColumnValue<string>(Columns.Reviews); }
			set { SetColumnValue(Columns.Reviews, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime CreateDate 
		{
			get { return GetColumnValue<DateTime>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		  
		[XmlAttribute("CreateBy")]
		[Bindable(true)]
		public string CreateBy 
		{
			get { return GetColumnValue<string>(Columns.CreateBy); }
			set { SetColumnValue(Columns.CreateBy, value); }
		}
		  
		[XmlAttribute("ModifyDate")]
		[Bindable(true)]
		public DateTime? ModifyDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifyDate); }
			set { SetColumnValue(Columns.ModifyDate, value); }
		}
		  
		[XmlAttribute("ModifyBy")]
		[Bindable(true)]
		public string ModifyBy 
		{
			get { return GetColumnValue<string>(Columns.ModifyBy); }
			set { SetColumnValue(Columns.ModifyBy, value); }
		}
		  
		[XmlAttribute("NgayDky")]
		[Bindable(true)]
		public DateTime? NgayDky 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayDky); }
			set { SetColumnValue(Columns.NgayDky, value); }
		}
		  
		[XmlAttribute("GioDky")]
		[Bindable(true)]
		public string GioDky 
		{
			get { return GetColumnValue<string>(Columns.GioDky); }
			set { SetColumnValue(Columns.GioDky, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varPatientCode,int? varPatientId,short? varDepartmentId,short? varStaffId,string varEvents,string varReviews,DateTime varCreateDate,string varCreateBy,DateTime? varModifyDate,string varModifyBy,DateTime? varNgayDky,string varGioDky)
		{
			THeathCare item = new THeathCare();
			
			item.PatientCode = varPatientCode;
			
			item.PatientId = varPatientId;
			
			item.DepartmentId = varDepartmentId;
			
			item.StaffId = varStaffId;
			
			item.Events = varEvents;
			
			item.Reviews = varReviews;
			
			item.CreateDate = varCreateDate;
			
			item.CreateBy = varCreateBy;
			
			item.ModifyDate = varModifyDate;
			
			item.ModifyBy = varModifyBy;
			
			item.NgayDky = varNgayDky;
			
			item.GioDky = varGioDky;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varHeathId,string varPatientCode,int? varPatientId,short? varDepartmentId,short? varStaffId,string varEvents,string varReviews,DateTime varCreateDate,string varCreateBy,DateTime? varModifyDate,string varModifyBy,DateTime? varNgayDky,string varGioDky)
		{
			THeathCare item = new THeathCare();
			
				item.HeathId = varHeathId;
			
				item.PatientCode = varPatientCode;
			
				item.PatientId = varPatientId;
			
				item.DepartmentId = varDepartmentId;
			
				item.StaffId = varStaffId;
			
				item.Events = varEvents;
			
				item.Reviews = varReviews;
			
				item.CreateDate = varCreateDate;
			
				item.CreateBy = varCreateBy;
			
				item.ModifyDate = varModifyDate;
			
				item.ModifyBy = varModifyBy;
			
				item.NgayDky = varNgayDky;
			
				item.GioDky = varGioDky;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn HeathIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn StaffIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn EventsColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ReviewsColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateByColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifyDateColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifyByColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayDkyColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn GioDkyColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string HeathId = @"Heath_ID";
			 public static string PatientCode = @"Patient_Code";
			 public static string PatientId = @"Patient_ID";
			 public static string DepartmentId = @"Department_ID";
			 public static string StaffId = @"Staff_ID";
			 public static string Events = @"Events";
			 public static string Reviews = @"Reviews";
			 public static string CreateDate = @"Create_Date";
			 public static string CreateBy = @"Create_By";
			 public static string ModifyDate = @"Modify_Date";
			 public static string ModifyBy = @"Modify_By";
			 public static string NgayDky = @"NGAY_DKY";
			 public static string GioDky = @"GIO_DKY";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
