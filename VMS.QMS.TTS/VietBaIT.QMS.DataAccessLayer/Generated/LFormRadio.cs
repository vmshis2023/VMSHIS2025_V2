using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LFormRadio class.
	/// </summary>
    [Serializable]
	public partial class LFormRadioCollection : ActiveList<LFormRadio, LFormRadioCollection>
	{	   
		public LFormRadioCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LFormRadioCollection</returns>
		public LFormRadioCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LFormRadio o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_Form_Radio table.
	/// </summary>
	[Serializable]
	public partial class LFormRadio : ActiveRecord<LFormRadio>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LFormRadio()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LFormRadio(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LFormRadio(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LFormRadio(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_Form_Radio", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarFormId = new TableSchema.TableColumn(schema);
				colvarFormId.ColumnName = "Form_ID";
				colvarFormId.DataType = DbType.Int32;
				colvarFormId.MaxLength = 0;
				colvarFormId.AutoIncrement = true;
				colvarFormId.IsNullable = false;
				colvarFormId.IsPrimaryKey = true;
				colvarFormId.IsForeignKey = false;
				colvarFormId.IsReadOnly = false;
				colvarFormId.DefaultSetting = @"";
				colvarFormId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFormId);
				
				TableSchema.TableColumn colvarFormName = new TableSchema.TableColumn(schema);
				colvarFormName.ColumnName = "Form_Name";
				colvarFormName.DataType = DbType.String;
				colvarFormName.MaxLength = 100;
				colvarFormName.AutoIncrement = false;
				colvarFormName.IsNullable = true;
				colvarFormName.IsPrimaryKey = false;
				colvarFormName.IsForeignKey = false;
				colvarFormName.IsReadOnly = false;
				colvarFormName.DefaultSetting = @"";
				colvarFormName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFormName);
				
				TableSchema.TableColumn colvarFormDesc = new TableSchema.TableColumn(schema);
				colvarFormDesc.ColumnName = "Form_Desc";
				colvarFormDesc.DataType = DbType.String;
				colvarFormDesc.MaxLength = 1073741823;
				colvarFormDesc.AutoIncrement = false;
				colvarFormDesc.IsNullable = true;
				colvarFormDesc.IsPrimaryKey = false;
				colvarFormDesc.IsForeignKey = false;
				colvarFormDesc.IsReadOnly = false;
				colvarFormDesc.DefaultSetting = @"";
				colvarFormDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFormDesc);
				
				TableSchema.TableColumn colvarKetLuan = new TableSchema.TableColumn(schema);
				colvarKetLuan.ColumnName = "KetLuan";
				colvarKetLuan.DataType = DbType.String;
				colvarKetLuan.MaxLength = 1073741823;
				colvarKetLuan.AutoIncrement = false;
				colvarKetLuan.IsNullable = true;
				colvarKetLuan.IsPrimaryKey = false;
				colvarKetLuan.IsForeignKey = false;
				colvarKetLuan.IsReadOnly = false;
				colvarKetLuan.DefaultSetting = @"";
				colvarKetLuan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKetLuan);
				
				TableSchema.TableColumn colvarIntOrder = new TableSchema.TableColumn(schema);
				colvarIntOrder.ColumnName = "IntOrder";
				colvarIntOrder.DataType = DbType.Int32;
				colvarIntOrder.MaxLength = 0;
				colvarIntOrder.AutoIncrement = false;
				colvarIntOrder.IsNullable = true;
				colvarIntOrder.IsPrimaryKey = false;
				colvarIntOrder.IsForeignKey = false;
				colvarIntOrder.IsReadOnly = false;
				colvarIntOrder.DefaultSetting = @"";
				colvarIntOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIntOrder);
				
				TableSchema.TableColumn colvarIsView = new TableSchema.TableColumn(schema);
				colvarIsView.ColumnName = "IsView";
				colvarIsView.DataType = DbType.Int32;
				colvarIsView.MaxLength = 0;
				colvarIsView.AutoIncrement = false;
				colvarIsView.IsNullable = true;
				colvarIsView.IsPrimaryKey = false;
				colvarIsView.IsForeignKey = false;
				colvarIsView.IsReadOnly = false;
				colvarIsView.DefaultSetting = @"";
				colvarIsView.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsView);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "Created_By";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "Created_Date";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);
				
				TableSchema.TableColumn colvarFormCode = new TableSchema.TableColumn(schema);
				colvarFormCode.ColumnName = "Form_Code";
				colvarFormCode.DataType = DbType.AnsiString;
				colvarFormCode.MaxLength = 50;
				colvarFormCode.AutoIncrement = false;
				colvarFormCode.IsNullable = true;
				colvarFormCode.IsPrimaryKey = false;
				colvarFormCode.IsForeignKey = false;
				colvarFormCode.IsReadOnly = false;
				colvarFormCode.DefaultSetting = @"";
				colvarFormCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFormCode);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_Form_Radio",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("FormId")]
		[Bindable(true)]
		public int FormId 
		{
			get { return GetColumnValue<int>(Columns.FormId); }
			set { SetColumnValue(Columns.FormId, value); }
		}
		  
		[XmlAttribute("FormName")]
		[Bindable(true)]
		public string FormName 
		{
			get { return GetColumnValue<string>(Columns.FormName); }
			set { SetColumnValue(Columns.FormName, value); }
		}
		  
		[XmlAttribute("FormDesc")]
		[Bindable(true)]
		public string FormDesc 
		{
			get { return GetColumnValue<string>(Columns.FormDesc); }
			set { SetColumnValue(Columns.FormDesc, value); }
		}
		  
		[XmlAttribute("KetLuan")]
		[Bindable(true)]
		public string KetLuan 
		{
			get { return GetColumnValue<string>(Columns.KetLuan); }
			set { SetColumnValue(Columns.KetLuan, value); }
		}
		  
		[XmlAttribute("IntOrder")]
		[Bindable(true)]
		public int? IntOrder 
		{
			get { return GetColumnValue<int?>(Columns.IntOrder); }
			set { SetColumnValue(Columns.IntOrder, value); }
		}
		  
		[XmlAttribute("IsView")]
		[Bindable(true)]
		public int? IsView 
		{
			get { return GetColumnValue<int?>(Columns.IsView); }
			set { SetColumnValue(Columns.IsView, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedDate")]
		[Bindable(true)]
		public DateTime? CreatedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set { SetColumnValue(Columns.CreatedDate, value); }
		}
		  
		[XmlAttribute("FormCode")]
		[Bindable(true)]
		public string FormCode 
		{
			get { return GetColumnValue<string>(Columns.FormCode); }
			set { SetColumnValue(Columns.FormCode, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varFormName,string varFormDesc,string varKetLuan,int? varIntOrder,int? varIsView,string varCreatedBy,DateTime? varCreatedDate,string varFormCode)
		{
			LFormRadio item = new LFormRadio();
			
			item.FormName = varFormName;
			
			item.FormDesc = varFormDesc;
			
			item.KetLuan = varKetLuan;
			
			item.IntOrder = varIntOrder;
			
			item.IsView = varIsView;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedDate = varCreatedDate;
			
			item.FormCode = varFormCode;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varFormId,string varFormName,string varFormDesc,string varKetLuan,int? varIntOrder,int? varIsView,string varCreatedBy,DateTime? varCreatedDate,string varFormCode)
		{
			LFormRadio item = new LFormRadio();
			
				item.FormId = varFormId;
			
				item.FormName = varFormName;
			
				item.FormDesc = varFormDesc;
			
				item.KetLuan = varKetLuan;
			
				item.IntOrder = varIntOrder;
			
				item.IsView = varIsView;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedDate = varCreatedDate;
			
				item.FormCode = varFormCode;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn FormIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FormNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FormDescColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn KetLuanColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IntOrderColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IsViewColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedDateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn FormCodeColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string FormId = @"Form_ID";
			 public static string FormName = @"Form_Name";
			 public static string FormDesc = @"Form_Desc";
			 public static string KetLuan = @"KetLuan";
			 public static string IntOrder = @"IntOrder";
			 public static string IsView = @"IsView";
			 public static string CreatedBy = @"Created_By";
			 public static string CreatedDate = @"Created_Date";
			 public static string FormCode = @"Form_Code";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
