using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LClinic class.
	/// </summary>
    [Serializable]
	public partial class LClinicCollection : ActiveList<LClinic, LClinicCollection>
	{	   
		public LClinicCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LClinicCollection</returns>
		public LClinicCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LClinic o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_Clinics table.
	/// </summary>
	[Serializable]
	public partial class LClinic : ActiveRecord<LClinic>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LClinic()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LClinic(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LClinic(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LClinic(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_Clinics", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarClinicId = new TableSchema.TableColumn(schema);
				colvarClinicId.ColumnName = "Clinic_ID";
				colvarClinicId.DataType = DbType.Int32;
				colvarClinicId.MaxLength = 0;
				colvarClinicId.AutoIncrement = true;
				colvarClinicId.IsNullable = false;
				colvarClinicId.IsPrimaryKey = true;
				colvarClinicId.IsForeignKey = false;
				colvarClinicId.IsReadOnly = false;
				colvarClinicId.DefaultSetting = @"";
				colvarClinicId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClinicId);
				
				TableSchema.TableColumn colvarSurveyCode = new TableSchema.TableColumn(schema);
				colvarSurveyCode.ColumnName = "Survey_Code";
				colvarSurveyCode.DataType = DbType.AnsiString;
				colvarSurveyCode.MaxLength = 10;
				colvarSurveyCode.AutoIncrement = false;
				colvarSurveyCode.IsNullable = true;
				colvarSurveyCode.IsPrimaryKey = false;
				colvarSurveyCode.IsForeignKey = false;
				colvarSurveyCode.IsReadOnly = false;
				colvarSurveyCode.DefaultSetting = @"";
				colvarSurveyCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurveyCode);
				
				TableSchema.TableColumn colvarInsClinicCode = new TableSchema.TableColumn(schema);
				colvarInsClinicCode.ColumnName = "InsClinic_Code";
				colvarInsClinicCode.DataType = DbType.AnsiString;
				colvarInsClinicCode.MaxLength = 5;
				colvarInsClinicCode.AutoIncrement = false;
				colvarInsClinicCode.IsNullable = false;
				colvarInsClinicCode.IsPrimaryKey = false;
				colvarInsClinicCode.IsForeignKey = false;
				colvarInsClinicCode.IsReadOnly = false;
				colvarInsClinicCode.DefaultSetting = @"";
				colvarInsClinicCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInsClinicCode);
				
				TableSchema.TableColumn colvarClinicName = new TableSchema.TableColumn(schema);
				colvarClinicName.ColumnName = "Clinic_Name";
				colvarClinicName.DataType = DbType.String;
				colvarClinicName.MaxLength = 100;
				colvarClinicName.AutoIncrement = false;
				colvarClinicName.IsNullable = false;
				colvarClinicName.IsPrimaryKey = false;
				colvarClinicName.IsForeignKey = false;
				colvarClinicName.IsReadOnly = false;
				colvarClinicName.DefaultSetting = @"";
				colvarClinicName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClinicName);
				
				TableSchema.TableColumn colvarIntOrder = new TableSchema.TableColumn(schema);
				colvarIntOrder.ColumnName = "intOrder";
				colvarIntOrder.DataType = DbType.Int16;
				colvarIntOrder.MaxLength = 0;
				colvarIntOrder.AutoIncrement = false;
				colvarIntOrder.IsNullable = true;
				colvarIntOrder.IsPrimaryKey = false;
				colvarIntOrder.IsForeignKey = false;
				colvarIntOrder.IsReadOnly = false;
				colvarIntOrder.DefaultSetting = @"";
				colvarIntOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIntOrder);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 200;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "Address";
				colvarAddress.DataType = DbType.String;
				colvarAddress.MaxLength = 200;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = true;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);
				
				TableSchema.TableColumn colvarMaHuyen = new TableSchema.TableColumn(schema);
				colvarMaHuyen.ColumnName = "Ma_Huyen";
				colvarMaHuyen.DataType = DbType.String;
				colvarMaHuyen.MaxLength = 20;
				colvarMaHuyen.AutoIncrement = false;
				colvarMaHuyen.IsNullable = true;
				colvarMaHuyen.IsPrimaryKey = false;
				colvarMaHuyen.IsForeignKey = false;
				colvarMaHuyen.IsReadOnly = false;
				colvarMaHuyen.DefaultSetting = @"";
				colvarMaHuyen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaHuyen);
				
				TableSchema.TableColumn colvarTuyen = new TableSchema.TableColumn(schema);
				colvarTuyen.ColumnName = "Tuyen";
				colvarTuyen.DataType = DbType.AnsiString;
				colvarTuyen.MaxLength = 5;
				colvarTuyen.AutoIncrement = false;
				colvarTuyen.IsNullable = true;
				colvarTuyen.IsPrimaryKey = false;
				colvarTuyen.IsForeignKey = false;
				colvarTuyen.IsReadOnly = false;
				colvarTuyen.DefaultSetting = @"";
				colvarTuyen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTuyen);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "Ngay_Tao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				
						colvarNgayTao.DefaultSetting = @"(getdate())";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "Nguoi_Tao";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 20;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgaySua = new TableSchema.TableColumn(schema);
				colvarNgaySua.ColumnName = "Ngay_Sua";
				colvarNgaySua.DataType = DbType.DateTime;
				colvarNgaySua.MaxLength = 0;
				colvarNgaySua.AutoIncrement = false;
				colvarNgaySua.IsNullable = true;
				colvarNgaySua.IsPrimaryKey = false;
				colvarNgaySua.IsForeignKey = false;
				colvarNgaySua.IsReadOnly = false;
				colvarNgaySua.DefaultSetting = @"";
				colvarNgaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgaySua);
				
				TableSchema.TableColumn colvarNguoiSua = new TableSchema.TableColumn(schema);
				colvarNguoiSua.ColumnName = "Nguoi_Sua";
				colvarNguoiSua.DataType = DbType.String;
				colvarNguoiSua.MaxLength = 20;
				colvarNguoiSua.AutoIncrement = false;
				colvarNguoiSua.IsNullable = true;
				colvarNguoiSua.IsPrimaryKey = false;
				colvarNguoiSua.IsForeignKey = false;
				colvarNguoiSua.IsReadOnly = false;
				colvarNguoiSua.DefaultSetting = @"";
				colvarNguoiSua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiSua);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_Clinics",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ClinicId")]
		[Bindable(true)]
		public int ClinicId 
		{
			get { return GetColumnValue<int>(Columns.ClinicId); }
			set { SetColumnValue(Columns.ClinicId, value); }
		}
		  
		[XmlAttribute("SurveyCode")]
		[Bindable(true)]
		public string SurveyCode 
		{
			get { return GetColumnValue<string>(Columns.SurveyCode); }
			set { SetColumnValue(Columns.SurveyCode, value); }
		}
		  
		[XmlAttribute("InsClinicCode")]
		[Bindable(true)]
		public string InsClinicCode 
		{
			get { return GetColumnValue<string>(Columns.InsClinicCode); }
			set { SetColumnValue(Columns.InsClinicCode, value); }
		}
		  
		[XmlAttribute("ClinicName")]
		[Bindable(true)]
		public string ClinicName 
		{
			get { return GetColumnValue<string>(Columns.ClinicName); }
			set { SetColumnValue(Columns.ClinicName, value); }
		}
		  
		[XmlAttribute("IntOrder")]
		[Bindable(true)]
		public short? IntOrder 
		{
			get { return GetColumnValue<short?>(Columns.IntOrder); }
			set { SetColumnValue(Columns.IntOrder, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		  
		[XmlAttribute("Address")]
		[Bindable(true)]
		public string Address 
		{
			get { return GetColumnValue<string>(Columns.Address); }
			set { SetColumnValue(Columns.Address, value); }
		}
		  
		[XmlAttribute("MaHuyen")]
		[Bindable(true)]
		public string MaHuyen 
		{
			get { return GetColumnValue<string>(Columns.MaHuyen); }
			set { SetColumnValue(Columns.MaHuyen, value); }
		}
		  
		[XmlAttribute("Tuyen")]
		[Bindable(true)]
		public string Tuyen 
		{
			get { return GetColumnValue<string>(Columns.Tuyen); }
			set { SetColumnValue(Columns.Tuyen, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgaySua")]
		[Bindable(true)]
		public DateTime? NgaySua 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgaySua); }
			set { SetColumnValue(Columns.NgaySua, value); }
		}
		  
		[XmlAttribute("NguoiSua")]
		[Bindable(true)]
		public string NguoiSua 
		{
			get { return GetColumnValue<string>(Columns.NguoiSua); }
			set { SetColumnValue(Columns.NguoiSua, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSurveyCode,string varInsClinicCode,string varClinicName,short? varIntOrder,string varSDesc,string varAddress,string varMaHuyen,string varTuyen,DateTime? varNgayTao,string varNguoiTao,DateTime? varNgaySua,string varNguoiSua)
		{
			LClinic item = new LClinic();
			
			item.SurveyCode = varSurveyCode;
			
			item.InsClinicCode = varInsClinicCode;
			
			item.ClinicName = varClinicName;
			
			item.IntOrder = varIntOrder;
			
			item.SDesc = varSDesc;
			
			item.Address = varAddress;
			
			item.MaHuyen = varMaHuyen;
			
			item.Tuyen = varTuyen;
			
			item.NgayTao = varNgayTao;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgaySua = varNgaySua;
			
			item.NguoiSua = varNguoiSua;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varClinicId,string varSurveyCode,string varInsClinicCode,string varClinicName,short? varIntOrder,string varSDesc,string varAddress,string varMaHuyen,string varTuyen,DateTime? varNgayTao,string varNguoiTao,DateTime? varNgaySua,string varNguoiSua)
		{
			LClinic item = new LClinic();
			
				item.ClinicId = varClinicId;
			
				item.SurveyCode = varSurveyCode;
			
				item.InsClinicCode = varInsClinicCode;
			
				item.ClinicName = varClinicName;
			
				item.IntOrder = varIntOrder;
			
				item.SDesc = varSDesc;
			
				item.Address = varAddress;
			
				item.MaHuyen = varMaHuyen;
			
				item.Tuyen = varTuyen;
			
				item.NgayTao = varNgayTao;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgaySua = varNgaySua;
			
				item.NguoiSua = varNguoiSua;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ClinicIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SurveyCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn InsClinicCodeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ClinicNameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IntOrderColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn AddressColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn MaHuyenColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn TuyenColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn NgaySuaColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiSuaColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ClinicId = @"Clinic_ID";
			 public static string SurveyCode = @"Survey_Code";
			 public static string InsClinicCode = @"InsClinic_Code";
			 public static string ClinicName = @"Clinic_Name";
			 public static string IntOrder = @"intOrder";
			 public static string SDesc = @"sDesc";
			 public static string Address = @"Address";
			 public static string MaHuyen = @"Ma_Huyen";
			 public static string Tuyen = @"Tuyen";
			 public static string NgayTao = @"Ngay_Tao";
			 public static string NguoiTao = @"Nguoi_Tao";
			 public static string NgaySua = @"Ngay_Sua";
			 public static string NguoiSua = @"Nguoi_Sua";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
