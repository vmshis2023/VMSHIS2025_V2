using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LExamTypeObjDepartDoctorRelation class.
	/// </summary>
    [Serializable]
	public partial class LExamTypeObjDepartDoctorRelationCollection : ActiveList<LExamTypeObjDepartDoctorRelation, LExamTypeObjDepartDoctorRelationCollection>
	{	   
		public LExamTypeObjDepartDoctorRelationCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LExamTypeObjDepartDoctorRelationCollection</returns>
		public LExamTypeObjDepartDoctorRelationCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LExamTypeObjDepartDoctorRelation o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_ExamType_Obj_Depart_Doctor_Relation table.
	/// </summary>
	[Serializable]
	public partial class LExamTypeObjDepartDoctorRelation : ActiveRecord<LExamTypeObjDepartDoctorRelation>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LExamTypeObjDepartDoctorRelation()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LExamTypeObjDepartDoctorRelation(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LExamTypeObjDepartDoctorRelation(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LExamTypeObjDepartDoctorRelation(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_ExamType_Obj_Depart_Doctor_Relation", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarCode = new TableSchema.TableColumn(schema);
				colvarCode.ColumnName = "_Code";
				colvarCode.DataType = DbType.String;
				colvarCode.MaxLength = 50;
				colvarCode.AutoIncrement = false;
				colvarCode.IsNullable = true;
				colvarCode.IsPrimaryKey = false;
				colvarCode.IsForeignKey = false;
				colvarCode.IsReadOnly = false;
				colvarCode.DefaultSetting = @"";
				colvarCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCode);
				
				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "_Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 100;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = true;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);
				
				TableSchema.TableColumn colvarExamTypeId = new TableSchema.TableColumn(schema);
				colvarExamTypeId.ColumnName = "ExamType_ID";
				colvarExamTypeId.DataType = DbType.Int16;
				colvarExamTypeId.MaxLength = 0;
				colvarExamTypeId.AutoIncrement = false;
				colvarExamTypeId.IsNullable = false;
				colvarExamTypeId.IsPrimaryKey = false;
				colvarExamTypeId.IsForeignKey = false;
				colvarExamTypeId.IsReadOnly = false;
				colvarExamTypeId.DefaultSetting = @"";
				colvarExamTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExamTypeId);
				
				TableSchema.TableColumn colvarDepartmentId = new TableSchema.TableColumn(schema);
				colvarDepartmentId.ColumnName = "Department_ID";
				colvarDepartmentId.DataType = DbType.Int16;
				colvarDepartmentId.MaxLength = 0;
				colvarDepartmentId.AutoIncrement = false;
				colvarDepartmentId.IsNullable = false;
				colvarDepartmentId.IsPrimaryKey = false;
				colvarDepartmentId.IsForeignKey = false;
				colvarDepartmentId.IsReadOnly = false;
				colvarDepartmentId.DefaultSetting = @"";
				colvarDepartmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentId);
				
				TableSchema.TableColumn colvarDoctorId = new TableSchema.TableColumn(schema);
				colvarDoctorId.ColumnName = "Doctor_ID";
				colvarDoctorId.DataType = DbType.Int16;
				colvarDoctorId.MaxLength = 0;
				colvarDoctorId.AutoIncrement = false;
				colvarDoctorId.IsNullable = false;
				colvarDoctorId.IsPrimaryKey = false;
				colvarDoctorId.IsForeignKey = false;
				colvarDoctorId.IsReadOnly = false;
				
						colvarDoctorId.DefaultSetting = @"((-1))";
				colvarDoctorId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDoctorId);
				
				TableSchema.TableColumn colvarObjectTypeId = new TableSchema.TableColumn(schema);
				colvarObjectTypeId.ColumnName = "ObjectType_ID";
				colvarObjectTypeId.DataType = DbType.Int16;
				colvarObjectTypeId.MaxLength = 0;
				colvarObjectTypeId.AutoIncrement = false;
				colvarObjectTypeId.IsNullable = false;
				colvarObjectTypeId.IsPrimaryKey = false;
				colvarObjectTypeId.IsForeignKey = false;
				colvarObjectTypeId.IsReadOnly = false;
				colvarObjectTypeId.DefaultSetting = @"";
				colvarObjectTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObjectTypeId);
				
				TableSchema.TableColumn colvarRoomDept = new TableSchema.TableColumn(schema);
				colvarRoomDept.ColumnName = "Room_Dept";
				colvarRoomDept.DataType = DbType.Int16;
				colvarRoomDept.MaxLength = 0;
				colvarRoomDept.AutoIncrement = false;
				colvarRoomDept.IsNullable = false;
				colvarRoomDept.IsPrimaryKey = false;
				colvarRoomDept.IsForeignKey = false;
				colvarRoomDept.IsReadOnly = false;
				colvarRoomDept.DefaultSetting = @"";
				colvarRoomDept.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoomDept);
				
				TableSchema.TableColumn colvarPrice = new TableSchema.TableColumn(schema);
				colvarPrice.ColumnName = "Price";
				colvarPrice.DataType = DbType.Decimal;
				colvarPrice.MaxLength = 0;
				colvarPrice.AutoIncrement = false;
				colvarPrice.IsNullable = false;
				colvarPrice.IsPrimaryKey = false;
				colvarPrice.IsForeignKey = false;
				colvarPrice.IsReadOnly = false;
				colvarPrice.DefaultSetting = @"";
				colvarPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrice);
				
				TableSchema.TableColumn colvarSurcharge = new TableSchema.TableColumn(schema);
				colvarSurcharge.ColumnName = "Surcharge";
				colvarSurcharge.DataType = DbType.Decimal;
				colvarSurcharge.MaxLength = 0;
				colvarSurcharge.AutoIncrement = false;
				colvarSurcharge.IsNullable = true;
				colvarSurcharge.IsPrimaryKey = false;
				colvarSurcharge.IsForeignKey = false;
				colvarSurcharge.IsReadOnly = false;
				colvarSurcharge.DefaultSetting = @"";
				colvarSurcharge.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurcharge);
				
				TableSchema.TableColumn colvarMaDtuong = new TableSchema.TableColumn(schema);
				colvarMaDtuong.ColumnName = "MA_DTUONG";
				colvarMaDtuong.DataType = DbType.String;
				colvarMaDtuong.MaxLength = 50;
				colvarMaDtuong.AutoIncrement = false;
				colvarMaDtuong.IsNullable = true;
				colvarMaDtuong.IsPrimaryKey = false;
				colvarMaDtuong.IsForeignKey = false;
				colvarMaDtuong.IsReadOnly = false;
				colvarMaDtuong.DefaultSetting = @"";
				colvarMaDtuong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaDtuong);
				
				TableSchema.TableColumn colvarThuTu = new TableSchema.TableColumn(schema);
				colvarThuTu.ColumnName = "THU_TU";
				colvarThuTu.DataType = DbType.Int32;
				colvarThuTu.MaxLength = 0;
				colvarThuTu.AutoIncrement = false;
				colvarThuTu.IsNullable = true;
				colvarThuTu.IsPrimaryKey = false;
				colvarThuTu.IsForeignKey = false;
				colvarThuTu.IsReadOnly = false;
				colvarThuTu.DefaultSetting = @"";
				colvarThuTu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThuTu);
				
				TableSchema.TableColumn colvarIsPayment = new TableSchema.TableColumn(schema);
				colvarIsPayment.ColumnName = "IsPayment";
				colvarIsPayment.DataType = DbType.Byte;
				colvarIsPayment.MaxLength = 0;
				colvarIsPayment.AutoIncrement = false;
				colvarIsPayment.IsNullable = true;
				colvarIsPayment.IsPrimaryKey = false;
				colvarIsPayment.IsForeignKey = false;
				colvarIsPayment.IsReadOnly = false;
				
						colvarIsPayment.DefaultSetting = @"((0))";
				colvarIsPayment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPayment);
				
				TableSchema.TableColumn colvarIdPhiKtheo = new TableSchema.TableColumn(schema);
				colvarIdPhiKtheo.ColumnName = "ID_PHI_KTHEO";
				colvarIdPhiKtheo.DataType = DbType.Int32;
				colvarIdPhiKtheo.MaxLength = 0;
				colvarIdPhiKtheo.AutoIncrement = false;
				colvarIdPhiKtheo.IsNullable = true;
				colvarIdPhiKtheo.IsPrimaryKey = false;
				colvarIdPhiKtheo.IsForeignKey = false;
				colvarIdPhiKtheo.IsReadOnly = false;
				colvarIdPhiKtheo.DefaultSetting = @"";
				colvarIdPhiKtheo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhiKtheo);
				
				TableSchema.TableColumn colvarIdPhiKtheoNgio = new TableSchema.TableColumn(schema);
				colvarIdPhiKtheoNgio.ColumnName = "ID_PHI_KTHEO_NGIO";
				colvarIdPhiKtheoNgio.DataType = DbType.Int32;
				colvarIdPhiKtheoNgio.MaxLength = 0;
				colvarIdPhiKtheoNgio.AutoIncrement = false;
				colvarIdPhiKtheoNgio.IsNullable = true;
				colvarIdPhiKtheoNgio.IsPrimaryKey = false;
				colvarIdPhiKtheoNgio.IsForeignKey = false;
				colvarIdPhiKtheoNgio.IsReadOnly = false;
				colvarIdPhiKtheoNgio.DefaultSetting = @"";
				colvarIdPhiKtheoNgio.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhiKtheoNgio);
				
				TableSchema.TableColumn colvarGhiChu = new TableSchema.TableColumn(schema);
				colvarGhiChu.ColumnName = "Ghi_Chu";
				colvarGhiChu.DataType = DbType.String;
				colvarGhiChu.MaxLength = 50;
				colvarGhiChu.AutoIncrement = false;
				colvarGhiChu.IsNullable = true;
				colvarGhiChu.IsPrimaryKey = false;
				colvarGhiChu.IsForeignKey = false;
				colvarGhiChu.IsReadOnly = false;
				colvarGhiChu.DefaultSetting = @"";
				colvarGhiChu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGhiChu);
				
				TableSchema.TableColumn colvarDonGiaNGio = new TableSchema.TableColumn(schema);
				colvarDonGiaNGio.ColumnName = "DonGia_NGio";
				colvarDonGiaNGio.DataType = DbType.Decimal;
				colvarDonGiaNGio.MaxLength = 0;
				colvarDonGiaNGio.AutoIncrement = false;
				colvarDonGiaNGio.IsNullable = true;
				colvarDonGiaNGio.IsPrimaryKey = false;
				colvarDonGiaNGio.IsForeignKey = false;
				colvarDonGiaNGio.IsReadOnly = false;
				colvarDonGiaNGio.DefaultSetting = @"";
				colvarDonGiaNGio.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDonGiaNGio);
				
				TableSchema.TableColumn colvarPhuThuNGio = new TableSchema.TableColumn(schema);
				colvarPhuThuNGio.ColumnName = "PhuThu_NGio";
				colvarPhuThuNGio.DataType = DbType.Decimal;
				colvarPhuThuNGio.MaxLength = 0;
				colvarPhuThuNGio.AutoIncrement = false;
				colvarPhuThuNGio.IsNullable = true;
				colvarPhuThuNGio.IsPrimaryKey = false;
				colvarPhuThuNGio.IsForeignKey = false;
				colvarPhuThuNGio.IsReadOnly = false;
				colvarPhuThuNGio.DefaultSetting = @"";
				colvarPhuThuNGio.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhuThuNGio);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_ExamType_Obj_Depart_Doctor_Relation",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Code")]
		[Bindable(true)]
		public string Code 
		{
			get { return GetColumnValue<string>(Columns.Code); }
			set { SetColumnValue(Columns.Code, value); }
		}
		  
		[XmlAttribute("Name")]
		[Bindable(true)]
		public string Name 
		{
			get { return GetColumnValue<string>(Columns.Name); }
			set { SetColumnValue(Columns.Name, value); }
		}
		  
		[XmlAttribute("ExamTypeId")]
		[Bindable(true)]
		public short ExamTypeId 
		{
			get { return GetColumnValue<short>(Columns.ExamTypeId); }
			set { SetColumnValue(Columns.ExamTypeId, value); }
		}
		  
		[XmlAttribute("DepartmentId")]
		[Bindable(true)]
		public short DepartmentId 
		{
			get { return GetColumnValue<short>(Columns.DepartmentId); }
			set { SetColumnValue(Columns.DepartmentId, value); }
		}
		  
		[XmlAttribute("DoctorId")]
		[Bindable(true)]
		public short DoctorId 
		{
			get { return GetColumnValue<short>(Columns.DoctorId); }
			set { SetColumnValue(Columns.DoctorId, value); }
		}
		  
		[XmlAttribute("ObjectTypeId")]
		[Bindable(true)]
		public short ObjectTypeId 
		{
			get { return GetColumnValue<short>(Columns.ObjectTypeId); }
			set { SetColumnValue(Columns.ObjectTypeId, value); }
		}
		  
		[XmlAttribute("RoomDept")]
		[Bindable(true)]
		public short RoomDept 
		{
			get { return GetColumnValue<short>(Columns.RoomDept); }
			set { SetColumnValue(Columns.RoomDept, value); }
		}
		  
		[XmlAttribute("Price")]
		[Bindable(true)]
		public decimal Price 
		{
			get { return GetColumnValue<decimal>(Columns.Price); }
			set { SetColumnValue(Columns.Price, value); }
		}
		  
		[XmlAttribute("Surcharge")]
		[Bindable(true)]
		public decimal? Surcharge 
		{
			get { return GetColumnValue<decimal?>(Columns.Surcharge); }
			set { SetColumnValue(Columns.Surcharge, value); }
		}
		  
		[XmlAttribute("MaDtuong")]
		[Bindable(true)]
		public string MaDtuong 
		{
			get { return GetColumnValue<string>(Columns.MaDtuong); }
			set { SetColumnValue(Columns.MaDtuong, value); }
		}
		  
		[XmlAttribute("ThuTu")]
		[Bindable(true)]
		public int? ThuTu 
		{
			get { return GetColumnValue<int?>(Columns.ThuTu); }
			set { SetColumnValue(Columns.ThuTu, value); }
		}
		  
		[XmlAttribute("IsPayment")]
		[Bindable(true)]
		public byte? IsPayment 
		{
			get { return GetColumnValue<byte?>(Columns.IsPayment); }
			set { SetColumnValue(Columns.IsPayment, value); }
		}
		  
		[XmlAttribute("IdPhiKtheo")]
		[Bindable(true)]
		public int? IdPhiKtheo 
		{
			get { return GetColumnValue<int?>(Columns.IdPhiKtheo); }
			set { SetColumnValue(Columns.IdPhiKtheo, value); }
		}
		  
		[XmlAttribute("IdPhiKtheoNgio")]
		[Bindable(true)]
		public int? IdPhiKtheoNgio 
		{
			get { return GetColumnValue<int?>(Columns.IdPhiKtheoNgio); }
			set { SetColumnValue(Columns.IdPhiKtheoNgio, value); }
		}
		  
		[XmlAttribute("GhiChu")]
		[Bindable(true)]
		public string GhiChu 
		{
			get { return GetColumnValue<string>(Columns.GhiChu); }
			set { SetColumnValue(Columns.GhiChu, value); }
		}
		  
		[XmlAttribute("DonGiaNGio")]
		[Bindable(true)]
		public decimal? DonGiaNGio 
		{
			get { return GetColumnValue<decimal?>(Columns.DonGiaNGio); }
			set { SetColumnValue(Columns.DonGiaNGio, value); }
		}
		  
		[XmlAttribute("PhuThuNGio")]
		[Bindable(true)]
		public decimal? PhuThuNGio 
		{
			get { return GetColumnValue<decimal?>(Columns.PhuThuNGio); }
			set { SetColumnValue(Columns.PhuThuNGio, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varCode,string varName,short varExamTypeId,short varDepartmentId,short varDoctorId,short varObjectTypeId,short varRoomDept,decimal varPrice,decimal? varSurcharge,string varMaDtuong,int? varThuTu,byte? varIsPayment,int? varIdPhiKtheo,int? varIdPhiKtheoNgio,string varGhiChu,decimal? varDonGiaNGio,decimal? varPhuThuNGio)
		{
			LExamTypeObjDepartDoctorRelation item = new LExamTypeObjDepartDoctorRelation();
			
			item.Code = varCode;
			
			item.Name = varName;
			
			item.ExamTypeId = varExamTypeId;
			
			item.DepartmentId = varDepartmentId;
			
			item.DoctorId = varDoctorId;
			
			item.ObjectTypeId = varObjectTypeId;
			
			item.RoomDept = varRoomDept;
			
			item.Price = varPrice;
			
			item.Surcharge = varSurcharge;
			
			item.MaDtuong = varMaDtuong;
			
			item.ThuTu = varThuTu;
			
			item.IsPayment = varIsPayment;
			
			item.IdPhiKtheo = varIdPhiKtheo;
			
			item.IdPhiKtheoNgio = varIdPhiKtheoNgio;
			
			item.GhiChu = varGhiChu;
			
			item.DonGiaNGio = varDonGiaNGio;
			
			item.PhuThuNGio = varPhuThuNGio;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varCode,string varName,short varExamTypeId,short varDepartmentId,short varDoctorId,short varObjectTypeId,short varRoomDept,decimal varPrice,decimal? varSurcharge,string varMaDtuong,int? varThuTu,byte? varIsPayment,int? varIdPhiKtheo,int? varIdPhiKtheoNgio,string varGhiChu,decimal? varDonGiaNGio,decimal? varPhuThuNGio)
		{
			LExamTypeObjDepartDoctorRelation item = new LExamTypeObjDepartDoctorRelation();
			
				item.Id = varId;
			
				item.Code = varCode;
			
				item.Name = varName;
			
				item.ExamTypeId = varExamTypeId;
			
				item.DepartmentId = varDepartmentId;
			
				item.DoctorId = varDoctorId;
			
				item.ObjectTypeId = varObjectTypeId;
			
				item.RoomDept = varRoomDept;
			
				item.Price = varPrice;
			
				item.Surcharge = varSurcharge;
			
				item.MaDtuong = varMaDtuong;
			
				item.ThuTu = varThuTu;
			
				item.IsPayment = varIsPayment;
			
				item.IdPhiKtheo = varIdPhiKtheo;
			
				item.IdPhiKtheoNgio = varIdPhiKtheoNgio;
			
				item.GhiChu = varGhiChu;
			
				item.DonGiaNGio = varDonGiaNGio;
			
				item.PhuThuNGio = varPhuThuNGio;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ExamTypeIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DoctorIdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ObjectTypeIdColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn RoomDeptColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SurchargeColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn MaDtuongColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ThuTuColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn IsPaymentColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn IdPhiKtheoColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn IdPhiKtheoNgioColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn GhiChuColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn DonGiaNGioColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn PhuThuNGioColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string Code = @"_Code";
			 public static string Name = @"_Name";
			 public static string ExamTypeId = @"ExamType_ID";
			 public static string DepartmentId = @"Department_ID";
			 public static string DoctorId = @"Doctor_ID";
			 public static string ObjectTypeId = @"ObjectType_ID";
			 public static string RoomDept = @"Room_Dept";
			 public static string Price = @"Price";
			 public static string Surcharge = @"Surcharge";
			 public static string MaDtuong = @"MA_DTUONG";
			 public static string ThuTu = @"THU_TU";
			 public static string IsPayment = @"IsPayment";
			 public static string IdPhiKtheo = @"ID_PHI_KTHEO";
			 public static string IdPhiKtheoNgio = @"ID_PHI_KTHEO_NGIO";
			 public static string GhiChu = @"Ghi_Chu";
			 public static string DonGiaNGio = @"DonGia_NGio";
			 public static string PhuThuNGio = @"PhuThu_NGio";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
