using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LObjectType class.
	/// </summary>
    [Serializable]
	public partial class LObjectTypeCollection : ActiveList<LObjectType, LObjectTypeCollection>
	{	   
		public LObjectTypeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LObjectTypeCollection</returns>
		public LObjectTypeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LObjectType o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_Object_Type table.
	/// </summary>
	[Serializable]
	public partial class LObjectType : ActiveRecord<LObjectType>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LObjectType()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LObjectType(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LObjectType(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LObjectType(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_Object_Type", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarObjectTypeId = new TableSchema.TableColumn(schema);
				colvarObjectTypeId.ColumnName = "ObjectType_ID";
				colvarObjectTypeId.DataType = DbType.Int16;
				colvarObjectTypeId.MaxLength = 0;
				colvarObjectTypeId.AutoIncrement = true;
				colvarObjectTypeId.IsNullable = false;
				colvarObjectTypeId.IsPrimaryKey = true;
				colvarObjectTypeId.IsForeignKey = false;
				colvarObjectTypeId.IsReadOnly = false;
				colvarObjectTypeId.DefaultSetting = @"";
				colvarObjectTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObjectTypeId);
				
				TableSchema.TableColumn colvarObjectTypeName = new TableSchema.TableColumn(schema);
				colvarObjectTypeName.ColumnName = "ObjectType_Name";
				colvarObjectTypeName.DataType = DbType.String;
				colvarObjectTypeName.MaxLength = 100;
				colvarObjectTypeName.AutoIncrement = false;
				colvarObjectTypeName.IsNullable = false;
				colvarObjectTypeName.IsPrimaryKey = false;
				colvarObjectTypeName.IsForeignKey = false;
				colvarObjectTypeName.IsReadOnly = false;
				colvarObjectTypeName.DefaultSetting = @"";
				colvarObjectTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObjectTypeName);
				
				TableSchema.TableColumn colvarInsuranceLevel = new TableSchema.TableColumn(schema);
				colvarInsuranceLevel.ColumnName = "Insurance_Level";
				colvarInsuranceLevel.DataType = DbType.Int16;
				colvarInsuranceLevel.MaxLength = 0;
				colvarInsuranceLevel.AutoIncrement = false;
				colvarInsuranceLevel.IsNullable = false;
				colvarInsuranceLevel.IsPrimaryKey = false;
				colvarInsuranceLevel.IsForeignKey = false;
				colvarInsuranceLevel.IsReadOnly = false;
				colvarInsuranceLevel.DefaultSetting = @"";
				colvarInsuranceLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInsuranceLevel);
				
				TableSchema.TableColumn colvarViewType = new TableSchema.TableColumn(schema);
				colvarViewType.ColumnName = "View_Type";
				colvarViewType.DataType = DbType.Byte;
				colvarViewType.MaxLength = 0;
				colvarViewType.AutoIncrement = false;
				colvarViewType.IsNullable = false;
				colvarViewType.IsPrimaryKey = false;
				colvarViewType.IsForeignKey = false;
				colvarViewType.IsReadOnly = false;
				
						colvarViewType.DefaultSetting = @"((0))";
				colvarViewType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarViewType);
				
				TableSchema.TableColumn colvarIntOrder = new TableSchema.TableColumn(schema);
				colvarIntOrder.ColumnName = "intOrder";
				colvarIntOrder.DataType = DbType.Int16;
				colvarIntOrder.MaxLength = 0;
				colvarIntOrder.AutoIncrement = false;
				colvarIntOrder.IsNullable = false;
				colvarIntOrder.IsPrimaryKey = false;
				colvarIntOrder.IsForeignKey = false;
				colvarIntOrder.IsReadOnly = false;
				colvarIntOrder.DefaultSetting = @"";
				colvarIntOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIntOrder);
				
				TableSchema.TableColumn colvarDiscountCorrectLine = new TableSchema.TableColumn(schema);
				colvarDiscountCorrectLine.ColumnName = "DiscountCorrectLine";
				colvarDiscountCorrectLine.DataType = DbType.Decimal;
				colvarDiscountCorrectLine.MaxLength = 0;
				colvarDiscountCorrectLine.AutoIncrement = false;
				colvarDiscountCorrectLine.IsNullable = false;
				colvarDiscountCorrectLine.IsPrimaryKey = false;
				colvarDiscountCorrectLine.IsForeignKey = false;
				colvarDiscountCorrectLine.IsReadOnly = false;
				colvarDiscountCorrectLine.DefaultSetting = @"";
				colvarDiscountCorrectLine.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiscountCorrectLine);
				
				TableSchema.TableColumn colvarDiscountDiscorrectLine = new TableSchema.TableColumn(schema);
				colvarDiscountDiscorrectLine.ColumnName = "DiscountDiscorrectLine";
				colvarDiscountDiscorrectLine.DataType = DbType.Decimal;
				colvarDiscountDiscorrectLine.MaxLength = 0;
				colvarDiscountDiscorrectLine.AutoIncrement = false;
				colvarDiscountDiscorrectLine.IsNullable = true;
				colvarDiscountDiscorrectLine.IsPrimaryKey = false;
				colvarDiscountDiscorrectLine.IsForeignKey = false;
				colvarDiscountDiscorrectLine.IsReadOnly = false;
				colvarDiscountDiscorrectLine.DefaultSetting = @"";
				colvarDiscountDiscorrectLine.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiscountDiscorrectLine);
				
				TableSchema.TableColumn colvarObjectTypeType = new TableSchema.TableColumn(schema);
				colvarObjectTypeType.ColumnName = "ObjectType_Type";
				colvarObjectTypeType.DataType = DbType.Byte;
				colvarObjectTypeType.MaxLength = 0;
				colvarObjectTypeType.AutoIncrement = false;
				colvarObjectTypeType.IsNullable = false;
				colvarObjectTypeType.IsPrimaryKey = false;
				colvarObjectTypeType.IsForeignKey = false;
				colvarObjectTypeType.IsReadOnly = false;
				
						colvarObjectTypeType.DefaultSetting = @"((0))";
				colvarObjectTypeType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObjectTypeType);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 255;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				TableSchema.TableColumn colvarObjectTypeCode = new TableSchema.TableColumn(schema);
				colvarObjectTypeCode.ColumnName = "ObjectType_Code";
				colvarObjectTypeCode.DataType = DbType.String;
				colvarObjectTypeCode.MaxLength = 20;
				colvarObjectTypeCode.AutoIncrement = false;
				colvarObjectTypeCode.IsNullable = true;
				colvarObjectTypeCode.IsPrimaryKey = false;
				colvarObjectTypeCode.IsForeignKey = false;
				colvarObjectTypeCode.IsReadOnly = false;
				colvarObjectTypeCode.DefaultSetting = @"";
				colvarObjectTypeCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObjectTypeCode);
				
				TableSchema.TableColumn colvarTenDonThuoc = new TableSchema.TableColumn(schema);
				colvarTenDonThuoc.ColumnName = "TEN_DON_THUOC";
				colvarTenDonThuoc.DataType = DbType.String;
				colvarTenDonThuoc.MaxLength = 100;
				colvarTenDonThuoc.AutoIncrement = false;
				colvarTenDonThuoc.IsNullable = true;
				colvarTenDonThuoc.IsPrimaryKey = false;
				colvarTenDonThuoc.IsForeignKey = false;
				colvarTenDonThuoc.IsReadOnly = false;
				colvarTenDonThuoc.DefaultSetting = @"";
				colvarTenDonThuoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenDonThuoc);
				
				TableSchema.TableColumn colvarKeTaiQthuoc = new TableSchema.TableColumn(schema);
				colvarKeTaiQthuoc.ColumnName = "KE_TAI_QTHUOC";
				colvarKeTaiQthuoc.DataType = DbType.Byte;
				colvarKeTaiQthuoc.MaxLength = 0;
				colvarKeTaiQthuoc.AutoIncrement = false;
				colvarKeTaiQthuoc.IsNullable = true;
				colvarKeTaiQthuoc.IsPrimaryKey = false;
				colvarKeTaiQthuoc.IsForeignKey = false;
				colvarKeTaiQthuoc.IsReadOnly = false;
				
						colvarKeTaiQthuoc.DefaultSetting = @"((0))";
				colvarKeTaiQthuoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKeTaiQthuoc);
				
				TableSchema.TableColumn colvarThanhToanKhamTiepDon = new TableSchema.TableColumn(schema);
				colvarThanhToanKhamTiepDon.ColumnName = "ThanhToan_Kham_TiepDon";
				colvarThanhToanKhamTiepDon.DataType = DbType.Byte;
				colvarThanhToanKhamTiepDon.MaxLength = 0;
				colvarThanhToanKhamTiepDon.AutoIncrement = false;
				colvarThanhToanKhamTiepDon.IsNullable = true;
				colvarThanhToanKhamTiepDon.IsPrimaryKey = false;
				colvarThanhToanKhamTiepDon.IsForeignKey = false;
				colvarThanhToanKhamTiepDon.IsReadOnly = false;
				
						colvarThanhToanKhamTiepDon.DefaultSetting = @"((0))";
				colvarThanhToanKhamTiepDon.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThanhToanKhamTiepDon);
				
				TableSchema.TableColumn colvarThanhToanClsTiepDon = new TableSchema.TableColumn(schema);
				colvarThanhToanClsTiepDon.ColumnName = "ThanhToan_Cls_TiepDon";
				colvarThanhToanClsTiepDon.DataType = DbType.Byte;
				colvarThanhToanClsTiepDon.MaxLength = 0;
				colvarThanhToanClsTiepDon.AutoIncrement = false;
				colvarThanhToanClsTiepDon.IsNullable = true;
				colvarThanhToanClsTiepDon.IsPrimaryKey = false;
				colvarThanhToanClsTiepDon.IsForeignKey = false;
				colvarThanhToanClsTiepDon.IsReadOnly = false;
				
						colvarThanhToanClsTiepDon.DefaultSetting = @"((0))";
				colvarThanhToanClsTiepDon.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThanhToanClsTiepDon);
				
				TableSchema.TableColumn colvarPtramBhytMoi = new TableSchema.TableColumn(schema);
				colvarPtramBhytMoi.ColumnName = "Ptram_Bhyt_Moi";
				colvarPtramBhytMoi.DataType = DbType.Int16;
				colvarPtramBhytMoi.MaxLength = 0;
				colvarPtramBhytMoi.AutoIncrement = false;
				colvarPtramBhytMoi.IsNullable = true;
				colvarPtramBhytMoi.IsPrimaryKey = false;
				colvarPtramBhytMoi.IsForeignKey = false;
				colvarPtramBhytMoi.IsReadOnly = false;
				
						colvarPtramBhytMoi.DefaultSetting = @"((0))";
				colvarPtramBhytMoi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPtramBhytMoi);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_Object_Type",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ObjectTypeId")]
		[Bindable(true)]
		public short ObjectTypeId 
		{
			get { return GetColumnValue<short>(Columns.ObjectTypeId); }
			set { SetColumnValue(Columns.ObjectTypeId, value); }
		}
		  
		[XmlAttribute("ObjectTypeName")]
		[Bindable(true)]
		public string ObjectTypeName 
		{
			get { return GetColumnValue<string>(Columns.ObjectTypeName); }
			set { SetColumnValue(Columns.ObjectTypeName, value); }
		}
		  
		[XmlAttribute("InsuranceLevel")]
		[Bindable(true)]
		public short InsuranceLevel 
		{
			get { return GetColumnValue<short>(Columns.InsuranceLevel); }
			set { SetColumnValue(Columns.InsuranceLevel, value); }
		}
		  
		[XmlAttribute("ViewType")]
		[Bindable(true)]
		public byte ViewType 
		{
			get { return GetColumnValue<byte>(Columns.ViewType); }
			set { SetColumnValue(Columns.ViewType, value); }
		}
		  
		[XmlAttribute("IntOrder")]
		[Bindable(true)]
		public short IntOrder 
		{
			get { return GetColumnValue<short>(Columns.IntOrder); }
			set { SetColumnValue(Columns.IntOrder, value); }
		}
		  
		[XmlAttribute("DiscountCorrectLine")]
		[Bindable(true)]
		public decimal DiscountCorrectLine 
		{
			get { return GetColumnValue<decimal>(Columns.DiscountCorrectLine); }
			set { SetColumnValue(Columns.DiscountCorrectLine, value); }
		}
		  
		[XmlAttribute("DiscountDiscorrectLine")]
		[Bindable(true)]
		public decimal? DiscountDiscorrectLine 
		{
			get { return GetColumnValue<decimal?>(Columns.DiscountDiscorrectLine); }
			set { SetColumnValue(Columns.DiscountDiscorrectLine, value); }
		}
		  
		[XmlAttribute("ObjectTypeType")]
		[Bindable(true)]
		public byte ObjectTypeType 
		{
			get { return GetColumnValue<byte>(Columns.ObjectTypeType); }
			set { SetColumnValue(Columns.ObjectTypeType, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		  
		[XmlAttribute("ObjectTypeCode")]
		[Bindable(true)]
		public string ObjectTypeCode 
		{
			get { return GetColumnValue<string>(Columns.ObjectTypeCode); }
			set { SetColumnValue(Columns.ObjectTypeCode, value); }
		}
		  
		[XmlAttribute("TenDonThuoc")]
		[Bindable(true)]
		public string TenDonThuoc 
		{
			get { return GetColumnValue<string>(Columns.TenDonThuoc); }
			set { SetColumnValue(Columns.TenDonThuoc, value); }
		}
		  
		[XmlAttribute("KeTaiQthuoc")]
		[Bindable(true)]
		public byte? KeTaiQthuoc 
		{
			get { return GetColumnValue<byte?>(Columns.KeTaiQthuoc); }
			set { SetColumnValue(Columns.KeTaiQthuoc, value); }
		}
		  
		[XmlAttribute("ThanhToanKhamTiepDon")]
		[Bindable(true)]
		public byte? ThanhToanKhamTiepDon 
		{
			get { return GetColumnValue<byte?>(Columns.ThanhToanKhamTiepDon); }
			set { SetColumnValue(Columns.ThanhToanKhamTiepDon, value); }
		}
		  
		[XmlAttribute("ThanhToanClsTiepDon")]
		[Bindable(true)]
		public byte? ThanhToanClsTiepDon 
		{
			get { return GetColumnValue<byte?>(Columns.ThanhToanClsTiepDon); }
			set { SetColumnValue(Columns.ThanhToanClsTiepDon, value); }
		}
		  
		[XmlAttribute("PtramBhytMoi")]
		[Bindable(true)]
		public short? PtramBhytMoi 
		{
			get { return GetColumnValue<short?>(Columns.PtramBhytMoi); }
			set { SetColumnValue(Columns.PtramBhytMoi, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varObjectTypeName,short varInsuranceLevel,byte varViewType,short varIntOrder,decimal varDiscountCorrectLine,decimal? varDiscountDiscorrectLine,byte varObjectTypeType,string varSDesc,string varObjectTypeCode,string varTenDonThuoc,byte? varKeTaiQthuoc,byte? varThanhToanKhamTiepDon,byte? varThanhToanClsTiepDon,short? varPtramBhytMoi)
		{
			LObjectType item = new LObjectType();
			
			item.ObjectTypeName = varObjectTypeName;
			
			item.InsuranceLevel = varInsuranceLevel;
			
			item.ViewType = varViewType;
			
			item.IntOrder = varIntOrder;
			
			item.DiscountCorrectLine = varDiscountCorrectLine;
			
			item.DiscountDiscorrectLine = varDiscountDiscorrectLine;
			
			item.ObjectTypeType = varObjectTypeType;
			
			item.SDesc = varSDesc;
			
			item.ObjectTypeCode = varObjectTypeCode;
			
			item.TenDonThuoc = varTenDonThuoc;
			
			item.KeTaiQthuoc = varKeTaiQthuoc;
			
			item.ThanhToanKhamTiepDon = varThanhToanKhamTiepDon;
			
			item.ThanhToanClsTiepDon = varThanhToanClsTiepDon;
			
			item.PtramBhytMoi = varPtramBhytMoi;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(short varObjectTypeId,string varObjectTypeName,short varInsuranceLevel,byte varViewType,short varIntOrder,decimal varDiscountCorrectLine,decimal? varDiscountDiscorrectLine,byte varObjectTypeType,string varSDesc,string varObjectTypeCode,string varTenDonThuoc,byte? varKeTaiQthuoc,byte? varThanhToanKhamTiepDon,byte? varThanhToanClsTiepDon,short? varPtramBhytMoi)
		{
			LObjectType item = new LObjectType();
			
				item.ObjectTypeId = varObjectTypeId;
			
				item.ObjectTypeName = varObjectTypeName;
			
				item.InsuranceLevel = varInsuranceLevel;
			
				item.ViewType = varViewType;
			
				item.IntOrder = varIntOrder;
			
				item.DiscountCorrectLine = varDiscountCorrectLine;
			
				item.DiscountDiscorrectLine = varDiscountDiscorrectLine;
			
				item.ObjectTypeType = varObjectTypeType;
			
				item.SDesc = varSDesc;
			
				item.ObjectTypeCode = varObjectTypeCode;
			
				item.TenDonThuoc = varTenDonThuoc;
			
				item.KeTaiQthuoc = varKeTaiQthuoc;
			
				item.ThanhToanKhamTiepDon = varThanhToanKhamTiepDon;
			
				item.ThanhToanClsTiepDon = varThanhToanClsTiepDon;
			
				item.PtramBhytMoi = varPtramBhytMoi;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ObjectTypeIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ObjectTypeNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn InsuranceLevelColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ViewTypeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IntOrderColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DiscountCorrectLineColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DiscountDiscorrectLineColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ObjectTypeTypeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ObjectTypeCodeColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn TenDonThuocColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn KeTaiQthuocColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ThanhToanKhamTiepDonColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ThanhToanClsTiepDonColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn PtramBhytMoiColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ObjectTypeId = @"ObjectType_ID";
			 public static string ObjectTypeName = @"ObjectType_Name";
			 public static string InsuranceLevel = @"Insurance_Level";
			 public static string ViewType = @"View_Type";
			 public static string IntOrder = @"intOrder";
			 public static string DiscountCorrectLine = @"DiscountCorrectLine";
			 public static string DiscountDiscorrectLine = @"DiscountDiscorrectLine";
			 public static string ObjectTypeType = @"ObjectType_Type";
			 public static string SDesc = @"sDesc";
			 public static string ObjectTypeCode = @"ObjectType_Code";
			 public static string TenDonThuoc = @"TEN_DON_THUOC";
			 public static string KeTaiQthuoc = @"KE_TAI_QTHUOC";
			 public static string ThanhToanKhamTiepDon = @"ThanhToan_Kham_TiepDon";
			 public static string ThanhToanClsTiepDon = @"ThanhToan_Cls_TiepDon";
			 public static string PtramBhytMoi = @"Ptram_Bhyt_Moi";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
