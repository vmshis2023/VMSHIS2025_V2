using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TNgaynamBnhanGoi class.
	/// </summary>
    [Serializable]
	public partial class TNgaynamBnhanGoiCollection : ActiveList<TNgaynamBnhanGoi, TNgaynamBnhanGoiCollection>
	{	   
		public TNgaynamBnhanGoiCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TNgaynamBnhanGoiCollection</returns>
		public TNgaynamBnhanGoiCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TNgaynamBnhanGoi o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_NGAYNAM_BNHAN_GOI table.
	/// </summary>
	[Serializable]
	public partial class TNgaynamBnhanGoi : ActiveRecord<TNgaynamBnhanGoi>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TNgaynamBnhanGoi()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TNgaynamBnhanGoi(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TNgaynamBnhanGoi(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TNgaynamBnhanGoi(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_NGAYNAM_BNHAN_GOI", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarPatientDeptId = new TableSchema.TableColumn(schema);
				colvarPatientDeptId.ColumnName = "PatientDept_ID";
				colvarPatientDeptId.DataType = DbType.Int32;
				colvarPatientDeptId.MaxLength = 0;
				colvarPatientDeptId.AutoIncrement = false;
				colvarPatientDeptId.IsNullable = true;
				colvarPatientDeptId.IsPrimaryKey = false;
				colvarPatientDeptId.IsForeignKey = false;
				colvarPatientDeptId.IsReadOnly = false;
				colvarPatientDeptId.DefaultSetting = @"";
				colvarPatientDeptId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientDeptId);
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "Patient_Code";
				colvarPatientCode.DataType = DbType.String;
				colvarPatientCode.MaxLength = 50;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = true;
				colvarPatientCode.IsPrimaryKey = false;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int32;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = true;
				colvarPatientId.IsPrimaryKey = false;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarRoomId = new TableSchema.TableColumn(schema);
				colvarRoomId.ColumnName = "Room_ID";
				colvarRoomId.DataType = DbType.Int32;
				colvarRoomId.MaxLength = 0;
				colvarRoomId.AutoIncrement = false;
				colvarRoomId.IsNullable = true;
				colvarRoomId.IsPrimaryKey = false;
				colvarRoomId.IsForeignKey = false;
				colvarRoomId.IsReadOnly = false;
				colvarRoomId.DefaultSetting = @"";
				colvarRoomId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoomId);
				
				TableSchema.TableColumn colvarBedId = new TableSchema.TableColumn(schema);
				colvarBedId.ColumnName = "Bed_ID";
				colvarBedId.DataType = DbType.Int32;
				colvarBedId.MaxLength = 0;
				colvarBedId.AutoIncrement = false;
				colvarBedId.IsNullable = true;
				colvarBedId.IsPrimaryKey = false;
				colvarBedId.IsForeignKey = false;
				colvarBedId.IsReadOnly = false;
				colvarBedId.DefaultSetting = @"";
				colvarBedId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedId);
				
				TableSchema.TableColumn colvarUnitId = new TableSchema.TableColumn(schema);
				colvarUnitId.ColumnName = "Unit_ID";
				colvarUnitId.DataType = DbType.Int16;
				colvarUnitId.MaxLength = 0;
				colvarUnitId.AutoIncrement = false;
				colvarUnitId.IsNullable = true;
				colvarUnitId.IsPrimaryKey = false;
				colvarUnitId.IsForeignKey = false;
				colvarUnitId.IsReadOnly = false;
				colvarUnitId.DefaultSetting = @"";
				colvarUnitId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitId);
				
				TableSchema.TableColumn colvarSoLuong = new TableSchema.TableColumn(schema);
				colvarSoLuong.ColumnName = "SO_LUONG";
				colvarSoLuong.DataType = DbType.Int32;
				colvarSoLuong.MaxLength = 0;
				colvarSoLuong.AutoIncrement = false;
				colvarSoLuong.IsNullable = true;
				colvarSoLuong.IsPrimaryKey = false;
				colvarSoLuong.IsForeignKey = false;
				colvarSoLuong.IsReadOnly = false;
				colvarSoLuong.DefaultSetting = @"";
				colvarSoLuong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoLuong);
				
				TableSchema.TableColumn colvarDonGia = new TableSchema.TableColumn(schema);
				colvarDonGia.ColumnName = "DON_GIA";
				colvarDonGia.DataType = DbType.Decimal;
				colvarDonGia.MaxLength = 0;
				colvarDonGia.AutoIncrement = false;
				colvarDonGia.IsNullable = true;
				colvarDonGia.IsPrimaryKey = false;
				colvarDonGia.IsForeignKey = false;
				colvarDonGia.IsReadOnly = false;
				colvarDonGia.DefaultSetting = @"";
				colvarDonGia.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDonGia);
				
				TableSchema.TableColumn colvarPhuThu = new TableSchema.TableColumn(schema);
				colvarPhuThu.ColumnName = "PHU_THU";
				colvarPhuThu.DataType = DbType.Decimal;
				colvarPhuThu.MaxLength = 0;
				colvarPhuThu.AutoIncrement = false;
				colvarPhuThu.IsNullable = true;
				colvarPhuThu.IsPrimaryKey = false;
				colvarPhuThu.IsForeignKey = false;
				colvarPhuThu.IsReadOnly = false;
				colvarPhuThu.DefaultSetting = @"";
				colvarPhuThu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhuThu);
				
				TableSchema.TableColumn colvarBnct = new TableSchema.TableColumn(schema);
				colvarBnct.ColumnName = "BNCT";
				colvarBnct.DataType = DbType.Decimal;
				colvarBnct.MaxLength = 0;
				colvarBnct.AutoIncrement = false;
				colvarBnct.IsNullable = true;
				colvarBnct.IsPrimaryKey = false;
				colvarBnct.IsForeignKey = false;
				colvarBnct.IsReadOnly = false;
				colvarBnct.DefaultSetting = @"";
				colvarBnct.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBnct);
				
				TableSchema.TableColumn colvarBhct = new TableSchema.TableColumn(schema);
				colvarBhct.ColumnName = "BHCT";
				colvarBhct.DataType = DbType.Decimal;
				colvarBhct.MaxLength = 0;
				colvarBhct.AutoIncrement = false;
				colvarBhct.IsNullable = true;
				colvarBhct.IsPrimaryKey = false;
				colvarBhct.IsForeignKey = false;
				colvarBhct.IsReadOnly = false;
				colvarBhct.DefaultSetting = @"";
				colvarBhct.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBhct);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "NGUOI_TAO";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 50;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NGAY_TAO";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarBedType = new TableSchema.TableColumn(schema);
				colvarBedType.ColumnName = "Bed_Type";
				colvarBedType.DataType = DbType.Int32;
				colvarBedType.MaxLength = 0;
				colvarBedType.AutoIncrement = false;
				colvarBedType.IsNullable = true;
				colvarBedType.IsPrimaryKey = false;
				colvarBedType.IsForeignKey = false;
				colvarBedType.IsReadOnly = false;
				
						colvarBedType.DefaultSetting = @"((0))";
				colvarBedType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedType);
				
				TableSchema.TableColumn colvarIsPayment = new TableSchema.TableColumn(schema);
				colvarIsPayment.ColumnName = "IsPayment";
				colvarIsPayment.DataType = DbType.Int32;
				colvarIsPayment.MaxLength = 0;
				colvarIsPayment.AutoIncrement = false;
				colvarIsPayment.IsNullable = true;
				colvarIsPayment.IsPrimaryKey = false;
				colvarIsPayment.IsForeignKey = false;
				colvarIsPayment.IsReadOnly = false;
				colvarIsPayment.DefaultSetting = @"";
				colvarIsPayment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPayment);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_NGAYNAM_BNHAN_GOI",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("PatientDeptId")]
		[Bindable(true)]
		public int? PatientDeptId 
		{
			get { return GetColumnValue<int?>(Columns.PatientDeptId); }
			set { SetColumnValue(Columns.PatientDeptId, value); }
		}
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public int? PatientId 
		{
			get { return GetColumnValue<int?>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("RoomId")]
		[Bindable(true)]
		public int? RoomId 
		{
			get { return GetColumnValue<int?>(Columns.RoomId); }
			set { SetColumnValue(Columns.RoomId, value); }
		}
		  
		[XmlAttribute("BedId")]
		[Bindable(true)]
		public int? BedId 
		{
			get { return GetColumnValue<int?>(Columns.BedId); }
			set { SetColumnValue(Columns.BedId, value); }
		}
		  
		[XmlAttribute("UnitId")]
		[Bindable(true)]
		public short? UnitId 
		{
			get { return GetColumnValue<short?>(Columns.UnitId); }
			set { SetColumnValue(Columns.UnitId, value); }
		}
		  
		[XmlAttribute("SoLuong")]
		[Bindable(true)]
		public int? SoLuong 
		{
			get { return GetColumnValue<int?>(Columns.SoLuong); }
			set { SetColumnValue(Columns.SoLuong, value); }
		}
		  
		[XmlAttribute("DonGia")]
		[Bindable(true)]
		public decimal? DonGia 
		{
			get { return GetColumnValue<decimal?>(Columns.DonGia); }
			set { SetColumnValue(Columns.DonGia, value); }
		}
		  
		[XmlAttribute("PhuThu")]
		[Bindable(true)]
		public decimal? PhuThu 
		{
			get { return GetColumnValue<decimal?>(Columns.PhuThu); }
			set { SetColumnValue(Columns.PhuThu, value); }
		}
		  
		[XmlAttribute("Bnct")]
		[Bindable(true)]
		public decimal? Bnct 
		{
			get { return GetColumnValue<decimal?>(Columns.Bnct); }
			set { SetColumnValue(Columns.Bnct, value); }
		}
		  
		[XmlAttribute("Bhct")]
		[Bindable(true)]
		public decimal? Bhct 
		{
			get { return GetColumnValue<decimal?>(Columns.Bhct); }
			set { SetColumnValue(Columns.Bhct, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("BedType")]
		[Bindable(true)]
		public int? BedType 
		{
			get { return GetColumnValue<int?>(Columns.BedType); }
			set { SetColumnValue(Columns.BedType, value); }
		}
		  
		[XmlAttribute("IsPayment")]
		[Bindable(true)]
		public int? IsPayment 
		{
			get { return GetColumnValue<int?>(Columns.IsPayment); }
			set { SetColumnValue(Columns.IsPayment, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varPatientDeptId,string varPatientCode,int? varPatientId,int? varRoomId,int? varBedId,short? varUnitId,int? varSoLuong,decimal? varDonGia,decimal? varPhuThu,decimal? varBnct,decimal? varBhct,string varNguoiTao,DateTime? varNgayTao,int? varBedType,int? varIsPayment)
		{
			TNgaynamBnhanGoi item = new TNgaynamBnhanGoi();
			
			item.PatientDeptId = varPatientDeptId;
			
			item.PatientCode = varPatientCode;
			
			item.PatientId = varPatientId;
			
			item.RoomId = varRoomId;
			
			item.BedId = varBedId;
			
			item.UnitId = varUnitId;
			
			item.SoLuong = varSoLuong;
			
			item.DonGia = varDonGia;
			
			item.PhuThu = varPhuThu;
			
			item.Bnct = varBnct;
			
			item.Bhct = varBhct;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayTao = varNgayTao;
			
			item.BedType = varBedType;
			
			item.IsPayment = varIsPayment;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varPatientDeptId,string varPatientCode,int? varPatientId,int? varRoomId,int? varBedId,short? varUnitId,int? varSoLuong,decimal? varDonGia,decimal? varPhuThu,decimal? varBnct,decimal? varBhct,string varNguoiTao,DateTime? varNgayTao,int? varBedType,int? varIsPayment)
		{
			TNgaynamBnhanGoi item = new TNgaynamBnhanGoi();
			
				item.Id = varId;
			
				item.PatientDeptId = varPatientDeptId;
			
				item.PatientCode = varPatientCode;
			
				item.PatientId = varPatientId;
			
				item.RoomId = varRoomId;
			
				item.BedId = varBedId;
			
				item.UnitId = varUnitId;
			
				item.SoLuong = varSoLuong;
			
				item.DonGia = varDonGia;
			
				item.PhuThu = varPhuThu;
			
				item.Bnct = varBnct;
			
				item.Bhct = varBhct;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayTao = varNgayTao;
			
				item.BedType = varBedType;
			
				item.IsPayment = varIsPayment;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientDeptIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn RoomIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn BedIdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitIdColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SoLuongColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DonGiaColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PhuThuColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn BnctColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn BhctColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn BedTypeColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn IsPaymentColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string PatientDeptId = @"PatientDept_ID";
			 public static string PatientCode = @"Patient_Code";
			 public static string PatientId = @"Patient_ID";
			 public static string RoomId = @"Room_ID";
			 public static string BedId = @"Bed_ID";
			 public static string UnitId = @"Unit_ID";
			 public static string SoLuong = @"SO_LUONG";
			 public static string DonGia = @"DON_GIA";
			 public static string PhuThu = @"PHU_THU";
			 public static string Bnct = @"BNCT";
			 public static string Bhct = @"BHCT";
			 public static string NguoiTao = @"NGUOI_TAO";
			 public static string NgayTao = @"NGAY_TAO";
			 public static string BedType = @"Bed_Type";
			 public static string IsPayment = @"IsPayment";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
