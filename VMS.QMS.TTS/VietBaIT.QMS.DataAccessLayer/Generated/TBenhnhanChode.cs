using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TBenhnhanChode class.
	/// </summary>
    [Serializable]
	public partial class TBenhnhanChodeCollection : ActiveList<TBenhnhanChode, TBenhnhanChodeCollection>
	{	   
		public TBenhnhanChodeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TBenhnhanChodeCollection</returns>
		public TBenhnhanChodeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TBenhnhanChode o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_BENHNHAN_CHODE table.
	/// </summary>
	[Serializable]
	public partial class TBenhnhanChode : ActiveRecord<TBenhnhanChode>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TBenhnhanChode()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TBenhnhanChode(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TBenhnhanChode(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TBenhnhanChode(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_BENHNHAN_CHODE", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPatientDeptId = new TableSchema.TableColumn(schema);
				colvarPatientDeptId.ColumnName = "PatientDept_ID";
				colvarPatientDeptId.DataType = DbType.Int32;
				colvarPatientDeptId.MaxLength = 0;
				colvarPatientDeptId.AutoIncrement = false;
				colvarPatientDeptId.IsNullable = false;
				colvarPatientDeptId.IsPrimaryKey = true;
				colvarPatientDeptId.IsForeignKey = false;
				colvarPatientDeptId.IsReadOnly = false;
				colvarPatientDeptId.DefaultSetting = @"";
				colvarPatientDeptId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientDeptId);
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "Patient_Code";
				colvarPatientCode.DataType = DbType.String;
				colvarPatientCode.MaxLength = 50;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = false;
				colvarPatientCode.IsPrimaryKey = false;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int32;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = false;
				colvarPatientId.IsPrimaryKey = false;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarDepartmentId = new TableSchema.TableColumn(schema);
				colvarDepartmentId.ColumnName = "Department_ID";
				colvarDepartmentId.DataType = DbType.Int32;
				colvarDepartmentId.MaxLength = 0;
				colvarDepartmentId.AutoIncrement = false;
				colvarDepartmentId.IsNullable = false;
				colvarDepartmentId.IsPrimaryKey = false;
				colvarDepartmentId.IsForeignKey = false;
				colvarDepartmentId.IsReadOnly = false;
				colvarDepartmentId.DefaultSetting = @"";
				colvarDepartmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentId);
				
				TableSchema.TableColumn colvarRoomId = new TableSchema.TableColumn(schema);
				colvarRoomId.ColumnName = "Room_ID";
				colvarRoomId.DataType = DbType.Int32;
				colvarRoomId.MaxLength = 0;
				colvarRoomId.AutoIncrement = false;
				colvarRoomId.IsNullable = true;
				colvarRoomId.IsPrimaryKey = false;
				colvarRoomId.IsForeignKey = false;
				colvarRoomId.IsReadOnly = false;
				colvarRoomId.DefaultSetting = @"";
				colvarRoomId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoomId);
				
				TableSchema.TableColumn colvarBedId = new TableSchema.TableColumn(schema);
				colvarBedId.ColumnName = "Bed_ID";
				colvarBedId.DataType = DbType.Int32;
				colvarBedId.MaxLength = 0;
				colvarBedId.AutoIncrement = false;
				colvarBedId.IsNullable = true;
				colvarBedId.IsPrimaryKey = false;
				colvarBedId.IsForeignKey = false;
				colvarBedId.IsReadOnly = false;
				colvarBedId.DefaultSetting = @"";
				colvarBedId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedId);
				
				TableSchema.TableColumn colvarTranThaiDe = new TableSchema.TableColumn(schema);
				colvarTranThaiDe.ColumnName = "TRAN_THAI_DE";
				colvarTranThaiDe.DataType = DbType.Int32;
				colvarTranThaiDe.MaxLength = 0;
				colvarTranThaiDe.AutoIncrement = false;
				colvarTranThaiDe.IsNullable = true;
				colvarTranThaiDe.IsPrimaryKey = false;
				colvarTranThaiDe.IsForeignKey = false;
				colvarTranThaiDe.IsReadOnly = false;
				
						colvarTranThaiDe.DefaultSetting = @"((0))";
				colvarTranThaiDe.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTranThaiDe);
				
				TableSchema.TableColumn colvarNgayChuyenDe = new TableSchema.TableColumn(schema);
				colvarNgayChuyenDe.ColumnName = "NGAY_CHUYEN_DE";
				colvarNgayChuyenDe.DataType = DbType.DateTime;
				colvarNgayChuyenDe.MaxLength = 0;
				colvarNgayChuyenDe.AutoIncrement = false;
				colvarNgayChuyenDe.IsNullable = false;
				colvarNgayChuyenDe.IsPrimaryKey = false;
				colvarNgayChuyenDe.IsForeignKey = false;
				colvarNgayChuyenDe.IsReadOnly = false;
				
						colvarNgayChuyenDe.DefaultSetting = @"(getdate())";
				colvarNgayChuyenDe.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayChuyenDe);
				
				TableSchema.TableColumn colvarNguoiChuyenDe = new TableSchema.TableColumn(schema);
				colvarNguoiChuyenDe.ColumnName = "NGUOI_CHUYEN_DE";
				colvarNguoiChuyenDe.DataType = DbType.String;
				colvarNguoiChuyenDe.MaxLength = 50;
				colvarNguoiChuyenDe.AutoIncrement = false;
				colvarNguoiChuyenDe.IsNullable = true;
				colvarNguoiChuyenDe.IsPrimaryKey = false;
				colvarNguoiChuyenDe.IsForeignKey = false;
				colvarNguoiChuyenDe.IsReadOnly = false;
				colvarNguoiChuyenDe.DefaultSetting = @"";
				colvarNguoiChuyenDe.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiChuyenDe);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "NGUOI_TAO";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 50;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NGAY_TAO";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = false;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				
						colvarNgayTao.DefaultSetting = @"(getdate())";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_BENHNHAN_CHODE",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PatientDeptId")]
		[Bindable(true)]
		public int PatientDeptId 
		{
			get { return GetColumnValue<int>(Columns.PatientDeptId); }
			set { SetColumnValue(Columns.PatientDeptId, value); }
		}
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public int PatientId 
		{
			get { return GetColumnValue<int>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("DepartmentId")]
		[Bindable(true)]
		public int DepartmentId 
		{
			get { return GetColumnValue<int>(Columns.DepartmentId); }
			set { SetColumnValue(Columns.DepartmentId, value); }
		}
		  
		[XmlAttribute("RoomId")]
		[Bindable(true)]
		public int? RoomId 
		{
			get { return GetColumnValue<int?>(Columns.RoomId); }
			set { SetColumnValue(Columns.RoomId, value); }
		}
		  
		[XmlAttribute("BedId")]
		[Bindable(true)]
		public int? BedId 
		{
			get { return GetColumnValue<int?>(Columns.BedId); }
			set { SetColumnValue(Columns.BedId, value); }
		}
		  
		[XmlAttribute("TranThaiDe")]
		[Bindable(true)]
		public int? TranThaiDe 
		{
			get { return GetColumnValue<int?>(Columns.TranThaiDe); }
			set { SetColumnValue(Columns.TranThaiDe, value); }
		}
		  
		[XmlAttribute("NgayChuyenDe")]
		[Bindable(true)]
		public DateTime NgayChuyenDe 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayChuyenDe); }
			set { SetColumnValue(Columns.NgayChuyenDe, value); }
		}
		  
		[XmlAttribute("NguoiChuyenDe")]
		[Bindable(true)]
		public string NguoiChuyenDe 
		{
			get { return GetColumnValue<string>(Columns.NguoiChuyenDe); }
			set { SetColumnValue(Columns.NguoiChuyenDe, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime NgayTao 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varPatientDeptId,string varPatientCode,int varPatientId,int varDepartmentId,int? varRoomId,int? varBedId,int? varTranThaiDe,DateTime varNgayChuyenDe,string varNguoiChuyenDe,string varNguoiTao,DateTime varNgayTao)
		{
			TBenhnhanChode item = new TBenhnhanChode();
			
			item.PatientDeptId = varPatientDeptId;
			
			item.PatientCode = varPatientCode;
			
			item.PatientId = varPatientId;
			
			item.DepartmentId = varDepartmentId;
			
			item.RoomId = varRoomId;
			
			item.BedId = varBedId;
			
			item.TranThaiDe = varTranThaiDe;
			
			item.NgayChuyenDe = varNgayChuyenDe;
			
			item.NguoiChuyenDe = varNguoiChuyenDe;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayTao = varNgayTao;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPatientDeptId,string varPatientCode,int varPatientId,int varDepartmentId,int? varRoomId,int? varBedId,int? varTranThaiDe,DateTime varNgayChuyenDe,string varNguoiChuyenDe,string varNguoiTao,DateTime varNgayTao)
		{
			TBenhnhanChode item = new TBenhnhanChode();
			
				item.PatientDeptId = varPatientDeptId;
			
				item.PatientCode = varPatientCode;
			
				item.PatientId = varPatientId;
			
				item.DepartmentId = varDepartmentId;
			
				item.RoomId = varRoomId;
			
				item.BedId = varBedId;
			
				item.TranThaiDe = varTranThaiDe;
			
				item.NgayChuyenDe = varNgayChuyenDe;
			
				item.NguoiChuyenDe = varNguoiChuyenDe;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayTao = varNgayTao;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PatientDeptIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn RoomIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn BedIdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TranThaiDeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayChuyenDeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiChuyenDeColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PatientDeptId = @"PatientDept_ID";
			 public static string PatientCode = @"Patient_Code";
			 public static string PatientId = @"Patient_ID";
			 public static string DepartmentId = @"Department_ID";
			 public static string RoomId = @"Room_ID";
			 public static string BedId = @"Bed_ID";
			 public static string TranThaiDe = @"TRAN_THAI_DE";
			 public static string NgayChuyenDe = @"NGAY_CHUYEN_DE";
			 public static string NguoiChuyenDe = @"NGUOI_CHUYEN_DE";
			 public static string NguoiTao = @"NGUOI_TAO";
			 public static string NgayTao = @"NGAY_TAO";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
