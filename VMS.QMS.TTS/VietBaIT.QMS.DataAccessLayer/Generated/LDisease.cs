using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LDisease class.
	/// </summary>
    [Serializable]
	public partial class LDiseaseCollection : ActiveList<LDisease, LDiseaseCollection>
	{	   
		public LDiseaseCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LDiseaseCollection</returns>
		public LDiseaseCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LDisease o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_Diseases table.
	/// </summary>
	[Serializable]
	public partial class LDisease : ActiveRecord<LDisease>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LDisease()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LDisease(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LDisease(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LDisease(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_Diseases", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarDiseaseId = new TableSchema.TableColumn(schema);
				colvarDiseaseId.ColumnName = "Disease_ID";
				colvarDiseaseId.DataType = DbType.Int16;
				colvarDiseaseId.MaxLength = 0;
				colvarDiseaseId.AutoIncrement = true;
				colvarDiseaseId.IsNullable = false;
				colvarDiseaseId.IsPrimaryKey = true;
				colvarDiseaseId.IsForeignKey = false;
				colvarDiseaseId.IsReadOnly = false;
				colvarDiseaseId.DefaultSetting = @"";
				colvarDiseaseId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiseaseId);
				
				TableSchema.TableColumn colvarDiseaseCode = new TableSchema.TableColumn(schema);
				colvarDiseaseCode.ColumnName = "Disease_Code";
				colvarDiseaseCode.DataType = DbType.AnsiString;
				colvarDiseaseCode.MaxLength = 20;
				colvarDiseaseCode.AutoIncrement = false;
				colvarDiseaseCode.IsNullable = false;
				colvarDiseaseCode.IsPrimaryKey = false;
				colvarDiseaseCode.IsForeignKey = false;
				colvarDiseaseCode.IsReadOnly = false;
				colvarDiseaseCode.DefaultSetting = @"";
				colvarDiseaseCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiseaseCode);
				
				TableSchema.TableColumn colvarDiseaseTypeId = new TableSchema.TableColumn(schema);
				colvarDiseaseTypeId.ColumnName = "DiseaseType_ID";
				colvarDiseaseTypeId.DataType = DbType.Int16;
				colvarDiseaseTypeId.MaxLength = 0;
				colvarDiseaseTypeId.AutoIncrement = false;
				colvarDiseaseTypeId.IsNullable = false;
				colvarDiseaseTypeId.IsPrimaryKey = false;
				colvarDiseaseTypeId.IsForeignKey = false;
				colvarDiseaseTypeId.IsReadOnly = false;
				colvarDiseaseTypeId.DefaultSetting = @"";
				colvarDiseaseTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiseaseTypeId);
				
				TableSchema.TableColumn colvarDiseaseName = new TableSchema.TableColumn(schema);
				colvarDiseaseName.ColumnName = "Disease_Name";
				colvarDiseaseName.DataType = DbType.String;
				colvarDiseaseName.MaxLength = 300;
				colvarDiseaseName.AutoIncrement = false;
				colvarDiseaseName.IsNullable = false;
				colvarDiseaseName.IsPrimaryKey = false;
				colvarDiseaseName.IsForeignKey = false;
				colvarDiseaseName.IsReadOnly = false;
				colvarDiseaseName.DefaultSetting = @"";
				colvarDiseaseName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiseaseName);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 255;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				TableSchema.TableColumn colvarFirstChar = new TableSchema.TableColumn(schema);
				colvarFirstChar.ColumnName = "FirstChar";
				colvarFirstChar.DataType = DbType.String;
				colvarFirstChar.MaxLength = 50;
				colvarFirstChar.AutoIncrement = false;
				colvarFirstChar.IsNullable = true;
				colvarFirstChar.IsPrimaryKey = false;
				colvarFirstChar.IsForeignKey = false;
				colvarFirstChar.IsReadOnly = false;
				colvarFirstChar.DefaultSetting = @"";
				colvarFirstChar.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFirstChar);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_Diseases",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DiseaseId")]
		[Bindable(true)]
		public short DiseaseId 
		{
			get { return GetColumnValue<short>(Columns.DiseaseId); }
			set { SetColumnValue(Columns.DiseaseId, value); }
		}
		  
		[XmlAttribute("DiseaseCode")]
		[Bindable(true)]
		public string DiseaseCode 
		{
			get { return GetColumnValue<string>(Columns.DiseaseCode); }
			set { SetColumnValue(Columns.DiseaseCode, value); }
		}
		  
		[XmlAttribute("DiseaseTypeId")]
		[Bindable(true)]
		public short DiseaseTypeId 
		{
			get { return GetColumnValue<short>(Columns.DiseaseTypeId); }
			set { SetColumnValue(Columns.DiseaseTypeId, value); }
		}
		  
		[XmlAttribute("DiseaseName")]
		[Bindable(true)]
		public string DiseaseName 
		{
			get { return GetColumnValue<string>(Columns.DiseaseName); }
			set { SetColumnValue(Columns.DiseaseName, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		  
		[XmlAttribute("FirstChar")]
		[Bindable(true)]
		public string FirstChar 
		{
			get { return GetColumnValue<string>(Columns.FirstChar); }
			set { SetColumnValue(Columns.FirstChar, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varDiseaseCode,short varDiseaseTypeId,string varDiseaseName,string varSDesc,string varFirstChar)
		{
			LDisease item = new LDisease();
			
			item.DiseaseCode = varDiseaseCode;
			
			item.DiseaseTypeId = varDiseaseTypeId;
			
			item.DiseaseName = varDiseaseName;
			
			item.SDesc = varSDesc;
			
			item.FirstChar = varFirstChar;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(short varDiseaseId,string varDiseaseCode,short varDiseaseTypeId,string varDiseaseName,string varSDesc,string varFirstChar)
		{
			LDisease item = new LDisease();
			
				item.DiseaseId = varDiseaseId;
			
				item.DiseaseCode = varDiseaseCode;
			
				item.DiseaseTypeId = varDiseaseTypeId;
			
				item.DiseaseName = varDiseaseName;
			
				item.SDesc = varSDesc;
			
				item.FirstChar = varFirstChar;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DiseaseIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DiseaseCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DiseaseTypeIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DiseaseNameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn FirstCharColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DiseaseId = @"Disease_ID";
			 public static string DiseaseCode = @"Disease_Code";
			 public static string DiseaseTypeId = @"DiseaseType_ID";
			 public static string DiseaseName = @"Disease_Name";
			 public static string SDesc = @"sDesc";
			 public static string FirstChar = @"FirstChar";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
