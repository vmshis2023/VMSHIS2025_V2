using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
    /// <summary>
    /// Controller class for KYDONG_T_Prescription_Detail
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class KydongTPrescriptionDetailController
    {
        // Preload our schema..
        KydongTPrescriptionDetail thisSchemaLoad = new KydongTPrescriptionDetail();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public KydongTPrescriptionDetailCollection FetchAll()
        {
            KydongTPrescriptionDetailCollection coll = new KydongTPrescriptionDetailCollection();
            Query qry = new Query(KydongTPrescriptionDetail.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public KydongTPrescriptionDetailCollection FetchByID(object PresDetailId)
        {
            KydongTPrescriptionDetailCollection coll = new KydongTPrescriptionDetailCollection().Where("PresDetail_ID", PresDetailId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public KydongTPrescriptionDetailCollection FetchByQuery(Query qry)
        {
            KydongTPrescriptionDetailCollection coll = new KydongTPrescriptionDetailCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object PresDetailId)
        {
            return (KydongTPrescriptionDetail.Delete(PresDetailId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object PresDetailId)
        {
            return (KydongTPrescriptionDetail.Destroy(PresDetailId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int PresId,int DrugId,DateTime ExpireDate,int Quantity,decimal Price,decimal? SurchargePrice,decimal? GiaBhct,decimal? GiaBnct,string SDesc,int? PaymentStatus,int? QuantityCancel,int? IsCancel,string CancelBy,DateTime? CancelDate,DateTime? PaymentDate,int? IsPayment,int? StockId,byte? HasComfirm,int? BhytStatus,int? PTramBhyt,int? PaymentId)
	    {
		    KydongTPrescriptionDetail item = new KydongTPrescriptionDetail();
		    
            item.PresId = PresId;
            
            item.DrugId = DrugId;
            
            item.ExpireDate = ExpireDate;
            
            item.Quantity = Quantity;
            
            item.Price = Price;
            
            item.SurchargePrice = SurchargePrice;
            
            item.GiaBhct = GiaBhct;
            
            item.GiaBnct = GiaBnct;
            
            item.SDesc = SDesc;
            
            item.PaymentStatus = PaymentStatus;
            
            item.QuantityCancel = QuantityCancel;
            
            item.IsCancel = IsCancel;
            
            item.CancelBy = CancelBy;
            
            item.CancelDate = CancelDate;
            
            item.PaymentDate = PaymentDate;
            
            item.IsPayment = IsPayment;
            
            item.StockId = StockId;
            
            item.HasComfirm = HasComfirm;
            
            item.BhytStatus = BhytStatus;
            
            item.PTramBhyt = PTramBhyt;
            
            item.PaymentId = PaymentId;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int PresDetailId,int PresId,int DrugId,DateTime ExpireDate,int Quantity,decimal Price,decimal? SurchargePrice,decimal? GiaBhct,decimal? GiaBnct,string SDesc,int? PaymentStatus,int? QuantityCancel,int? IsCancel,string CancelBy,DateTime? CancelDate,DateTime? PaymentDate,int? IsPayment,int? StockId,byte? HasComfirm,int? BhytStatus,int? PTramBhyt,int? PaymentId)
	    {
		    KydongTPrescriptionDetail item = new KydongTPrescriptionDetail();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.PresDetailId = PresDetailId;
				
			item.PresId = PresId;
				
			item.DrugId = DrugId;
				
			item.ExpireDate = ExpireDate;
				
			item.Quantity = Quantity;
				
			item.Price = Price;
				
			item.SurchargePrice = SurchargePrice;
				
			item.GiaBhct = GiaBhct;
				
			item.GiaBnct = GiaBnct;
				
			item.SDesc = SDesc;
				
			item.PaymentStatus = PaymentStatus;
				
			item.QuantityCancel = QuantityCancel;
				
			item.IsCancel = IsCancel;
				
			item.CancelBy = CancelBy;
				
			item.CancelDate = CancelDate;
				
			item.PaymentDate = PaymentDate;
				
			item.IsPayment = IsPayment;
				
			item.StockId = StockId;
				
			item.HasComfirm = HasComfirm;
				
			item.BhytStatus = BhytStatus;
				
			item.PTramBhyt = PTramBhyt;
				
			item.PaymentId = PaymentId;
				
	        item.Save(UserName);
	    }
    }
}
