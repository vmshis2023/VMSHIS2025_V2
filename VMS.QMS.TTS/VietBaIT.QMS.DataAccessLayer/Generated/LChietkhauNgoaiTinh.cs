using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LChietkhauNgoaiTinh class.
	/// </summary>
    [Serializable]
	public partial class LChietkhauNgoaiTinhCollection : ActiveList<LChietkhauNgoaiTinh, LChietkhauNgoaiTinhCollection>
	{	   
		public LChietkhauNgoaiTinhCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LChietkhauNgoaiTinhCollection</returns>
		public LChietkhauNgoaiTinhCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LChietkhauNgoaiTinh o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_CHIETKHAU_NGOAI_TINH table.
	/// </summary>
	[Serializable]
	public partial class LChietkhauNgoaiTinh : ActiveRecord<LChietkhauNgoaiTinh>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LChietkhauNgoaiTinh()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LChietkhauNgoaiTinh(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LChietkhauNgoaiTinh(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LChietkhauNgoaiTinh(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_CHIETKHAU_NGOAI_TINH", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdCkhau = new TableSchema.TableColumn(schema);
				colvarIdCkhau.ColumnName = "ID_CKHAU";
				colvarIdCkhau.DataType = DbType.Int32;
				colvarIdCkhau.MaxLength = 0;
				colvarIdCkhau.AutoIncrement = true;
				colvarIdCkhau.IsNullable = false;
				colvarIdCkhau.IsPrimaryKey = true;
				colvarIdCkhau.IsForeignKey = false;
				colvarIdCkhau.IsReadOnly = false;
				colvarIdCkhau.DefaultSetting = @"";
				colvarIdCkhau.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdCkhau);
				
				TableSchema.TableColumn colvarMaCkhau = new TableSchema.TableColumn(schema);
				colvarMaCkhau.ColumnName = "MA_CKHAU";
				colvarMaCkhau.DataType = DbType.String;
				colvarMaCkhau.MaxLength = 50;
				colvarMaCkhau.AutoIncrement = false;
				colvarMaCkhau.IsNullable = true;
				colvarMaCkhau.IsPrimaryKey = false;
				colvarMaCkhau.IsForeignKey = false;
				colvarMaCkhau.IsReadOnly = false;
				colvarMaCkhau.DefaultSetting = @"";
				colvarMaCkhau.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaCkhau);
				
				TableSchema.TableColumn colvarTenChkhau = new TableSchema.TableColumn(schema);
				colvarTenChkhau.ColumnName = "TEN_CHKHAU";
				colvarTenChkhau.DataType = DbType.String;
				colvarTenChkhau.MaxLength = 50;
				colvarTenChkhau.AutoIncrement = false;
				colvarTenChkhau.IsNullable = true;
				colvarTenChkhau.IsPrimaryKey = false;
				colvarTenChkhau.IsForeignKey = false;
				colvarTenChkhau.IsReadOnly = false;
				colvarTenChkhau.DefaultSetting = @"";
				colvarTenChkhau.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenChkhau);
				
				TableSchema.TableColumn colvarStt = new TableSchema.TableColumn(schema);
				colvarStt.ColumnName = "STT";
				colvarStt.DataType = DbType.Int32;
				colvarStt.MaxLength = 0;
				colvarStt.AutoIncrement = false;
				colvarStt.IsNullable = true;
				colvarStt.IsPrimaryKey = false;
				colvarStt.IsForeignKey = false;
				colvarStt.IsReadOnly = false;
				colvarStt.DefaultSetting = @"";
				colvarStt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStt);
				
				TableSchema.TableColumn colvarSoTienCkhau = new TableSchema.TableColumn(schema);
				colvarSoTienCkhau.ColumnName = "SO_TIEN_CKHAU";
				colvarSoTienCkhau.DataType = DbType.Decimal;
				colvarSoTienCkhau.MaxLength = 0;
				colvarSoTienCkhau.AutoIncrement = false;
				colvarSoTienCkhau.IsNullable = true;
				colvarSoTienCkhau.IsPrimaryKey = false;
				colvarSoTienCkhau.IsForeignKey = false;
				colvarSoTienCkhau.IsReadOnly = false;
				colvarSoTienCkhau.DefaultSetting = @"";
				colvarSoTienCkhau.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoTienCkhau);
				
				TableSchema.TableColumn colvarGhiChu = new TableSchema.TableColumn(schema);
				colvarGhiChu.ColumnName = "GHI_CHU";
				colvarGhiChu.DataType = DbType.String;
				colvarGhiChu.MaxLength = 255;
				colvarGhiChu.AutoIncrement = false;
				colvarGhiChu.IsNullable = true;
				colvarGhiChu.IsPrimaryKey = false;
				colvarGhiChu.IsForeignKey = false;
				colvarGhiChu.IsReadOnly = false;
				colvarGhiChu.DefaultSetting = @"";
				colvarGhiChu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGhiChu);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "NGUOI_TAO";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 50;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NGAY_TAO";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarMaDtuong = new TableSchema.TableColumn(schema);
				colvarMaDtuong.ColumnName = "MA_DTUONG";
				colvarMaDtuong.DataType = DbType.String;
				colvarMaDtuong.MaxLength = 50;
				colvarMaDtuong.AutoIncrement = false;
				colvarMaDtuong.IsNullable = true;
				colvarMaDtuong.IsPrimaryKey = false;
				colvarMaDtuong.IsForeignKey = false;
				colvarMaDtuong.IsReadOnly = false;
				colvarMaDtuong.DefaultSetting = @"";
				colvarMaDtuong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaDtuong);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_CHIETKHAU_NGOAI_TINH",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdCkhau")]
		[Bindable(true)]
		public int IdCkhau 
		{
			get { return GetColumnValue<int>(Columns.IdCkhau); }
			set { SetColumnValue(Columns.IdCkhau, value); }
		}
		  
		[XmlAttribute("MaCkhau")]
		[Bindable(true)]
		public string MaCkhau 
		{
			get { return GetColumnValue<string>(Columns.MaCkhau); }
			set { SetColumnValue(Columns.MaCkhau, value); }
		}
		  
		[XmlAttribute("TenChkhau")]
		[Bindable(true)]
		public string TenChkhau 
		{
			get { return GetColumnValue<string>(Columns.TenChkhau); }
			set { SetColumnValue(Columns.TenChkhau, value); }
		}
		  
		[XmlAttribute("Stt")]
		[Bindable(true)]
		public int? Stt 
		{
			get { return GetColumnValue<int?>(Columns.Stt); }
			set { SetColumnValue(Columns.Stt, value); }
		}
		  
		[XmlAttribute("SoTienCkhau")]
		[Bindable(true)]
		public decimal? SoTienCkhau 
		{
			get { return GetColumnValue<decimal?>(Columns.SoTienCkhau); }
			set { SetColumnValue(Columns.SoTienCkhau, value); }
		}
		  
		[XmlAttribute("GhiChu")]
		[Bindable(true)]
		public string GhiChu 
		{
			get { return GetColumnValue<string>(Columns.GhiChu); }
			set { SetColumnValue(Columns.GhiChu, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("MaDtuong")]
		[Bindable(true)]
		public string MaDtuong 
		{
			get { return GetColumnValue<string>(Columns.MaDtuong); }
			set { SetColumnValue(Columns.MaDtuong, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaCkhau,string varTenChkhau,int? varStt,decimal? varSoTienCkhau,string varGhiChu,string varNguoiTao,DateTime? varNgayTao,string varMaDtuong)
		{
			LChietkhauNgoaiTinh item = new LChietkhauNgoaiTinh();
			
			item.MaCkhau = varMaCkhau;
			
			item.TenChkhau = varTenChkhau;
			
			item.Stt = varStt;
			
			item.SoTienCkhau = varSoTienCkhau;
			
			item.GhiChu = varGhiChu;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayTao = varNgayTao;
			
			item.MaDtuong = varMaDtuong;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdCkhau,string varMaCkhau,string varTenChkhau,int? varStt,decimal? varSoTienCkhau,string varGhiChu,string varNguoiTao,DateTime? varNgayTao,string varMaDtuong)
		{
			LChietkhauNgoaiTinh item = new LChietkhauNgoaiTinh();
			
				item.IdCkhau = varIdCkhau;
			
				item.MaCkhau = varMaCkhau;
			
				item.TenChkhau = varTenChkhau;
			
				item.Stt = varStt;
			
				item.SoTienCkhau = varSoTienCkhau;
			
				item.GhiChu = varGhiChu;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayTao = varNgayTao;
			
				item.MaDtuong = varMaDtuong;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdCkhauColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaCkhauColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenChkhauColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SttColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SoTienCkhauColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn GhiChuColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn MaDtuongColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdCkhau = @"ID_CKHAU";
			 public static string MaCkhau = @"MA_CKHAU";
			 public static string TenChkhau = @"TEN_CHKHAU";
			 public static string Stt = @"STT";
			 public static string SoTienCkhau = @"SO_TIEN_CKHAU";
			 public static string GhiChu = @"GHI_CHU";
			 public static string NguoiTao = @"NGUOI_TAO";
			 public static string NgayTao = @"NGAY_TAO";
			 public static string MaDtuong = @"MA_DTUONG";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
