using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the THeathCareDetail class.
	/// </summary>
    [Serializable]
	public partial class THeathCareDetailCollection : ActiveList<THeathCareDetail, THeathCareDetailCollection>
	{	   
		public THeathCareDetailCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>THeathCareDetailCollection</returns>
		public THeathCareDetailCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                THeathCareDetail o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_HeathCare_Detail table.
	/// </summary>
	[Serializable]
	public partial class THeathCareDetail : ActiveRecord<THeathCareDetail>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public THeathCareDetail()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public THeathCareDetail(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public THeathCareDetail(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public THeathCareDetail(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_HeathCare_Detail", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarHeathDetailId = new TableSchema.TableColumn(schema);
				colvarHeathDetailId.ColumnName = "HeathDetail_ID";
				colvarHeathDetailId.DataType = DbType.Int32;
				colvarHeathDetailId.MaxLength = 0;
				colvarHeathDetailId.AutoIncrement = true;
				colvarHeathDetailId.IsNullable = false;
				colvarHeathDetailId.IsPrimaryKey = true;
				colvarHeathDetailId.IsForeignKey = false;
				colvarHeathDetailId.IsReadOnly = false;
				colvarHeathDetailId.DefaultSetting = @"";
				colvarHeathDetailId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHeathDetailId);
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "Patient_Code";
				colvarPatientCode.DataType = DbType.String;
				colvarPatientCode.MaxLength = 50;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = true;
				colvarPatientCode.IsPrimaryKey = false;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int32;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = true;
				colvarPatientId.IsPrimaryKey = false;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarHeathId = new TableSchema.TableColumn(schema);
				colvarHeathId.ColumnName = "Heath_ID";
				colvarHeathId.DataType = DbType.Int32;
				colvarHeathId.MaxLength = 0;
				colvarHeathId.AutoIncrement = false;
				colvarHeathId.IsNullable = true;
				colvarHeathId.IsPrimaryKey = false;
				colvarHeathId.IsForeignKey = false;
				colvarHeathId.IsReadOnly = false;
				colvarHeathId.DefaultSetting = @"";
				colvarHeathId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHeathId);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "Create_Date";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = true;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				colvarCreateDate.DefaultSetting = @"";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				TableSchema.TableColumn colvarCreateBy = new TableSchema.TableColumn(schema);
				colvarCreateBy.ColumnName = "Create_By";
				colvarCreateBy.DataType = DbType.String;
				colvarCreateBy.MaxLength = 20;
				colvarCreateBy.AutoIncrement = false;
				colvarCreateBy.IsNullable = true;
				colvarCreateBy.IsPrimaryKey = false;
				colvarCreateBy.IsForeignKey = false;
				colvarCreateBy.IsReadOnly = false;
				colvarCreateBy.DefaultSetting = @"";
				colvarCreateBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateBy);
				
				TableSchema.TableColumn colvarTreatId = new TableSchema.TableColumn(schema);
				colvarTreatId.ColumnName = "Treat_ID";
				colvarTreatId.DataType = DbType.Int32;
				colvarTreatId.MaxLength = 0;
				colvarTreatId.AutoIncrement = false;
				colvarTreatId.IsNullable = true;
				colvarTreatId.IsPrimaryKey = false;
				colvarTreatId.IsForeignKey = false;
				colvarTreatId.IsReadOnly = false;
				colvarTreatId.DefaultSetting = @"";
				colvarTreatId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTreatId);
				
				TableSchema.TableColumn colvarDepartmentId = new TableSchema.TableColumn(schema);
				colvarDepartmentId.ColumnName = "Department_ID";
				colvarDepartmentId.DataType = DbType.Int16;
				colvarDepartmentId.MaxLength = 0;
				colvarDepartmentId.AutoIncrement = false;
				colvarDepartmentId.IsNullable = true;
				colvarDepartmentId.IsPrimaryKey = false;
				colvarDepartmentId.IsForeignKey = false;
				colvarDepartmentId.IsReadOnly = false;
				colvarDepartmentId.DefaultSetting = @"";
				colvarDepartmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentId);
				
				TableSchema.TableColumn colvarCanNang = new TableSchema.TableColumn(schema);
				colvarCanNang.ColumnName = "CAN_NANG";
				colvarCanNang.DataType = DbType.String;
				colvarCanNang.MaxLength = 10;
				colvarCanNang.AutoIncrement = false;
				colvarCanNang.IsNullable = true;
				colvarCanNang.IsPrimaryKey = false;
				colvarCanNang.IsForeignKey = false;
				colvarCanNang.IsReadOnly = false;
				colvarCanNang.DefaultSetting = @"";
				colvarCanNang.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCanNang);
				
				TableSchema.TableColumn colvarChieuCao = new TableSchema.TableColumn(schema);
				colvarChieuCao.ColumnName = "CHIEU_CAO";
				colvarChieuCao.DataType = DbType.String;
				colvarChieuCao.MaxLength = 5;
				colvarChieuCao.AutoIncrement = false;
				colvarChieuCao.IsNullable = true;
				colvarChieuCao.IsPrimaryKey = false;
				colvarChieuCao.IsForeignKey = false;
				colvarChieuCao.IsReadOnly = false;
				colvarChieuCao.DefaultSetting = @"";
				colvarChieuCao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChieuCao);
				
				TableSchema.TableColumn colvarHuyetApDuoi = new TableSchema.TableColumn(schema);
				colvarHuyetApDuoi.ColumnName = "HUYET_AP_DUOI";
				colvarHuyetApDuoi.DataType = DbType.String;
				colvarHuyetApDuoi.MaxLength = 5;
				colvarHuyetApDuoi.AutoIncrement = false;
				colvarHuyetApDuoi.IsNullable = true;
				colvarHuyetApDuoi.IsPrimaryKey = false;
				colvarHuyetApDuoi.IsForeignKey = false;
				colvarHuyetApDuoi.IsReadOnly = false;
				colvarHuyetApDuoi.DefaultSetting = @"";
				colvarHuyetApDuoi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHuyetApDuoi);
				
				TableSchema.TableColumn colvarHuyetApTren = new TableSchema.TableColumn(schema);
				colvarHuyetApTren.ColumnName = "HUYET_AP_TREN";
				colvarHuyetApTren.DataType = DbType.String;
				colvarHuyetApTren.MaxLength = 5;
				colvarHuyetApTren.AutoIncrement = false;
				colvarHuyetApTren.IsNullable = true;
				colvarHuyetApTren.IsPrimaryKey = false;
				colvarHuyetApTren.IsForeignKey = false;
				colvarHuyetApTren.IsReadOnly = false;
				colvarHuyetApTren.DefaultSetting = @"";
				colvarHuyetApTren.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHuyetApTren);
				
				TableSchema.TableColumn colvarMach = new TableSchema.TableColumn(schema);
				colvarMach.ColumnName = "MACH";
				colvarMach.DataType = DbType.String;
				colvarMach.MaxLength = 5;
				colvarMach.AutoIncrement = false;
				colvarMach.IsNullable = true;
				colvarMach.IsPrimaryKey = false;
				colvarMach.IsForeignKey = false;
				colvarMach.IsReadOnly = false;
				colvarMach.DefaultSetting = @"";
				colvarMach.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMach);
				
				TableSchema.TableColumn colvarNhipTho = new TableSchema.TableColumn(schema);
				colvarNhipTho.ColumnName = "NHIP_THO";
				colvarNhipTho.DataType = DbType.String;
				colvarNhipTho.MaxLength = 5;
				colvarNhipTho.AutoIncrement = false;
				colvarNhipTho.IsNullable = true;
				colvarNhipTho.IsPrimaryKey = false;
				colvarNhipTho.IsForeignKey = false;
				colvarNhipTho.IsReadOnly = false;
				colvarNhipTho.DefaultSetting = @"";
				colvarNhipTho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNhipTho);
				
				TableSchema.TableColumn colvarNhietDo = new TableSchema.TableColumn(schema);
				colvarNhietDo.ColumnName = "NHIET_DO";
				colvarNhietDo.DataType = DbType.String;
				colvarNhietDo.MaxLength = 5;
				colvarNhietDo.AutoIncrement = false;
				colvarNhietDo.IsNullable = true;
				colvarNhietDo.IsPrimaryKey = false;
				colvarNhietDo.IsForeignKey = false;
				colvarNhietDo.IsReadOnly = false;
				colvarNhietDo.DefaultSetting = @"";
				colvarNhietDo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNhietDo);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_HeathCare_Detail",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("HeathDetailId")]
		[Bindable(true)]
		public int HeathDetailId 
		{
			get { return GetColumnValue<int>(Columns.HeathDetailId); }
			set { SetColumnValue(Columns.HeathDetailId, value); }
		}
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public int? PatientId 
		{
			get { return GetColumnValue<int?>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("HeathId")]
		[Bindable(true)]
		public int? HeathId 
		{
			get { return GetColumnValue<int?>(Columns.HeathId); }
			set { SetColumnValue(Columns.HeathId, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime? CreateDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		  
		[XmlAttribute("CreateBy")]
		[Bindable(true)]
		public string CreateBy 
		{
			get { return GetColumnValue<string>(Columns.CreateBy); }
			set { SetColumnValue(Columns.CreateBy, value); }
		}
		  
		[XmlAttribute("TreatId")]
		[Bindable(true)]
		public int? TreatId 
		{
			get { return GetColumnValue<int?>(Columns.TreatId); }
			set { SetColumnValue(Columns.TreatId, value); }
		}
		  
		[XmlAttribute("DepartmentId")]
		[Bindable(true)]
		public short? DepartmentId 
		{
			get { return GetColumnValue<short?>(Columns.DepartmentId); }
			set { SetColumnValue(Columns.DepartmentId, value); }
		}
		  
		[XmlAttribute("CanNang")]
		[Bindable(true)]
		public string CanNang 
		{
			get { return GetColumnValue<string>(Columns.CanNang); }
			set { SetColumnValue(Columns.CanNang, value); }
		}
		  
		[XmlAttribute("ChieuCao")]
		[Bindable(true)]
		public string ChieuCao 
		{
			get { return GetColumnValue<string>(Columns.ChieuCao); }
			set { SetColumnValue(Columns.ChieuCao, value); }
		}
		  
		[XmlAttribute("HuyetApDuoi")]
		[Bindable(true)]
		public string HuyetApDuoi 
		{
			get { return GetColumnValue<string>(Columns.HuyetApDuoi); }
			set { SetColumnValue(Columns.HuyetApDuoi, value); }
		}
		  
		[XmlAttribute("HuyetApTren")]
		[Bindable(true)]
		public string HuyetApTren 
		{
			get { return GetColumnValue<string>(Columns.HuyetApTren); }
			set { SetColumnValue(Columns.HuyetApTren, value); }
		}
		  
		[XmlAttribute("Mach")]
		[Bindable(true)]
		public string Mach 
		{
			get { return GetColumnValue<string>(Columns.Mach); }
			set { SetColumnValue(Columns.Mach, value); }
		}
		  
		[XmlAttribute("NhipTho")]
		[Bindable(true)]
		public string NhipTho 
		{
			get { return GetColumnValue<string>(Columns.NhipTho); }
			set { SetColumnValue(Columns.NhipTho, value); }
		}
		  
		[XmlAttribute("NhietDo")]
		[Bindable(true)]
		public string NhietDo 
		{
			get { return GetColumnValue<string>(Columns.NhietDo); }
			set { SetColumnValue(Columns.NhietDo, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varPatientCode,int? varPatientId,int? varHeathId,DateTime? varCreateDate,string varCreateBy,int? varTreatId,short? varDepartmentId,string varCanNang,string varChieuCao,string varHuyetApDuoi,string varHuyetApTren,string varMach,string varNhipTho,string varNhietDo)
		{
			THeathCareDetail item = new THeathCareDetail();
			
			item.PatientCode = varPatientCode;
			
			item.PatientId = varPatientId;
			
			item.HeathId = varHeathId;
			
			item.CreateDate = varCreateDate;
			
			item.CreateBy = varCreateBy;
			
			item.TreatId = varTreatId;
			
			item.DepartmentId = varDepartmentId;
			
			item.CanNang = varCanNang;
			
			item.ChieuCao = varChieuCao;
			
			item.HuyetApDuoi = varHuyetApDuoi;
			
			item.HuyetApTren = varHuyetApTren;
			
			item.Mach = varMach;
			
			item.NhipTho = varNhipTho;
			
			item.NhietDo = varNhietDo;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varHeathDetailId,string varPatientCode,int? varPatientId,int? varHeathId,DateTime? varCreateDate,string varCreateBy,int? varTreatId,short? varDepartmentId,string varCanNang,string varChieuCao,string varHuyetApDuoi,string varHuyetApTren,string varMach,string varNhipTho,string varNhietDo)
		{
			THeathCareDetail item = new THeathCareDetail();
			
				item.HeathDetailId = varHeathDetailId;
			
				item.PatientCode = varPatientCode;
			
				item.PatientId = varPatientId;
			
				item.HeathId = varHeathId;
			
				item.CreateDate = varCreateDate;
			
				item.CreateBy = varCreateBy;
			
				item.TreatId = varTreatId;
			
				item.DepartmentId = varDepartmentId;
			
				item.CanNang = varCanNang;
			
				item.ChieuCao = varChieuCao;
			
				item.HuyetApDuoi = varHuyetApDuoi;
			
				item.HuyetApTren = varHuyetApTren;
			
				item.Mach = varMach;
			
				item.NhipTho = varNhipTho;
			
				item.NhietDo = varNhietDo;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn HeathDetailIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn HeathIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateByColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TreatIdColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIdColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CanNangColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ChieuCaoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn HuyetApDuoiColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn HuyetApTrenColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn MachColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn NhipThoColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn NhietDoColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string HeathDetailId = @"HeathDetail_ID";
			 public static string PatientCode = @"Patient_Code";
			 public static string PatientId = @"Patient_ID";
			 public static string HeathId = @"Heath_ID";
			 public static string CreateDate = @"Create_Date";
			 public static string CreateBy = @"Create_By";
			 public static string TreatId = @"Treat_ID";
			 public static string DepartmentId = @"Department_ID";
			 public static string CanNang = @"CAN_NANG";
			 public static string ChieuCao = @"CHIEU_CAO";
			 public static string HuyetApDuoi = @"HUYET_AP_DUOI";
			 public static string HuyetApTren = @"HUYET_AP_TREN";
			 public static string Mach = @"MACH";
			 public static string NhipTho = @"NHIP_THO";
			 public static string NhietDo = @"NHIET_DO";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
