using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the SysUpdateDLL class.
	/// </summary>
    [Serializable]
	public partial class SysUpdateDLLCollection : ActiveList<SysUpdateDLL, SysUpdateDLLCollection>
	{	   
		public SysUpdateDLLCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysUpdateDLLCollection</returns>
		public SysUpdateDLLCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysUpdateDLL o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Sys_UpdateDLL table.
	/// </summary>
	[Serializable]
	public partial class SysUpdateDLL : ActiveRecord<SysUpdateDLL>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SysUpdateDLL()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysUpdateDLL(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysUpdateDLL(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysUpdateDLL(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Sys_UpdateDLL", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarSysUpdate = new TableSchema.TableColumn(schema);
				colvarSysUpdate.ColumnName = "Sys_Update";
				colvarSysUpdate.DataType = DbType.Int32;
				colvarSysUpdate.MaxLength = 0;
				colvarSysUpdate.AutoIncrement = true;
				colvarSysUpdate.IsNullable = false;
				colvarSysUpdate.IsPrimaryKey = true;
				colvarSysUpdate.IsForeignKey = false;
				colvarSysUpdate.IsReadOnly = false;
				colvarSysUpdate.DefaultSetting = @"";
				colvarSysUpdate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSysUpdate);
				
				TableSchema.TableColumn colvarServerName = new TableSchema.TableColumn(schema);
				colvarServerName.ColumnName = "SERVER_NAME";
				colvarServerName.DataType = DbType.String;
				colvarServerName.MaxLength = 50;
				colvarServerName.AutoIncrement = false;
				colvarServerName.IsNullable = true;
				colvarServerName.IsPrimaryKey = false;
				colvarServerName.IsForeignKey = false;
				colvarServerName.IsReadOnly = false;
				colvarServerName.DefaultSetting = @"";
				colvarServerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServerName);
				
				TableSchema.TableColumn colvarFtpName = new TableSchema.TableColumn(schema);
				colvarFtpName.ColumnName = "FTP_NAME";
				colvarFtpName.DataType = DbType.String;
				colvarFtpName.MaxLength = 200;
				colvarFtpName.AutoIncrement = false;
				colvarFtpName.IsNullable = true;
				colvarFtpName.IsPrimaryKey = false;
				colvarFtpName.IsForeignKey = false;
				colvarFtpName.IsReadOnly = false;
				colvarFtpName.DefaultSetting = @"";
				colvarFtpName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFtpName);
				
				TableSchema.TableColumn colvarTenFile = new TableSchema.TableColumn(schema);
				colvarTenFile.ColumnName = "TEN_FILE";
				colvarTenFile.DataType = DbType.String;
				colvarTenFile.MaxLength = 500;
				colvarTenFile.AutoIncrement = false;
				colvarTenFile.IsNullable = true;
				colvarTenFile.IsPrimaryKey = false;
				colvarTenFile.IsForeignKey = false;
				colvarTenFile.IsReadOnly = false;
				colvarTenFile.DefaultSetting = @"";
				colvarTenFile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenFile);
				
				TableSchema.TableColumn colvarTenMaytinh = new TableSchema.TableColumn(schema);
				colvarTenMaytinh.ColumnName = "TEN_MAYTINH";
				colvarTenMaytinh.DataType = DbType.String;
				colvarTenMaytinh.MaxLength = 200;
				colvarTenMaytinh.AutoIncrement = false;
				colvarTenMaytinh.IsNullable = true;
				colvarTenMaytinh.IsPrimaryKey = false;
				colvarTenMaytinh.IsForeignKey = false;
				colvarTenMaytinh.IsReadOnly = false;
				colvarTenMaytinh.DefaultSetting = @"";
				colvarTenMaytinh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenMaytinh);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "TRANG_THAI";
				colvarTrangThai.DataType = DbType.Int32;
				colvarTrangThai.MaxLength = 0;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = true;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				colvarTrangThai.DefaultSetting = @"";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				TableSchema.TableColumn colvarNgayUpdate = new TableSchema.TableColumn(schema);
				colvarNgayUpdate.ColumnName = "NGAY_UPDATE";
				colvarNgayUpdate.DataType = DbType.DateTime;
				colvarNgayUpdate.MaxLength = 0;
				colvarNgayUpdate.AutoIncrement = false;
				colvarNgayUpdate.IsNullable = true;
				colvarNgayUpdate.IsPrimaryKey = false;
				colvarNgayUpdate.IsForeignKey = false;
				colvarNgayUpdate.IsReadOnly = false;
				colvarNgayUpdate.DefaultSetting = @"";
				colvarNgayUpdate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayUpdate);
				
				TableSchema.TableColumn colvarDiaChiIp = new TableSchema.TableColumn(schema);
				colvarDiaChiIp.ColumnName = "DIA_CHI_IP";
				colvarDiaChiIp.DataType = DbType.String;
				colvarDiaChiIp.MaxLength = 50;
				colvarDiaChiIp.AutoIncrement = false;
				colvarDiaChiIp.IsNullable = true;
				colvarDiaChiIp.IsPrimaryKey = false;
				colvarDiaChiIp.IsForeignKey = false;
				colvarDiaChiIp.IsReadOnly = false;
				colvarDiaChiIp.DefaultSetting = @"";
				colvarDiaChiIp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiaChiIp);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("Sys_UpdateDLL",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("SysUpdate")]
		[Bindable(true)]
		public int SysUpdate 
		{
			get { return GetColumnValue<int>(Columns.SysUpdate); }
			set { SetColumnValue(Columns.SysUpdate, value); }
		}
		  
		[XmlAttribute("ServerName")]
		[Bindable(true)]
		public string ServerName 
		{
			get { return GetColumnValue<string>(Columns.ServerName); }
			set { SetColumnValue(Columns.ServerName, value); }
		}
		  
		[XmlAttribute("FtpName")]
		[Bindable(true)]
		public string FtpName 
		{
			get { return GetColumnValue<string>(Columns.FtpName); }
			set { SetColumnValue(Columns.FtpName, value); }
		}
		  
		[XmlAttribute("TenFile")]
		[Bindable(true)]
		public string TenFile 
		{
			get { return GetColumnValue<string>(Columns.TenFile); }
			set { SetColumnValue(Columns.TenFile, value); }
		}
		  
		[XmlAttribute("TenMaytinh")]
		[Bindable(true)]
		public string TenMaytinh 
		{
			get { return GetColumnValue<string>(Columns.TenMaytinh); }
			set { SetColumnValue(Columns.TenMaytinh, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public int? TrangThai 
		{
			get { return GetColumnValue<int?>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		  
		[XmlAttribute("NgayUpdate")]
		[Bindable(true)]
		public DateTime? NgayUpdate 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayUpdate); }
			set { SetColumnValue(Columns.NgayUpdate, value); }
		}
		  
		[XmlAttribute("DiaChiIp")]
		[Bindable(true)]
		public string DiaChiIp 
		{
			get { return GetColumnValue<string>(Columns.DiaChiIp); }
			set { SetColumnValue(Columns.DiaChiIp, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varServerName,string varFtpName,string varTenFile,string varTenMaytinh,int? varTrangThai,DateTime? varNgayUpdate,string varDiaChiIp)
		{
			SysUpdateDLL item = new SysUpdateDLL();
			
			item.ServerName = varServerName;
			
			item.FtpName = varFtpName;
			
			item.TenFile = varTenFile;
			
			item.TenMaytinh = varTenMaytinh;
			
			item.TrangThai = varTrangThai;
			
			item.NgayUpdate = varNgayUpdate;
			
			item.DiaChiIp = varDiaChiIp;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varSysUpdate,string varServerName,string varFtpName,string varTenFile,string varTenMaytinh,int? varTrangThai,DateTime? varNgayUpdate,string varDiaChiIp)
		{
			SysUpdateDLL item = new SysUpdateDLL();
			
				item.SysUpdate = varSysUpdate;
			
				item.ServerName = varServerName;
			
				item.FtpName = varFtpName;
			
				item.TenFile = varTenFile;
			
				item.TenMaytinh = varTenMaytinh;
			
				item.TrangThai = varTrangThai;
			
				item.NgayUpdate = varNgayUpdate;
			
				item.DiaChiIp = varDiaChiIp;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SysUpdateColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ServerNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FtpNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TenFileColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TenMaytinhColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayUpdateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DiaChiIpColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string SysUpdate = @"Sys_Update";
			 public static string ServerName = @"SERVER_NAME";
			 public static string FtpName = @"FTP_NAME";
			 public static string TenFile = @"TEN_FILE";
			 public static string TenMaytinh = @"TEN_MAYTINH";
			 public static string TrangThai = @"TRANG_THAI";
			 public static string NgayUpdate = @"NGAY_UPDATE";
			 public static string DiaChiIp = @"DIA_CHI_IP";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
