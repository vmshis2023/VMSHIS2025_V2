using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
    /// <summary>
    /// Controller class for T_Deposits
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TDepositController
    {
        // Preload our schema..
        TDeposit thisSchemaLoad = new TDeposit();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TDepositCollection FetchAll()
        {
            TDepositCollection coll = new TDepositCollection();
            Query qry = new Query(TDeposit.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TDepositCollection FetchByID(object DepositId)
        {
            TDepositCollection coll = new TDepositCollection().Where("Deposit_ID", DepositId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TDepositCollection FetchByQuery(Query qry)
        {
            TDepositCollection coll = new TDepositCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object DepositId)
        {
            return (TDeposit.Delete(DepositId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object DepositId)
        {
            return (TDeposit.Destroy(DepositId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(long PatientId,string PatientCode,decimal? ToTalMoney,byte Status,DateTime? DepositDate,byte? DepositType,string SDesc,string ModifiedBy,DateTime? ModifiedDate,string CreatedBy,DateTime? CreatedDate,short? DepartmentId,int? PaymentId,int? IdGoiDvu,int? IdPhieuGoiDvu,decimal? PtramTung,DateTime? PaymentDate,string IpMaySua,string IpMayTao,byte? TrangThaiChuyen,short? IdNhanVien,string LyDoHuy,string NguoiNop)
	    {
		    TDeposit item = new TDeposit();
		    
            item.PatientId = PatientId;
            
            item.PatientCode = PatientCode;
            
            item.ToTalMoney = ToTalMoney;
            
            item.Status = Status;
            
            item.DepositDate = DepositDate;
            
            item.DepositType = DepositType;
            
            item.SDesc = SDesc;
            
            item.ModifiedBy = ModifiedBy;
            
            item.ModifiedDate = ModifiedDate;
            
            item.CreatedBy = CreatedBy;
            
            item.CreatedDate = CreatedDate;
            
            item.DepartmentId = DepartmentId;
            
            item.PaymentId = PaymentId;
            
            item.IdGoiDvu = IdGoiDvu;
            
            item.IdPhieuGoiDvu = IdPhieuGoiDvu;
            
            item.PtramTung = PtramTung;
            
            item.PaymentDate = PaymentDate;
            
            item.IpMaySua = IpMaySua;
            
            item.IpMayTao = IpMayTao;
            
            item.TrangThaiChuyen = TrangThaiChuyen;
            
            item.IdNhanVien = IdNhanVien;
            
            item.LyDoHuy = LyDoHuy;
            
            item.NguoiNop = NguoiNop;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(long DepositId,long PatientId,string PatientCode,decimal? ToTalMoney,byte Status,DateTime? DepositDate,byte? DepositType,string SDesc,string ModifiedBy,DateTime? ModifiedDate,string CreatedBy,DateTime? CreatedDate,short? DepartmentId,int? PaymentId,int? IdGoiDvu,int? IdPhieuGoiDvu,decimal? PtramTung,DateTime? PaymentDate,string IpMaySua,string IpMayTao,byte? TrangThaiChuyen,short? IdNhanVien,string LyDoHuy,string NguoiNop)
	    {
		    TDeposit item = new TDeposit();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.DepositId = DepositId;
				
			item.PatientId = PatientId;
				
			item.PatientCode = PatientCode;
				
			item.ToTalMoney = ToTalMoney;
				
			item.Status = Status;
				
			item.DepositDate = DepositDate;
				
			item.DepositType = DepositType;
				
			item.SDesc = SDesc;
				
			item.ModifiedBy = ModifiedBy;
				
			item.ModifiedDate = ModifiedDate;
				
			item.CreatedBy = CreatedBy;
				
			item.CreatedDate = CreatedDate;
				
			item.DepartmentId = DepartmentId;
				
			item.PaymentId = PaymentId;
				
			item.IdGoiDvu = IdGoiDvu;
				
			item.IdPhieuGoiDvu = IdPhieuGoiDvu;
				
			item.PtramTung = PtramTung;
				
			item.PaymentDate = PaymentDate;
				
			item.IpMaySua = IpMaySua;
				
			item.IpMayTao = IpMayTao;
				
			item.TrangThaiChuyen = TrangThaiChuyen;
				
			item.IdNhanVien = IdNhanVien;
				
			item.LyDoHuy = LyDoHuy;
				
			item.NguoiNop = NguoiNop;
				
	        item.Save(UserName);
	    }
    }
}
