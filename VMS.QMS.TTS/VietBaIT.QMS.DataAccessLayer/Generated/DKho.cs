using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the DKho class.
	/// </summary>
    [Serializable]
	public partial class DKhoCollection : ActiveList<DKho, DKhoCollection>
	{	   
		public DKhoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DKhoCollection</returns>
		public DKhoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DKho o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the D_KHO table.
	/// </summary>
	[Serializable]
	public partial class DKho : ActiveRecord<DKho>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DKho()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DKho(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DKho(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DKho(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("D_KHO", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdKho = new TableSchema.TableColumn(schema);
				colvarIdKho.ColumnName = "ID_KHO";
				colvarIdKho.DataType = DbType.Int32;
				colvarIdKho.MaxLength = 0;
				colvarIdKho.AutoIncrement = true;
				colvarIdKho.IsNullable = false;
				colvarIdKho.IsPrimaryKey = true;
				colvarIdKho.IsForeignKey = false;
				colvarIdKho.IsReadOnly = false;
				colvarIdKho.DefaultSetting = @"";
				colvarIdKho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdKho);
				
				TableSchema.TableColumn colvarMaKho = new TableSchema.TableColumn(schema);
				colvarMaKho.ColumnName = "MA_KHO";
				colvarMaKho.DataType = DbType.String;
				colvarMaKho.MaxLength = 50;
				colvarMaKho.AutoIncrement = false;
				colvarMaKho.IsNullable = false;
				colvarMaKho.IsPrimaryKey = false;
				colvarMaKho.IsForeignKey = false;
				colvarMaKho.IsReadOnly = false;
				colvarMaKho.DefaultSetting = @"";
				colvarMaKho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaKho);
				
				TableSchema.TableColumn colvarTenKho = new TableSchema.TableColumn(schema);
				colvarTenKho.ColumnName = "TEN_KHO";
				colvarTenKho.DataType = DbType.String;
				colvarTenKho.MaxLength = 50;
				colvarTenKho.AutoIncrement = false;
				colvarTenKho.IsNullable = false;
				colvarTenKho.IsPrimaryKey = false;
				colvarTenKho.IsForeignKey = false;
				colvarTenKho.IsReadOnly = false;
				colvarTenKho.DefaultSetting = @"";
				colvarTenKho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenKho);
				
				TableSchema.TableColumn colvarThuTu = new TableSchema.TableColumn(schema);
				colvarThuTu.ColumnName = "THU_TU";
				colvarThuTu.DataType = DbType.Int32;
				colvarThuTu.MaxLength = 0;
				colvarThuTu.AutoIncrement = false;
				colvarThuTu.IsNullable = true;
				colvarThuTu.IsPrimaryKey = false;
				colvarThuTu.IsForeignKey = false;
				colvarThuTu.IsReadOnly = false;
				colvarThuTu.DefaultSetting = @"";
				colvarThuTu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThuTu);
				
				TableSchema.TableColumn colvarKieuKho = new TableSchema.TableColumn(schema);
				colvarKieuKho.ColumnName = "KIEU_KHO";
				colvarKieuKho.DataType = DbType.Byte;
				colvarKieuKho.MaxLength = 0;
				colvarKieuKho.AutoIncrement = false;
				colvarKieuKho.IsNullable = true;
				colvarKieuKho.IsPrimaryKey = false;
				colvarKieuKho.IsForeignKey = false;
				colvarKieuKho.IsReadOnly = false;
				
						colvarKieuKho.DefaultSetting = @"((0))";
				colvarKieuKho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKieuKho);
				
				TableSchema.TableColumn colvarLoaiKho = new TableSchema.TableColumn(schema);
				colvarLoaiKho.ColumnName = "LOAI_KHO";
				colvarLoaiKho.DataType = DbType.String;
				colvarLoaiKho.MaxLength = 50;
				colvarLoaiKho.AutoIncrement = false;
				colvarLoaiKho.IsNullable = true;
				colvarLoaiKho.IsPrimaryKey = false;
				colvarLoaiKho.IsForeignKey = false;
				colvarLoaiKho.IsReadOnly = false;
				
						colvarLoaiKho.DefaultSetting = @"(N'THUOC')";
				colvarLoaiKho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoaiKho);
				
				TableSchema.TableColumn colvarThuKho = new TableSchema.TableColumn(schema);
				colvarThuKho.ColumnName = "THU_KHO";
				colvarThuKho.DataType = DbType.String;
				colvarThuKho.MaxLength = 50;
				colvarThuKho.AutoIncrement = false;
				colvarThuKho.IsNullable = true;
				colvarThuKho.IsPrimaryKey = false;
				colvarThuKho.IsForeignKey = false;
				colvarThuKho.IsReadOnly = false;
				colvarThuKho.DefaultSetting = @"";
				colvarThuKho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThuKho);
				
				TableSchema.TableColumn colvarIdKhoa = new TableSchema.TableColumn(schema);
				colvarIdKhoa.ColumnName = "ID_KHOA";
				colvarIdKhoa.DataType = DbType.Int16;
				colvarIdKhoa.MaxLength = 0;
				colvarIdKhoa.AutoIncrement = false;
				colvarIdKhoa.IsNullable = false;
				colvarIdKhoa.IsPrimaryKey = false;
				colvarIdKhoa.IsForeignKey = false;
				colvarIdKhoa.IsReadOnly = false;
				
						colvarIdKhoa.DefaultSetting = @"((0))";
				colvarIdKhoa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdKhoa);
				
				TableSchema.TableColumn colvarGhiChu = new TableSchema.TableColumn(schema);
				colvarGhiChu.ColumnName = "GHI_CHU";
				colvarGhiChu.DataType = DbType.String;
				colvarGhiChu.MaxLength = 255;
				colvarGhiChu.AutoIncrement = false;
				colvarGhiChu.IsNullable = true;
				colvarGhiChu.IsPrimaryKey = false;
				colvarGhiChu.IsForeignKey = false;
				colvarGhiChu.IsReadOnly = false;
				colvarGhiChu.DefaultSetting = @"";
				colvarGhiChu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGhiChu);
				
				TableSchema.TableColumn colvarKhoBan = new TableSchema.TableColumn(schema);
				colvarKhoBan.ColumnName = "KHO_BAN";
				colvarKhoBan.DataType = DbType.Byte;
				colvarKhoBan.MaxLength = 0;
				colvarKhoBan.AutoIncrement = false;
				colvarKhoBan.IsNullable = true;
				colvarKhoBan.IsPrimaryKey = false;
				colvarKhoBan.IsForeignKey = false;
				colvarKhoBan.IsReadOnly = false;
				
						colvarKhoBan.DefaultSetting = @"((0))";
				colvarKhoBan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKhoBan);
				
				TableSchema.TableColumn colvarKtraTon = new TableSchema.TableColumn(schema);
				colvarKtraTon.ColumnName = "KTRA_TON";
				colvarKtraTon.DataType = DbType.Byte;
				colvarKtraTon.MaxLength = 0;
				colvarKtraTon.AutoIncrement = false;
				colvarKtraTon.IsNullable = true;
				colvarKtraTon.IsPrimaryKey = false;
				colvarKtraTon.IsForeignKey = false;
				colvarKtraTon.IsReadOnly = false;
				
						colvarKtraTon.DefaultSetting = @"((0))";
				colvarKtraTon.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKtraTon);
				
				TableSchema.TableColumn colvarNgaySua = new TableSchema.TableColumn(schema);
				colvarNgaySua.ColumnName = "NGAY_SUA";
				colvarNgaySua.DataType = DbType.DateTime;
				colvarNgaySua.MaxLength = 0;
				colvarNgaySua.AutoIncrement = false;
				colvarNgaySua.IsNullable = true;
				colvarNgaySua.IsPrimaryKey = false;
				colvarNgaySua.IsForeignKey = false;
				colvarNgaySua.IsReadOnly = false;
				colvarNgaySua.DefaultSetting = @"";
				colvarNgaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgaySua);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NGAY_TAO";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				
						colvarNgayTao.DefaultSetting = @"(getdate())";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNguoiSua = new TableSchema.TableColumn(schema);
				colvarNguoiSua.ColumnName = "NGUOI_SUA";
				colvarNguoiSua.DataType = DbType.String;
				colvarNguoiSua.MaxLength = 50;
				colvarNguoiSua.AutoIncrement = false;
				colvarNguoiSua.IsNullable = true;
				colvarNguoiSua.IsPrimaryKey = false;
				colvarNguoiSua.IsForeignKey = false;
				colvarNguoiSua.IsReadOnly = false;
				colvarNguoiSua.DefaultSetting = @"";
				colvarNguoiSua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiSua);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "NGUOI_TAO";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 50;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarLaTuthuoc = new TableSchema.TableColumn(schema);
				colvarLaTuthuoc.ColumnName = "LA_TUTHUOC";
				colvarLaTuthuoc.DataType = DbType.Byte;
				colvarLaTuthuoc.MaxLength = 0;
				colvarLaTuthuoc.AutoIncrement = false;
				colvarLaTuthuoc.IsNullable = true;
				colvarLaTuthuoc.IsPrimaryKey = false;
				colvarLaTuthuoc.IsForeignKey = false;
				colvarLaTuthuoc.IsReadOnly = false;
				
						colvarLaTuthuoc.DefaultSetting = @"((0))";
				colvarLaTuthuoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLaTuthuoc);
				
				TableSchema.TableColumn colvarLoaiBnhan = new TableSchema.TableColumn(schema);
				colvarLoaiBnhan.ColumnName = "LOAI_BNHAN";
				colvarLoaiBnhan.DataType = DbType.String;
				colvarLoaiBnhan.MaxLength = 10;
				colvarLoaiBnhan.AutoIncrement = false;
				colvarLoaiBnhan.IsNullable = true;
				colvarLoaiBnhan.IsPrimaryKey = false;
				colvarLoaiBnhan.IsForeignKey = false;
				colvarLoaiBnhan.IsReadOnly = false;
				
						colvarLoaiBnhan.DefaultSetting = @"(N'TATCA')";
				colvarLoaiBnhan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoaiBnhan);
				
				TableSchema.TableColumn colvarHienThi = new TableSchema.TableColumn(schema);
				colvarHienThi.ColumnName = "HIEN_THI";
				colvarHienThi.DataType = DbType.Byte;
				colvarHienThi.MaxLength = 0;
				colvarHienThi.AutoIncrement = false;
				colvarHienThi.IsNullable = true;
				colvarHienThi.IsPrimaryKey = false;
				colvarHienThi.IsForeignKey = false;
				colvarHienThi.IsReadOnly = false;
				
						colvarHienThi.DefaultSetting = @"((1))";
				colvarHienThi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHienThi);
				
				TableSchema.TableColumn colvarIsThuocHetHan = new TableSchema.TableColumn(schema);
				colvarIsThuocHetHan.ColumnName = "IsThuocHetHan";
				colvarIsThuocHetHan.DataType = DbType.Boolean;
				colvarIsThuocHetHan.MaxLength = 0;
				colvarIsThuocHetHan.AutoIncrement = false;
				colvarIsThuocHetHan.IsNullable = true;
				colvarIsThuocHetHan.IsPrimaryKey = false;
				colvarIsThuocHetHan.IsForeignKey = false;
				colvarIsThuocHetHan.IsReadOnly = false;
				
						colvarIsThuocHetHan.DefaultSetting = @"((0))";
				colvarIsThuocHetHan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsThuocHetHan);
				
				TableSchema.TableColumn colvarIsKeDonThuoc = new TableSchema.TableColumn(schema);
				colvarIsKeDonThuoc.ColumnName = "IsKeDonThuoc";
				colvarIsKeDonThuoc.DataType = DbType.Boolean;
				colvarIsKeDonThuoc.MaxLength = 0;
				colvarIsKeDonThuoc.AutoIncrement = false;
				colvarIsKeDonThuoc.IsNullable = true;
				colvarIsKeDonThuoc.IsPrimaryKey = false;
				colvarIsKeDonThuoc.IsForeignKey = false;
				colvarIsKeDonThuoc.IsReadOnly = false;
				
						colvarIsKeDonThuoc.DefaultSetting = @"((0))";
				colvarIsKeDonThuoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsKeDonThuoc);
				
				TableSchema.TableColumn colvarIsKhoNhap = new TableSchema.TableColumn(schema);
				colvarIsKhoNhap.ColumnName = "IsKhoNhap";
				colvarIsKhoNhap.DataType = DbType.Boolean;
				colvarIsKhoNhap.MaxLength = 0;
				colvarIsKhoNhap.AutoIncrement = false;
				colvarIsKhoNhap.IsNullable = true;
				colvarIsKhoNhap.IsPrimaryKey = false;
				colvarIsKhoNhap.IsForeignKey = false;
				colvarIsKhoNhap.IsReadOnly = false;
				
						colvarIsKhoNhap.DefaultSetting = @"((0))";
				colvarIsKhoNhap.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsKhoNhap);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("D_KHO",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdKho")]
		[Bindable(true)]
		public int IdKho 
		{
			get { return GetColumnValue<int>(Columns.IdKho); }
			set { SetColumnValue(Columns.IdKho, value); }
		}
		  
		[XmlAttribute("MaKho")]
		[Bindable(true)]
		public string MaKho 
		{
			get { return GetColumnValue<string>(Columns.MaKho); }
			set { SetColumnValue(Columns.MaKho, value); }
		}
		  
		[XmlAttribute("TenKho")]
		[Bindable(true)]
		public string TenKho 
		{
			get { return GetColumnValue<string>(Columns.TenKho); }
			set { SetColumnValue(Columns.TenKho, value); }
		}
		  
		[XmlAttribute("ThuTu")]
		[Bindable(true)]
		public int? ThuTu 
		{
			get { return GetColumnValue<int?>(Columns.ThuTu); }
			set { SetColumnValue(Columns.ThuTu, value); }
		}
		  
		[XmlAttribute("KieuKho")]
		[Bindable(true)]
		public byte? KieuKho 
		{
			get { return GetColumnValue<byte?>(Columns.KieuKho); }
			set { SetColumnValue(Columns.KieuKho, value); }
		}
		  
		[XmlAttribute("LoaiKho")]
		[Bindable(true)]
		public string LoaiKho 
		{
			get { return GetColumnValue<string>(Columns.LoaiKho); }
			set { SetColumnValue(Columns.LoaiKho, value); }
		}
		  
		[XmlAttribute("ThuKho")]
		[Bindable(true)]
		public string ThuKho 
		{
			get { return GetColumnValue<string>(Columns.ThuKho); }
			set { SetColumnValue(Columns.ThuKho, value); }
		}
		  
		[XmlAttribute("IdKhoa")]
		[Bindable(true)]
		public short IdKhoa 
		{
			get { return GetColumnValue<short>(Columns.IdKhoa); }
			set { SetColumnValue(Columns.IdKhoa, value); }
		}
		  
		[XmlAttribute("GhiChu")]
		[Bindable(true)]
		public string GhiChu 
		{
			get { return GetColumnValue<string>(Columns.GhiChu); }
			set { SetColumnValue(Columns.GhiChu, value); }
		}
		  
		[XmlAttribute("KhoBan")]
		[Bindable(true)]
		public byte? KhoBan 
		{
			get { return GetColumnValue<byte?>(Columns.KhoBan); }
			set { SetColumnValue(Columns.KhoBan, value); }
		}
		  
		[XmlAttribute("KtraTon")]
		[Bindable(true)]
		public byte? KtraTon 
		{
			get { return GetColumnValue<byte?>(Columns.KtraTon); }
			set { SetColumnValue(Columns.KtraTon, value); }
		}
		  
		[XmlAttribute("NgaySua")]
		[Bindable(true)]
		public DateTime? NgaySua 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgaySua); }
			set { SetColumnValue(Columns.NgaySua, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NguoiSua")]
		[Bindable(true)]
		public string NguoiSua 
		{
			get { return GetColumnValue<string>(Columns.NguoiSua); }
			set { SetColumnValue(Columns.NguoiSua, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("LaTuthuoc")]
		[Bindable(true)]
		public byte? LaTuthuoc 
		{
			get { return GetColumnValue<byte?>(Columns.LaTuthuoc); }
			set { SetColumnValue(Columns.LaTuthuoc, value); }
		}
		  
		[XmlAttribute("LoaiBnhan")]
		[Bindable(true)]
		public string LoaiBnhan 
		{
			get { return GetColumnValue<string>(Columns.LoaiBnhan); }
			set { SetColumnValue(Columns.LoaiBnhan, value); }
		}
		  
		[XmlAttribute("HienThi")]
		[Bindable(true)]
		public byte? HienThi 
		{
			get { return GetColumnValue<byte?>(Columns.HienThi); }
			set { SetColumnValue(Columns.HienThi, value); }
		}
		  
		[XmlAttribute("IsThuocHetHan")]
		[Bindable(true)]
		public bool? IsThuocHetHan 
		{
			get { return GetColumnValue<bool?>(Columns.IsThuocHetHan); }
			set { SetColumnValue(Columns.IsThuocHetHan, value); }
		}
		  
		[XmlAttribute("IsKeDonThuoc")]
		[Bindable(true)]
		public bool? IsKeDonThuoc 
		{
			get { return GetColumnValue<bool?>(Columns.IsKeDonThuoc); }
			set { SetColumnValue(Columns.IsKeDonThuoc, value); }
		}
		  
		[XmlAttribute("IsKhoNhap")]
		[Bindable(true)]
		public bool? IsKhoNhap 
		{
			get { return GetColumnValue<bool?>(Columns.IsKhoNhap); }
			set { SetColumnValue(Columns.IsKhoNhap, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaKho,string varTenKho,int? varThuTu,byte? varKieuKho,string varLoaiKho,string varThuKho,short varIdKhoa,string varGhiChu,byte? varKhoBan,byte? varKtraTon,DateTime? varNgaySua,DateTime? varNgayTao,string varNguoiSua,string varNguoiTao,byte? varLaTuthuoc,string varLoaiBnhan,byte? varHienThi,bool? varIsThuocHetHan,bool? varIsKeDonThuoc,bool? varIsKhoNhap)
		{
			DKho item = new DKho();
			
			item.MaKho = varMaKho;
			
			item.TenKho = varTenKho;
			
			item.ThuTu = varThuTu;
			
			item.KieuKho = varKieuKho;
			
			item.LoaiKho = varLoaiKho;
			
			item.ThuKho = varThuKho;
			
			item.IdKhoa = varIdKhoa;
			
			item.GhiChu = varGhiChu;
			
			item.KhoBan = varKhoBan;
			
			item.KtraTon = varKtraTon;
			
			item.NgaySua = varNgaySua;
			
			item.NgayTao = varNgayTao;
			
			item.NguoiSua = varNguoiSua;
			
			item.NguoiTao = varNguoiTao;
			
			item.LaTuthuoc = varLaTuthuoc;
			
			item.LoaiBnhan = varLoaiBnhan;
			
			item.HienThi = varHienThi;
			
			item.IsThuocHetHan = varIsThuocHetHan;
			
			item.IsKeDonThuoc = varIsKeDonThuoc;
			
			item.IsKhoNhap = varIsKhoNhap;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdKho,string varMaKho,string varTenKho,int? varThuTu,byte? varKieuKho,string varLoaiKho,string varThuKho,short varIdKhoa,string varGhiChu,byte? varKhoBan,byte? varKtraTon,DateTime? varNgaySua,DateTime? varNgayTao,string varNguoiSua,string varNguoiTao,byte? varLaTuthuoc,string varLoaiBnhan,byte? varHienThi,bool? varIsThuocHetHan,bool? varIsKeDonThuoc,bool? varIsKhoNhap)
		{
			DKho item = new DKho();
			
				item.IdKho = varIdKho;
			
				item.MaKho = varMaKho;
			
				item.TenKho = varTenKho;
			
				item.ThuTu = varThuTu;
			
				item.KieuKho = varKieuKho;
			
				item.LoaiKho = varLoaiKho;
			
				item.ThuKho = varThuKho;
			
				item.IdKhoa = varIdKhoa;
			
				item.GhiChu = varGhiChu;
			
				item.KhoBan = varKhoBan;
			
				item.KtraTon = varKtraTon;
			
				item.NgaySua = varNgaySua;
			
				item.NgayTao = varNgayTao;
			
				item.NguoiSua = varNguoiSua;
			
				item.NguoiTao = varNguoiTao;
			
				item.LaTuthuoc = varLaTuthuoc;
			
				item.LoaiBnhan = varLoaiBnhan;
			
				item.HienThi = varHienThi;
			
				item.IsThuocHetHan = varIsThuocHetHan;
			
				item.IsKeDonThuoc = varIsKeDonThuoc;
			
				item.IsKhoNhap = varIsKhoNhap;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdKhoColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaKhoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenKhoColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ThuTuColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn KieuKhoColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn LoaiKhoColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ThuKhoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IdKhoaColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn GhiChuColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn KhoBanColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn KtraTonColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn NgaySuaColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiSuaColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn LaTuthuocColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn LoaiBnhanColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn HienThiColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn IsThuocHetHanColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn IsKeDonThuocColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn IsKhoNhapColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdKho = @"ID_KHO";
			 public static string MaKho = @"MA_KHO";
			 public static string TenKho = @"TEN_KHO";
			 public static string ThuTu = @"THU_TU";
			 public static string KieuKho = @"KIEU_KHO";
			 public static string LoaiKho = @"LOAI_KHO";
			 public static string ThuKho = @"THU_KHO";
			 public static string IdKhoa = @"ID_KHOA";
			 public static string GhiChu = @"GHI_CHU";
			 public static string KhoBan = @"KHO_BAN";
			 public static string KtraTon = @"KTRA_TON";
			 public static string NgaySua = @"NGAY_SUA";
			 public static string NgayTao = @"NGAY_TAO";
			 public static string NguoiSua = @"NGUOI_SUA";
			 public static string NguoiTao = @"NGUOI_TAO";
			 public static string LaTuthuoc = @"LA_TUTHUOC";
			 public static string LoaiBnhan = @"LOAI_BNHAN";
			 public static string HienThi = @"HIEN_THI";
			 public static string IsThuocHetHan = @"IsThuocHetHan";
			 public static string IsKeDonThuoc = @"IsKeDonThuoc";
			 public static string IsKhoNhap = @"IsKhoNhap";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
