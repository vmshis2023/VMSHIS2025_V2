using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the SysTrinhkyBhyt class.
	/// </summary>
    [Serializable]
	public partial class SysTrinhkyBhytCollection : ActiveList<SysTrinhkyBhyt, SysTrinhkyBhytCollection>
	{	   
		public SysTrinhkyBhytCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysTrinhkyBhytCollection</returns>
		public SysTrinhkyBhytCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysTrinhkyBhyt o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SYS_TRINHKY_BHYT table.
	/// </summary>
	[Serializable]
	public partial class SysTrinhkyBhyt : ActiveRecord<SysTrinhkyBhyt>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SysTrinhkyBhyt()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysTrinhkyBhyt(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysTrinhkyBhyt(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysTrinhkyBhyt(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SYS_TRINHKY_BHYT", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTenForm = new TableSchema.TableColumn(schema);
				colvarTenForm.ColumnName = "TEN_FORM";
				colvarTenForm.DataType = DbType.String;
				colvarTenForm.MaxLength = 100;
				colvarTenForm.AutoIncrement = false;
				colvarTenForm.IsNullable = false;
				colvarTenForm.IsPrimaryKey = true;
				colvarTenForm.IsForeignKey = false;
				colvarTenForm.IsReadOnly = false;
				colvarTenForm.DefaultSetting = @"";
				colvarTenForm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenForm);
				
				TableSchema.TableColumn colvarTenUser = new TableSchema.TableColumn(schema);
				colvarTenUser.ColumnName = "TEN_USER";
				colvarTenUser.DataType = DbType.String;
				colvarTenUser.MaxLength = 50;
				colvarTenUser.AutoIncrement = false;
				colvarTenUser.IsNullable = false;
				colvarTenUser.IsPrimaryKey = true;
				colvarTenUser.IsForeignKey = false;
				colvarTenUser.IsReadOnly = false;
				colvarTenUser.DefaultSetting = @"";
				colvarTenUser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenUser);
				
				TableSchema.TableColumn colvarTenTrinhky = new TableSchema.TableColumn(schema);
				colvarTenTrinhky.ColumnName = "TEN_TRINHKY";
				colvarTenTrinhky.DataType = DbType.String;
				colvarTenTrinhky.MaxLength = 50;
				colvarTenTrinhky.AutoIncrement = false;
				colvarTenTrinhky.IsNullable = false;
				colvarTenTrinhky.IsPrimaryKey = true;
				colvarTenTrinhky.IsForeignKey = false;
				colvarTenTrinhky.IsReadOnly = false;
				colvarTenTrinhky.DefaultSetting = @"";
				colvarTenTrinhky.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenTrinhky);
				
				TableSchema.TableColumn colvarIdNhanvien = new TableSchema.TableColumn(schema);
				colvarIdNhanvien.ColumnName = "ID_NHANVIEN";
				colvarIdNhanvien.DataType = DbType.Int32;
				colvarIdNhanvien.MaxLength = 0;
				colvarIdNhanvien.AutoIncrement = false;
				colvarIdNhanvien.IsNullable = true;
				colvarIdNhanvien.IsPrimaryKey = false;
				colvarIdNhanvien.IsForeignKey = false;
				colvarIdNhanvien.IsReadOnly = false;
				colvarIdNhanvien.DefaultSetting = @"";
				colvarIdNhanvien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdNhanvien);
				
				TableSchema.TableColumn colvarNoiDung = new TableSchema.TableColumn(schema);
				colvarNoiDung.ColumnName = "NOI_DUNG";
				colvarNoiDung.DataType = DbType.String;
				colvarNoiDung.MaxLength = 500;
				colvarNoiDung.AutoIncrement = false;
				colvarNoiDung.IsNullable = true;
				colvarNoiDung.IsPrimaryKey = false;
				colvarNoiDung.IsForeignKey = false;
				colvarNoiDung.IsReadOnly = false;
				colvarNoiDung.DefaultSetting = @"";
				colvarNoiDung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoiDung);
				
				TableSchema.TableColumn colvarKieuKy = new TableSchema.TableColumn(schema);
				colvarKieuKy.ColumnName = "KIEU_KY";
				colvarKieuKy.DataType = DbType.Int32;
				colvarKieuKy.MaxLength = 0;
				colvarKieuKy.AutoIncrement = false;
				colvarKieuKy.IsNullable = true;
				colvarKieuKy.IsPrimaryKey = false;
				colvarKieuKy.IsForeignKey = false;
				colvarKieuKy.IsReadOnly = false;
				colvarKieuKy.DefaultSetting = @"";
				colvarKieuKy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKieuKy);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("SYS_TRINHKY_BHYT",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TenForm")]
		[Bindable(true)]
		public string TenForm 
		{
			get { return GetColumnValue<string>(Columns.TenForm); }
			set { SetColumnValue(Columns.TenForm, value); }
		}
		  
		[XmlAttribute("TenUser")]
		[Bindable(true)]
		public string TenUser 
		{
			get { return GetColumnValue<string>(Columns.TenUser); }
			set { SetColumnValue(Columns.TenUser, value); }
		}
		  
		[XmlAttribute("TenTrinhky")]
		[Bindable(true)]
		public string TenTrinhky 
		{
			get { return GetColumnValue<string>(Columns.TenTrinhky); }
			set { SetColumnValue(Columns.TenTrinhky, value); }
		}
		  
		[XmlAttribute("IdNhanvien")]
		[Bindable(true)]
		public int? IdNhanvien 
		{
			get { return GetColumnValue<int?>(Columns.IdNhanvien); }
			set { SetColumnValue(Columns.IdNhanvien, value); }
		}
		  
		[XmlAttribute("NoiDung")]
		[Bindable(true)]
		public string NoiDung 
		{
			get { return GetColumnValue<string>(Columns.NoiDung); }
			set { SetColumnValue(Columns.NoiDung, value); }
		}
		  
		[XmlAttribute("KieuKy")]
		[Bindable(true)]
		public int? KieuKy 
		{
			get { return GetColumnValue<int?>(Columns.KieuKy); }
			set { SetColumnValue(Columns.KieuKy, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varTenForm,string varTenUser,string varTenTrinhky,int? varIdNhanvien,string varNoiDung,int? varKieuKy)
		{
			SysTrinhkyBhyt item = new SysTrinhkyBhyt();
			
			item.TenForm = varTenForm;
			
			item.TenUser = varTenUser;
			
			item.TenTrinhky = varTenTrinhky;
			
			item.IdNhanvien = varIdNhanvien;
			
			item.NoiDung = varNoiDung;
			
			item.KieuKy = varKieuKy;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varTenForm,string varTenUser,string varTenTrinhky,int? varIdNhanvien,string varNoiDung,int? varKieuKy)
		{
			SysTrinhkyBhyt item = new SysTrinhkyBhyt();
			
				item.TenForm = varTenForm;
			
				item.TenUser = varTenUser;
			
				item.TenTrinhky = varTenTrinhky;
			
				item.IdNhanvien = varIdNhanvien;
			
				item.NoiDung = varNoiDung;
			
				item.KieuKy = varKieuKy;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TenFormColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TenUserColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenTrinhkyColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IdNhanvienColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn NoiDungColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn KieuKyColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TenForm = @"TEN_FORM";
			 public static string TenUser = @"TEN_USER";
			 public static string TenTrinhky = @"TEN_TRINHKY";
			 public static string IdNhanvien = @"ID_NHANVIEN";
			 public static string NoiDung = @"NOI_DUNG";
			 public static string KieuKy = @"KIEU_KY";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
