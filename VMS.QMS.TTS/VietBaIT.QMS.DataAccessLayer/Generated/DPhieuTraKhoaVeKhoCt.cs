using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the DPhieuTraKhoaVeKhoCt class.
	/// </summary>
    [Serializable]
	public partial class DPhieuTraKhoaVeKhoCtCollection : ActiveList<DPhieuTraKhoaVeKhoCt, DPhieuTraKhoaVeKhoCtCollection>
	{	   
		public DPhieuTraKhoaVeKhoCtCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DPhieuTraKhoaVeKhoCtCollection</returns>
		public DPhieuTraKhoaVeKhoCtCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DPhieuTraKhoaVeKhoCt o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the D_PhieuTra_Khoa_VeKho_CT table.
	/// </summary>
	[Serializable]
	public partial class DPhieuTraKhoaVeKhoCt : ActiveRecord<DPhieuTraKhoaVeKhoCt>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DPhieuTraKhoaVeKhoCt()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DPhieuTraKhoaVeKhoCt(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DPhieuTraKhoaVeKhoCt(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DPhieuTraKhoaVeKhoCt(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("D_PhieuTra_Khoa_VeKho_CT", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdPhieuTraKhoCt = new TableSchema.TableColumn(schema);
				colvarIdPhieuTraKhoCt.ColumnName = "Id_PhieuTra_Kho_CT";
				colvarIdPhieuTraKhoCt.DataType = DbType.Int32;
				colvarIdPhieuTraKhoCt.MaxLength = 0;
				colvarIdPhieuTraKhoCt.AutoIncrement = true;
				colvarIdPhieuTraKhoCt.IsNullable = false;
				colvarIdPhieuTraKhoCt.IsPrimaryKey = true;
				colvarIdPhieuTraKhoCt.IsForeignKey = false;
				colvarIdPhieuTraKhoCt.IsReadOnly = false;
				colvarIdPhieuTraKhoCt.DefaultSetting = @"";
				colvarIdPhieuTraKhoCt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhieuTraKhoCt);
				
				TableSchema.TableColumn colvarIdPhieuTraKho = new TableSchema.TableColumn(schema);
				colvarIdPhieuTraKho.ColumnName = "Id_PhieuTra_Kho";
				colvarIdPhieuTraKho.DataType = DbType.Int32;
				colvarIdPhieuTraKho.MaxLength = 0;
				colvarIdPhieuTraKho.AutoIncrement = false;
				colvarIdPhieuTraKho.IsNullable = true;
				colvarIdPhieuTraKho.IsPrimaryKey = false;
				colvarIdPhieuTraKho.IsForeignKey = false;
				colvarIdPhieuTraKho.IsReadOnly = false;
				colvarIdPhieuTraKho.DefaultSetting = @"";
				colvarIdPhieuTraKho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhieuTraKho);
				
				TableSchema.TableColumn colvarIdDonThuoc = new TableSchema.TableColumn(schema);
				colvarIdDonThuoc.ColumnName = "Id_DonThuoc";
				colvarIdDonThuoc.DataType = DbType.Int32;
				colvarIdDonThuoc.MaxLength = 0;
				colvarIdDonThuoc.AutoIncrement = false;
				colvarIdDonThuoc.IsNullable = true;
				colvarIdDonThuoc.IsPrimaryKey = false;
				colvarIdDonThuoc.IsForeignKey = false;
				colvarIdDonThuoc.IsReadOnly = false;
				colvarIdDonThuoc.DefaultSetting = @"";
				colvarIdDonThuoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdDonThuoc);
				
				TableSchema.TableColumn colvarIdDonThuocCt = new TableSchema.TableColumn(schema);
				colvarIdDonThuocCt.ColumnName = "Id_DonThuoc_CT";
				colvarIdDonThuocCt.DataType = DbType.Int32;
				colvarIdDonThuocCt.MaxLength = 0;
				colvarIdDonThuocCt.AutoIncrement = false;
				colvarIdDonThuocCt.IsNullable = true;
				colvarIdDonThuocCt.IsPrimaryKey = false;
				colvarIdDonThuocCt.IsForeignKey = false;
				colvarIdDonThuocCt.IsReadOnly = false;
				colvarIdDonThuocCt.DefaultSetting = @"";
				colvarIdDonThuocCt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdDonThuocCt);
				
				TableSchema.TableColumn colvarIdThuoc = new TableSchema.TableColumn(schema);
				colvarIdThuoc.ColumnName = "Id_Thuoc";
				colvarIdThuoc.DataType = DbType.Int32;
				colvarIdThuoc.MaxLength = 0;
				colvarIdThuoc.AutoIncrement = false;
				colvarIdThuoc.IsNullable = true;
				colvarIdThuoc.IsPrimaryKey = false;
				colvarIdThuoc.IsForeignKey = false;
				colvarIdThuoc.IsReadOnly = false;
				colvarIdThuoc.DefaultSetting = @"";
				colvarIdThuoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdThuoc);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("D_PhieuTra_Khoa_VeKho_CT",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdPhieuTraKhoCt")]
		[Bindable(true)]
		public int IdPhieuTraKhoCt 
		{
			get { return GetColumnValue<int>(Columns.IdPhieuTraKhoCt); }
			set { SetColumnValue(Columns.IdPhieuTraKhoCt, value); }
		}
		  
		[XmlAttribute("IdPhieuTraKho")]
		[Bindable(true)]
		public int? IdPhieuTraKho 
		{
			get { return GetColumnValue<int?>(Columns.IdPhieuTraKho); }
			set { SetColumnValue(Columns.IdPhieuTraKho, value); }
		}
		  
		[XmlAttribute("IdDonThuoc")]
		[Bindable(true)]
		public int? IdDonThuoc 
		{
			get { return GetColumnValue<int?>(Columns.IdDonThuoc); }
			set { SetColumnValue(Columns.IdDonThuoc, value); }
		}
		  
		[XmlAttribute("IdDonThuocCt")]
		[Bindable(true)]
		public int? IdDonThuocCt 
		{
			get { return GetColumnValue<int?>(Columns.IdDonThuocCt); }
			set { SetColumnValue(Columns.IdDonThuocCt, value); }
		}
		  
		[XmlAttribute("IdThuoc")]
		[Bindable(true)]
		public int? IdThuoc 
		{
			get { return GetColumnValue<int?>(Columns.IdThuoc); }
			set { SetColumnValue(Columns.IdThuoc, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varIdPhieuTraKho,int? varIdDonThuoc,int? varIdDonThuocCt,int? varIdThuoc)
		{
			DPhieuTraKhoaVeKhoCt item = new DPhieuTraKhoaVeKhoCt();
			
			item.IdPhieuTraKho = varIdPhieuTraKho;
			
			item.IdDonThuoc = varIdDonThuoc;
			
			item.IdDonThuocCt = varIdDonThuocCt;
			
			item.IdThuoc = varIdThuoc;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdPhieuTraKhoCt,int? varIdPhieuTraKho,int? varIdDonThuoc,int? varIdDonThuocCt,int? varIdThuoc)
		{
			DPhieuTraKhoaVeKhoCt item = new DPhieuTraKhoaVeKhoCt();
			
				item.IdPhieuTraKhoCt = varIdPhieuTraKhoCt;
			
				item.IdPhieuTraKho = varIdPhieuTraKho;
			
				item.IdDonThuoc = varIdDonThuoc;
			
				item.IdDonThuocCt = varIdDonThuocCt;
			
				item.IdThuoc = varIdThuoc;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdPhieuTraKhoCtColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdPhieuTraKhoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdDonThuocColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IdDonThuocCtColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IdThuocColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdPhieuTraKhoCt = @"Id_PhieuTra_Kho_CT";
			 public static string IdPhieuTraKho = @"Id_PhieuTra_Kho";
			 public static string IdDonThuoc = @"Id_DonThuoc";
			 public static string IdDonThuocCt = @"Id_DonThuoc_CT";
			 public static string IdThuoc = @"Id_Thuoc";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
