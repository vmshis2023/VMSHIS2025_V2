using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LDanhmucThem class.
	/// </summary>
    [Serializable]
	public partial class LDanhmucThemCollection : ActiveList<LDanhmucThem, LDanhmucThemCollection>
	{	   
		public LDanhmucThemCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LDanhmucThemCollection</returns>
		public LDanhmucThemCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LDanhmucThem o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_DANHMUC_THEM table.
	/// </summary>
	[Serializable]
	public partial class LDanhmucThem : ActiveRecord<LDanhmucThem>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LDanhmucThem()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LDanhmucThem(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LDanhmucThem(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LDanhmucThem(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_DANHMUC_THEM", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdDvu = new TableSchema.TableColumn(schema);
				colvarIdDvu.ColumnName = "ID_DVU";
				colvarIdDvu.DataType = DbType.Int32;
				colvarIdDvu.MaxLength = 0;
				colvarIdDvu.AutoIncrement = true;
				colvarIdDvu.IsNullable = false;
				colvarIdDvu.IsPrimaryKey = true;
				colvarIdDvu.IsForeignKey = false;
				colvarIdDvu.IsReadOnly = false;
				colvarIdDvu.DefaultSetting = @"";
				colvarIdDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdDvu);
				
				TableSchema.TableColumn colvarMaKieuDvu = new TableSchema.TableColumn(schema);
				colvarMaKieuDvu.ColumnName = "MA_KIEU_DVU";
				colvarMaKieuDvu.DataType = DbType.String;
				colvarMaKieuDvu.MaxLength = 50;
				colvarMaKieuDvu.AutoIncrement = false;
				colvarMaKieuDvu.IsNullable = true;
				colvarMaKieuDvu.IsPrimaryKey = false;
				colvarMaKieuDvu.IsForeignKey = false;
				colvarMaKieuDvu.IsReadOnly = false;
				colvarMaKieuDvu.DefaultSetting = @"";
				colvarMaKieuDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaKieuDvu);
				
				TableSchema.TableColumn colvarMaDtuong = new TableSchema.TableColumn(schema);
				colvarMaDtuong.ColumnName = "MA_DTUONG";
				colvarMaDtuong.DataType = DbType.String;
				colvarMaDtuong.MaxLength = 50;
				colvarMaDtuong.AutoIncrement = false;
				colvarMaDtuong.IsNullable = true;
				colvarMaDtuong.IsPrimaryKey = false;
				colvarMaDtuong.IsForeignKey = false;
				colvarMaDtuong.IsReadOnly = false;
				colvarMaDtuong.DefaultSetting = @"";
				colvarMaDtuong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaDtuong);
				
				TableSchema.TableColumn colvarTenDvu = new TableSchema.TableColumn(schema);
				colvarTenDvu.ColumnName = "TEN_DVU";
				colvarTenDvu.DataType = DbType.String;
				colvarTenDvu.MaxLength = 200;
				colvarTenDvu.AutoIncrement = false;
				colvarTenDvu.IsNullable = true;
				colvarTenDvu.IsPrimaryKey = false;
				colvarTenDvu.IsForeignKey = false;
				colvarTenDvu.IsReadOnly = false;
				colvarTenDvu.DefaultSetting = @"";
				colvarTenDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenDvu);
				
				TableSchema.TableColumn colvarIdKhoa = new TableSchema.TableColumn(schema);
				colvarIdKhoa.ColumnName = "ID_KHOA";
				colvarIdKhoa.DataType = DbType.Int32;
				colvarIdKhoa.MaxLength = 0;
				colvarIdKhoa.AutoIncrement = false;
				colvarIdKhoa.IsNullable = true;
				colvarIdKhoa.IsPrimaryKey = false;
				colvarIdKhoa.IsForeignKey = false;
				colvarIdKhoa.IsReadOnly = false;
				colvarIdKhoa.DefaultSetting = @"";
				colvarIdKhoa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdKhoa);
				
				TableSchema.TableColumn colvarIdPhong = new TableSchema.TableColumn(schema);
				colvarIdPhong.ColumnName = "ID_PHONG";
				colvarIdPhong.DataType = DbType.Int32;
				colvarIdPhong.MaxLength = 0;
				colvarIdPhong.AutoIncrement = false;
				colvarIdPhong.IsNullable = true;
				colvarIdPhong.IsPrimaryKey = false;
				colvarIdPhong.IsForeignKey = false;
				colvarIdPhong.IsReadOnly = false;
				colvarIdPhong.DefaultSetting = @"";
				colvarIdPhong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhong);
				
				TableSchema.TableColumn colvarIdGiuong = new TableSchema.TableColumn(schema);
				colvarIdGiuong.ColumnName = "ID_GIUONG";
				colvarIdGiuong.DataType = DbType.Int32;
				colvarIdGiuong.MaxLength = 0;
				colvarIdGiuong.AutoIncrement = false;
				colvarIdGiuong.IsNullable = true;
				colvarIdGiuong.IsPrimaryKey = false;
				colvarIdGiuong.IsForeignKey = false;
				colvarIdGiuong.IsReadOnly = false;
				colvarIdGiuong.DefaultSetting = @"";
				colvarIdGiuong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdGiuong);
				
				TableSchema.TableColumn colvarDonGia = new TableSchema.TableColumn(schema);
				colvarDonGia.ColumnName = "DON_GIA";
				colvarDonGia.DataType = DbType.Decimal;
				colvarDonGia.MaxLength = 0;
				colvarDonGia.AutoIncrement = false;
				colvarDonGia.IsNullable = true;
				colvarDonGia.IsPrimaryKey = false;
				colvarDonGia.IsForeignKey = false;
				colvarDonGia.IsReadOnly = false;
				colvarDonGia.DefaultSetting = @"";
				colvarDonGia.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDonGia);
				
				TableSchema.TableColumn colvarDonVi = new TableSchema.TableColumn(schema);
				colvarDonVi.ColumnName = "DON_VI";
				colvarDonVi.DataType = DbType.Int32;
				colvarDonVi.MaxLength = 0;
				colvarDonVi.AutoIncrement = false;
				colvarDonVi.IsNullable = true;
				colvarDonVi.IsPrimaryKey = false;
				colvarDonVi.IsForeignKey = false;
				colvarDonVi.IsReadOnly = false;
				colvarDonVi.DefaultSetting = @"";
				colvarDonVi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDonVi);
				
				TableSchema.TableColumn colvarPhuThu = new TableSchema.TableColumn(schema);
				colvarPhuThu.ColumnName = "PHU_THU";
				colvarPhuThu.DataType = DbType.Decimal;
				colvarPhuThu.MaxLength = 0;
				colvarPhuThu.AutoIncrement = false;
				colvarPhuThu.IsNullable = true;
				colvarPhuThu.IsPrimaryKey = false;
				colvarPhuThu.IsForeignKey = false;
				colvarPhuThu.IsReadOnly = false;
				colvarPhuThu.DefaultSetting = @"";
				colvarPhuThu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhuThu);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_DANHMUC_THEM",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdDvu")]
		[Bindable(true)]
		public int IdDvu 
		{
			get { return GetColumnValue<int>(Columns.IdDvu); }
			set { SetColumnValue(Columns.IdDvu, value); }
		}
		  
		[XmlAttribute("MaKieuDvu")]
		[Bindable(true)]
		public string MaKieuDvu 
		{
			get { return GetColumnValue<string>(Columns.MaKieuDvu); }
			set { SetColumnValue(Columns.MaKieuDvu, value); }
		}
		  
		[XmlAttribute("MaDtuong")]
		[Bindable(true)]
		public string MaDtuong 
		{
			get { return GetColumnValue<string>(Columns.MaDtuong); }
			set { SetColumnValue(Columns.MaDtuong, value); }
		}
		  
		[XmlAttribute("TenDvu")]
		[Bindable(true)]
		public string TenDvu 
		{
			get { return GetColumnValue<string>(Columns.TenDvu); }
			set { SetColumnValue(Columns.TenDvu, value); }
		}
		  
		[XmlAttribute("IdKhoa")]
		[Bindable(true)]
		public int? IdKhoa 
		{
			get { return GetColumnValue<int?>(Columns.IdKhoa); }
			set { SetColumnValue(Columns.IdKhoa, value); }
		}
		  
		[XmlAttribute("IdPhong")]
		[Bindable(true)]
		public int? IdPhong 
		{
			get { return GetColumnValue<int?>(Columns.IdPhong); }
			set { SetColumnValue(Columns.IdPhong, value); }
		}
		  
		[XmlAttribute("IdGiuong")]
		[Bindable(true)]
		public int? IdGiuong 
		{
			get { return GetColumnValue<int?>(Columns.IdGiuong); }
			set { SetColumnValue(Columns.IdGiuong, value); }
		}
		  
		[XmlAttribute("DonGia")]
		[Bindable(true)]
		public decimal? DonGia 
		{
			get { return GetColumnValue<decimal?>(Columns.DonGia); }
			set { SetColumnValue(Columns.DonGia, value); }
		}
		  
		[XmlAttribute("DonVi")]
		[Bindable(true)]
		public int? DonVi 
		{
			get { return GetColumnValue<int?>(Columns.DonVi); }
			set { SetColumnValue(Columns.DonVi, value); }
		}
		  
		[XmlAttribute("PhuThu")]
		[Bindable(true)]
		public decimal? PhuThu 
		{
			get { return GetColumnValue<decimal?>(Columns.PhuThu); }
			set { SetColumnValue(Columns.PhuThu, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaKieuDvu,string varMaDtuong,string varTenDvu,int? varIdKhoa,int? varIdPhong,int? varIdGiuong,decimal? varDonGia,int? varDonVi,decimal? varPhuThu)
		{
			LDanhmucThem item = new LDanhmucThem();
			
			item.MaKieuDvu = varMaKieuDvu;
			
			item.MaDtuong = varMaDtuong;
			
			item.TenDvu = varTenDvu;
			
			item.IdKhoa = varIdKhoa;
			
			item.IdPhong = varIdPhong;
			
			item.IdGiuong = varIdGiuong;
			
			item.DonGia = varDonGia;
			
			item.DonVi = varDonVi;
			
			item.PhuThu = varPhuThu;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdDvu,string varMaKieuDvu,string varMaDtuong,string varTenDvu,int? varIdKhoa,int? varIdPhong,int? varIdGiuong,decimal? varDonGia,int? varDonVi,decimal? varPhuThu)
		{
			LDanhmucThem item = new LDanhmucThem();
			
				item.IdDvu = varIdDvu;
			
				item.MaKieuDvu = varMaKieuDvu;
			
				item.MaDtuong = varMaDtuong;
			
				item.TenDvu = varTenDvu;
			
				item.IdKhoa = varIdKhoa;
			
				item.IdPhong = varIdPhong;
			
				item.IdGiuong = varIdGiuong;
			
				item.DonGia = varDonGia;
			
				item.DonVi = varDonVi;
			
				item.PhuThu = varPhuThu;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdDvuColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaKieuDvuColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MaDtuongColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TenDvuColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IdKhoaColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IdPhongColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IdGiuongColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DonGiaColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DonViColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PhuThuColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdDvu = @"ID_DVU";
			 public static string MaKieuDvu = @"MA_KIEU_DVU";
			 public static string MaDtuong = @"MA_DTUONG";
			 public static string TenDvu = @"TEN_DVU";
			 public static string IdKhoa = @"ID_KHOA";
			 public static string IdPhong = @"ID_PHONG";
			 public static string IdGiuong = @"ID_GIUONG";
			 public static string DonGia = @"DON_GIA";
			 public static string DonVi = @"DON_VI";
			 public static string PhuThu = @"PHU_THU";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
