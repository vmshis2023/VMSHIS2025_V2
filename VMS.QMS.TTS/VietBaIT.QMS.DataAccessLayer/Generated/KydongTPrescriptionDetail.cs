using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the KydongTPrescriptionDetail class.
	/// </summary>
    [Serializable]
	public partial class KydongTPrescriptionDetailCollection : ActiveList<KydongTPrescriptionDetail, KydongTPrescriptionDetailCollection>
	{	   
		public KydongTPrescriptionDetailCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>KydongTPrescriptionDetailCollection</returns>
		public KydongTPrescriptionDetailCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                KydongTPrescriptionDetail o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the KYDONG_T_Prescription_Detail table.
	/// </summary>
	[Serializable]
	public partial class KydongTPrescriptionDetail : ActiveRecord<KydongTPrescriptionDetail>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public KydongTPrescriptionDetail()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public KydongTPrescriptionDetail(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public KydongTPrescriptionDetail(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public KydongTPrescriptionDetail(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("KYDONG_T_Prescription_Detail", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPresDetailId = new TableSchema.TableColumn(schema);
				colvarPresDetailId.ColumnName = "PresDetail_ID";
				colvarPresDetailId.DataType = DbType.Int32;
				colvarPresDetailId.MaxLength = 0;
				colvarPresDetailId.AutoIncrement = true;
				colvarPresDetailId.IsNullable = false;
				colvarPresDetailId.IsPrimaryKey = true;
				colvarPresDetailId.IsForeignKey = false;
				colvarPresDetailId.IsReadOnly = false;
				colvarPresDetailId.DefaultSetting = @"";
				colvarPresDetailId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPresDetailId);
				
				TableSchema.TableColumn colvarPresId = new TableSchema.TableColumn(schema);
				colvarPresId.ColumnName = "Pres_ID";
				colvarPresId.DataType = DbType.Int32;
				colvarPresId.MaxLength = 0;
				colvarPresId.AutoIncrement = false;
				colvarPresId.IsNullable = false;
				colvarPresId.IsPrimaryKey = false;
				colvarPresId.IsForeignKey = false;
				colvarPresId.IsReadOnly = false;
				colvarPresId.DefaultSetting = @"";
				colvarPresId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPresId);
				
				TableSchema.TableColumn colvarDrugId = new TableSchema.TableColumn(schema);
				colvarDrugId.ColumnName = "Drug_ID";
				colvarDrugId.DataType = DbType.Int32;
				colvarDrugId.MaxLength = 0;
				colvarDrugId.AutoIncrement = false;
				colvarDrugId.IsNullable = false;
				colvarDrugId.IsPrimaryKey = false;
				colvarDrugId.IsForeignKey = false;
				colvarDrugId.IsReadOnly = false;
				colvarDrugId.DefaultSetting = @"";
				colvarDrugId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDrugId);
				
				TableSchema.TableColumn colvarExpireDate = new TableSchema.TableColumn(schema);
				colvarExpireDate.ColumnName = "Expire_Date";
				colvarExpireDate.DataType = DbType.DateTime;
				colvarExpireDate.MaxLength = 0;
				colvarExpireDate.AutoIncrement = false;
				colvarExpireDate.IsNullable = false;
				colvarExpireDate.IsPrimaryKey = false;
				colvarExpireDate.IsForeignKey = false;
				colvarExpireDate.IsReadOnly = false;
				colvarExpireDate.DefaultSetting = @"";
				colvarExpireDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpireDate);
				
				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = false;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);
				
				TableSchema.TableColumn colvarPrice = new TableSchema.TableColumn(schema);
				colvarPrice.ColumnName = "Price";
				colvarPrice.DataType = DbType.Decimal;
				colvarPrice.MaxLength = 0;
				colvarPrice.AutoIncrement = false;
				colvarPrice.IsNullable = false;
				colvarPrice.IsPrimaryKey = false;
				colvarPrice.IsForeignKey = false;
				colvarPrice.IsReadOnly = false;
				colvarPrice.DefaultSetting = @"";
				colvarPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrice);
				
				TableSchema.TableColumn colvarSurchargePrice = new TableSchema.TableColumn(schema);
				colvarSurchargePrice.ColumnName = "Surcharge_Price";
				colvarSurchargePrice.DataType = DbType.Decimal;
				colvarSurchargePrice.MaxLength = 0;
				colvarSurchargePrice.AutoIncrement = false;
				colvarSurchargePrice.IsNullable = true;
				colvarSurchargePrice.IsPrimaryKey = false;
				colvarSurchargePrice.IsForeignKey = false;
				colvarSurchargePrice.IsReadOnly = false;
				colvarSurchargePrice.DefaultSetting = @"";
				colvarSurchargePrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurchargePrice);
				
				TableSchema.TableColumn colvarGiaBhct = new TableSchema.TableColumn(schema);
				colvarGiaBhct.ColumnName = "Gia_BHCT";
				colvarGiaBhct.DataType = DbType.Decimal;
				colvarGiaBhct.MaxLength = 0;
				colvarGiaBhct.AutoIncrement = false;
				colvarGiaBhct.IsNullable = true;
				colvarGiaBhct.IsPrimaryKey = false;
				colvarGiaBhct.IsForeignKey = false;
				colvarGiaBhct.IsReadOnly = false;
				colvarGiaBhct.DefaultSetting = @"";
				colvarGiaBhct.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGiaBhct);
				
				TableSchema.TableColumn colvarGiaBnct = new TableSchema.TableColumn(schema);
				colvarGiaBnct.ColumnName = "Gia_BNCT";
				colvarGiaBnct.DataType = DbType.Decimal;
				colvarGiaBnct.MaxLength = 0;
				colvarGiaBnct.AutoIncrement = false;
				colvarGiaBnct.IsNullable = true;
				colvarGiaBnct.IsPrimaryKey = false;
				colvarGiaBnct.IsForeignKey = false;
				colvarGiaBnct.IsReadOnly = false;
				colvarGiaBnct.DefaultSetting = @"";
				colvarGiaBnct.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGiaBnct);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 1000;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				TableSchema.TableColumn colvarPaymentStatus = new TableSchema.TableColumn(schema);
				colvarPaymentStatus.ColumnName = "Payment_Status";
				colvarPaymentStatus.DataType = DbType.Int32;
				colvarPaymentStatus.MaxLength = 0;
				colvarPaymentStatus.AutoIncrement = false;
				colvarPaymentStatus.IsNullable = true;
				colvarPaymentStatus.IsPrimaryKey = false;
				colvarPaymentStatus.IsForeignKey = false;
				colvarPaymentStatus.IsReadOnly = false;
				
						colvarPaymentStatus.DefaultSetting = @"((0))";
				colvarPaymentStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentStatus);
				
				TableSchema.TableColumn colvarQuantityCancel = new TableSchema.TableColumn(schema);
				colvarQuantityCancel.ColumnName = "Quantity_Cancel";
				colvarQuantityCancel.DataType = DbType.Int32;
				colvarQuantityCancel.MaxLength = 0;
				colvarQuantityCancel.AutoIncrement = false;
				colvarQuantityCancel.IsNullable = true;
				colvarQuantityCancel.IsPrimaryKey = false;
				colvarQuantityCancel.IsForeignKey = false;
				colvarQuantityCancel.IsReadOnly = false;
				
						colvarQuantityCancel.DefaultSetting = @"((0))";
				colvarQuantityCancel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantityCancel);
				
				TableSchema.TableColumn colvarIsCancel = new TableSchema.TableColumn(schema);
				colvarIsCancel.ColumnName = "IsCancel";
				colvarIsCancel.DataType = DbType.Int32;
				colvarIsCancel.MaxLength = 0;
				colvarIsCancel.AutoIncrement = false;
				colvarIsCancel.IsNullable = true;
				colvarIsCancel.IsPrimaryKey = false;
				colvarIsCancel.IsForeignKey = false;
				colvarIsCancel.IsReadOnly = false;
				
						colvarIsCancel.DefaultSetting = @"((0))";
				colvarIsCancel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsCancel);
				
				TableSchema.TableColumn colvarCancelBy = new TableSchema.TableColumn(schema);
				colvarCancelBy.ColumnName = "Cancel_By";
				colvarCancelBy.DataType = DbType.String;
				colvarCancelBy.MaxLength = 50;
				colvarCancelBy.AutoIncrement = false;
				colvarCancelBy.IsNullable = true;
				colvarCancelBy.IsPrimaryKey = false;
				colvarCancelBy.IsForeignKey = false;
				colvarCancelBy.IsReadOnly = false;
				colvarCancelBy.DefaultSetting = @"";
				colvarCancelBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancelBy);
				
				TableSchema.TableColumn colvarCancelDate = new TableSchema.TableColumn(schema);
				colvarCancelDate.ColumnName = "Cancel_Date";
				colvarCancelDate.DataType = DbType.DateTime;
				colvarCancelDate.MaxLength = 0;
				colvarCancelDate.AutoIncrement = false;
				colvarCancelDate.IsNullable = true;
				colvarCancelDate.IsPrimaryKey = false;
				colvarCancelDate.IsForeignKey = false;
				colvarCancelDate.IsReadOnly = false;
				colvarCancelDate.DefaultSetting = @"";
				colvarCancelDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCancelDate);
				
				TableSchema.TableColumn colvarPaymentDate = new TableSchema.TableColumn(schema);
				colvarPaymentDate.ColumnName = "Payment_Date";
				colvarPaymentDate.DataType = DbType.DateTime;
				colvarPaymentDate.MaxLength = 0;
				colvarPaymentDate.AutoIncrement = false;
				colvarPaymentDate.IsNullable = true;
				colvarPaymentDate.IsPrimaryKey = false;
				colvarPaymentDate.IsForeignKey = false;
				colvarPaymentDate.IsReadOnly = false;
				colvarPaymentDate.DefaultSetting = @"";
				colvarPaymentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentDate);
				
				TableSchema.TableColumn colvarIsPayment = new TableSchema.TableColumn(schema);
				colvarIsPayment.ColumnName = "IsPayment";
				colvarIsPayment.DataType = DbType.Int32;
				colvarIsPayment.MaxLength = 0;
				colvarIsPayment.AutoIncrement = false;
				colvarIsPayment.IsNullable = true;
				colvarIsPayment.IsPrimaryKey = false;
				colvarIsPayment.IsForeignKey = false;
				colvarIsPayment.IsReadOnly = false;
				colvarIsPayment.DefaultSetting = @"";
				colvarIsPayment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPayment);
				
				TableSchema.TableColumn colvarStockId = new TableSchema.TableColumn(schema);
				colvarStockId.ColumnName = "Stock_ID";
				colvarStockId.DataType = DbType.Int32;
				colvarStockId.MaxLength = 0;
				colvarStockId.AutoIncrement = false;
				colvarStockId.IsNullable = true;
				colvarStockId.IsPrimaryKey = false;
				colvarStockId.IsForeignKey = false;
				colvarStockId.IsReadOnly = false;
				colvarStockId.DefaultSetting = @"";
				colvarStockId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStockId);
				
				TableSchema.TableColumn colvarHasComfirm = new TableSchema.TableColumn(schema);
				colvarHasComfirm.ColumnName = "HasComfirm";
				colvarHasComfirm.DataType = DbType.Byte;
				colvarHasComfirm.MaxLength = 0;
				colvarHasComfirm.AutoIncrement = false;
				colvarHasComfirm.IsNullable = true;
				colvarHasComfirm.IsPrimaryKey = false;
				colvarHasComfirm.IsForeignKey = false;
				colvarHasComfirm.IsReadOnly = false;
				
						colvarHasComfirm.DefaultSetting = @"((0))";
				colvarHasComfirm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasComfirm);
				
				TableSchema.TableColumn colvarBhytStatus = new TableSchema.TableColumn(schema);
				colvarBhytStatus.ColumnName = "BHYT_Status";
				colvarBhytStatus.DataType = DbType.Int32;
				colvarBhytStatus.MaxLength = 0;
				colvarBhytStatus.AutoIncrement = false;
				colvarBhytStatus.IsNullable = true;
				colvarBhytStatus.IsPrimaryKey = false;
				colvarBhytStatus.IsForeignKey = false;
				colvarBhytStatus.IsReadOnly = false;
				
						colvarBhytStatus.DefaultSetting = @"((0))";
				colvarBhytStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBhytStatus);
				
				TableSchema.TableColumn colvarPTramBhyt = new TableSchema.TableColumn(schema);
				colvarPTramBhyt.ColumnName = "PTram_BHYT";
				colvarPTramBhyt.DataType = DbType.Int32;
				colvarPTramBhyt.MaxLength = 0;
				colvarPTramBhyt.AutoIncrement = false;
				colvarPTramBhyt.IsNullable = true;
				colvarPTramBhyt.IsPrimaryKey = false;
				colvarPTramBhyt.IsForeignKey = false;
				colvarPTramBhyt.IsReadOnly = false;
				colvarPTramBhyt.DefaultSetting = @"";
				colvarPTramBhyt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPTramBhyt);
				
				TableSchema.TableColumn colvarPaymentId = new TableSchema.TableColumn(schema);
				colvarPaymentId.ColumnName = "Payment_ID";
				colvarPaymentId.DataType = DbType.Int32;
				colvarPaymentId.MaxLength = 0;
				colvarPaymentId.AutoIncrement = false;
				colvarPaymentId.IsNullable = true;
				colvarPaymentId.IsPrimaryKey = false;
				colvarPaymentId.IsForeignKey = false;
				colvarPaymentId.IsReadOnly = false;
				colvarPaymentId.DefaultSetting = @"";
				colvarPaymentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentId);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("KYDONG_T_Prescription_Detail",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PresDetailId")]
		[Bindable(true)]
		public int PresDetailId 
		{
			get { return GetColumnValue<int>(Columns.PresDetailId); }
			set { SetColumnValue(Columns.PresDetailId, value); }
		}
		  
		[XmlAttribute("PresId")]
		[Bindable(true)]
		public int PresId 
		{
			get { return GetColumnValue<int>(Columns.PresId); }
			set { SetColumnValue(Columns.PresId, value); }
		}
		  
		[XmlAttribute("DrugId")]
		[Bindable(true)]
		public int DrugId 
		{
			get { return GetColumnValue<int>(Columns.DrugId); }
			set { SetColumnValue(Columns.DrugId, value); }
		}
		  
		[XmlAttribute("ExpireDate")]
		[Bindable(true)]
		public DateTime ExpireDate 
		{
			get { return GetColumnValue<DateTime>(Columns.ExpireDate); }
			set { SetColumnValue(Columns.ExpireDate, value); }
		}
		  
		[XmlAttribute("Quantity")]
		[Bindable(true)]
		public int Quantity 
		{
			get { return GetColumnValue<int>(Columns.Quantity); }
			set { SetColumnValue(Columns.Quantity, value); }
		}
		  
		[XmlAttribute("Price")]
		[Bindable(true)]
		public decimal Price 
		{
			get { return GetColumnValue<decimal>(Columns.Price); }
			set { SetColumnValue(Columns.Price, value); }
		}
		  
		[XmlAttribute("SurchargePrice")]
		[Bindable(true)]
		public decimal? SurchargePrice 
		{
			get { return GetColumnValue<decimal?>(Columns.SurchargePrice); }
			set { SetColumnValue(Columns.SurchargePrice, value); }
		}
		  
		[XmlAttribute("GiaBhct")]
		[Bindable(true)]
		public decimal? GiaBhct 
		{
			get { return GetColumnValue<decimal?>(Columns.GiaBhct); }
			set { SetColumnValue(Columns.GiaBhct, value); }
		}
		  
		[XmlAttribute("GiaBnct")]
		[Bindable(true)]
		public decimal? GiaBnct 
		{
			get { return GetColumnValue<decimal?>(Columns.GiaBnct); }
			set { SetColumnValue(Columns.GiaBnct, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		  
		[XmlAttribute("PaymentStatus")]
		[Bindable(true)]
		public int? PaymentStatus 
		{
			get { return GetColumnValue<int?>(Columns.PaymentStatus); }
			set { SetColumnValue(Columns.PaymentStatus, value); }
		}
		  
		[XmlAttribute("QuantityCancel")]
		[Bindable(true)]
		public int? QuantityCancel 
		{
			get { return GetColumnValue<int?>(Columns.QuantityCancel); }
			set { SetColumnValue(Columns.QuantityCancel, value); }
		}
		  
		[XmlAttribute("IsCancel")]
		[Bindable(true)]
		public int? IsCancel 
		{
			get { return GetColumnValue<int?>(Columns.IsCancel); }
			set { SetColumnValue(Columns.IsCancel, value); }
		}
		  
		[XmlAttribute("CancelBy")]
		[Bindable(true)]
		public string CancelBy 
		{
			get { return GetColumnValue<string>(Columns.CancelBy); }
			set { SetColumnValue(Columns.CancelBy, value); }
		}
		  
		[XmlAttribute("CancelDate")]
		[Bindable(true)]
		public DateTime? CancelDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CancelDate); }
			set { SetColumnValue(Columns.CancelDate, value); }
		}
		  
		[XmlAttribute("PaymentDate")]
		[Bindable(true)]
		public DateTime? PaymentDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.PaymentDate); }
			set { SetColumnValue(Columns.PaymentDate, value); }
		}
		  
		[XmlAttribute("IsPayment")]
		[Bindable(true)]
		public int? IsPayment 
		{
			get { return GetColumnValue<int?>(Columns.IsPayment); }
			set { SetColumnValue(Columns.IsPayment, value); }
		}
		  
		[XmlAttribute("StockId")]
		[Bindable(true)]
		public int? StockId 
		{
			get { return GetColumnValue<int?>(Columns.StockId); }
			set { SetColumnValue(Columns.StockId, value); }
		}
		  
		[XmlAttribute("HasComfirm")]
		[Bindable(true)]
		public byte? HasComfirm 
		{
			get { return GetColumnValue<byte?>(Columns.HasComfirm); }
			set { SetColumnValue(Columns.HasComfirm, value); }
		}
		  
		[XmlAttribute("BhytStatus")]
		[Bindable(true)]
		public int? BhytStatus 
		{
			get { return GetColumnValue<int?>(Columns.BhytStatus); }
			set { SetColumnValue(Columns.BhytStatus, value); }
		}
		  
		[XmlAttribute("PTramBhyt")]
		[Bindable(true)]
		public int? PTramBhyt 
		{
			get { return GetColumnValue<int?>(Columns.PTramBhyt); }
			set { SetColumnValue(Columns.PTramBhyt, value); }
		}
		  
		[XmlAttribute("PaymentId")]
		[Bindable(true)]
		public int? PaymentId 
		{
			get { return GetColumnValue<int?>(Columns.PaymentId); }
			set { SetColumnValue(Columns.PaymentId, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varPresId,int varDrugId,DateTime varExpireDate,int varQuantity,decimal varPrice,decimal? varSurchargePrice,decimal? varGiaBhct,decimal? varGiaBnct,string varSDesc,int? varPaymentStatus,int? varQuantityCancel,int? varIsCancel,string varCancelBy,DateTime? varCancelDate,DateTime? varPaymentDate,int? varIsPayment,int? varStockId,byte? varHasComfirm,int? varBhytStatus,int? varPTramBhyt,int? varPaymentId)
		{
			KydongTPrescriptionDetail item = new KydongTPrescriptionDetail();
			
			item.PresId = varPresId;
			
			item.DrugId = varDrugId;
			
			item.ExpireDate = varExpireDate;
			
			item.Quantity = varQuantity;
			
			item.Price = varPrice;
			
			item.SurchargePrice = varSurchargePrice;
			
			item.GiaBhct = varGiaBhct;
			
			item.GiaBnct = varGiaBnct;
			
			item.SDesc = varSDesc;
			
			item.PaymentStatus = varPaymentStatus;
			
			item.QuantityCancel = varQuantityCancel;
			
			item.IsCancel = varIsCancel;
			
			item.CancelBy = varCancelBy;
			
			item.CancelDate = varCancelDate;
			
			item.PaymentDate = varPaymentDate;
			
			item.IsPayment = varIsPayment;
			
			item.StockId = varStockId;
			
			item.HasComfirm = varHasComfirm;
			
			item.BhytStatus = varBhytStatus;
			
			item.PTramBhyt = varPTramBhyt;
			
			item.PaymentId = varPaymentId;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPresDetailId,int varPresId,int varDrugId,DateTime varExpireDate,int varQuantity,decimal varPrice,decimal? varSurchargePrice,decimal? varGiaBhct,decimal? varGiaBnct,string varSDesc,int? varPaymentStatus,int? varQuantityCancel,int? varIsCancel,string varCancelBy,DateTime? varCancelDate,DateTime? varPaymentDate,int? varIsPayment,int? varStockId,byte? varHasComfirm,int? varBhytStatus,int? varPTramBhyt,int? varPaymentId)
		{
			KydongTPrescriptionDetail item = new KydongTPrescriptionDetail();
			
				item.PresDetailId = varPresDetailId;
			
				item.PresId = varPresId;
			
				item.DrugId = varDrugId;
			
				item.ExpireDate = varExpireDate;
			
				item.Quantity = varQuantity;
			
				item.Price = varPrice;
			
				item.SurchargePrice = varSurchargePrice;
			
				item.GiaBhct = varGiaBhct;
			
				item.GiaBnct = varGiaBnct;
			
				item.SDesc = varSDesc;
			
				item.PaymentStatus = varPaymentStatus;
			
				item.QuantityCancel = varQuantityCancel;
			
				item.IsCancel = varIsCancel;
			
				item.CancelBy = varCancelBy;
			
				item.CancelDate = varCancelDate;
			
				item.PaymentDate = varPaymentDate;
			
				item.IsPayment = varIsPayment;
			
				item.StockId = varStockId;
			
				item.HasComfirm = varHasComfirm;
			
				item.BhytStatus = varBhytStatus;
			
				item.PTramBhyt = varPTramBhyt;
			
				item.PaymentId = varPaymentId;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PresDetailIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PresIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DrugIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ExpireDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn QuantityColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SurchargePriceColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn GiaBhctColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn GiaBnctColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentStatusColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn QuantityCancelColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn IsCancelColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn CancelByColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn CancelDateColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentDateColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn IsPaymentColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn StockIdColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn HasComfirmColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn BhytStatusColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn PTramBhytColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentIdColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PresDetailId = @"PresDetail_ID";
			 public static string PresId = @"Pres_ID";
			 public static string DrugId = @"Drug_ID";
			 public static string ExpireDate = @"Expire_Date";
			 public static string Quantity = @"Quantity";
			 public static string Price = @"Price";
			 public static string SurchargePrice = @"Surcharge_Price";
			 public static string GiaBhct = @"Gia_BHCT";
			 public static string GiaBnct = @"Gia_BNCT";
			 public static string SDesc = @"sDesc";
			 public static string PaymentStatus = @"Payment_Status";
			 public static string QuantityCancel = @"Quantity_Cancel";
			 public static string IsCancel = @"IsCancel";
			 public static string CancelBy = @"Cancel_By";
			 public static string CancelDate = @"Cancel_Date";
			 public static string PaymentDate = @"Payment_Date";
			 public static string IsPayment = @"IsPayment";
			 public static string StockId = @"Stock_ID";
			 public static string HasComfirm = @"HasComfirm";
			 public static string BhytStatus = @"BHYT_Status";
			 public static string PTramBhyt = @"PTram_BHYT";
			 public static string PaymentId = @"Payment_ID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
