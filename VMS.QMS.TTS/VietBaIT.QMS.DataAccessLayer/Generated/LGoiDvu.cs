using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LGoiDvu class.
	/// </summary>
    [Serializable]
	public partial class LGoiDvuCollection : ActiveList<LGoiDvu, LGoiDvuCollection>
	{	   
		public LGoiDvuCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LGoiDvuCollection</returns>
		public LGoiDvuCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LGoiDvu o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_GOI_DVU table.
	/// </summary>
	[Serializable]
	public partial class LGoiDvu : ActiveRecord<LGoiDvu>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LGoiDvu()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LGoiDvu(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LGoiDvu(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LGoiDvu(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_GOI_DVU", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdGoiDvu = new TableSchema.TableColumn(schema);
				colvarIdGoiDvu.ColumnName = "ID_GOI_DVU";
				colvarIdGoiDvu.DataType = DbType.Int32;
				colvarIdGoiDvu.MaxLength = 0;
				colvarIdGoiDvu.AutoIncrement = true;
				colvarIdGoiDvu.IsNullable = false;
				colvarIdGoiDvu.IsPrimaryKey = true;
				colvarIdGoiDvu.IsForeignKey = false;
				colvarIdGoiDvu.IsReadOnly = false;
				colvarIdGoiDvu.DefaultSetting = @"";
				colvarIdGoiDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdGoiDvu);
				
				TableSchema.TableColumn colvarMaGoiDvu = new TableSchema.TableColumn(schema);
				colvarMaGoiDvu.ColumnName = "MA_GOI_DVU";
				colvarMaGoiDvu.DataType = DbType.String;
				colvarMaGoiDvu.MaxLength = 50;
				colvarMaGoiDvu.AutoIncrement = false;
				colvarMaGoiDvu.IsNullable = false;
				colvarMaGoiDvu.IsPrimaryKey = false;
				colvarMaGoiDvu.IsForeignKey = false;
				colvarMaGoiDvu.IsReadOnly = false;
				colvarMaGoiDvu.DefaultSetting = @"";
				colvarMaGoiDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaGoiDvu);
				
				TableSchema.TableColumn colvarTenGoiDvu = new TableSchema.TableColumn(schema);
				colvarTenGoiDvu.ColumnName = "TEN_GOI_DVU";
				colvarTenGoiDvu.DataType = DbType.String;
				colvarTenGoiDvu.MaxLength = 200;
				colvarTenGoiDvu.AutoIncrement = false;
				colvarTenGoiDvu.IsNullable = false;
				colvarTenGoiDvu.IsPrimaryKey = false;
				colvarTenGoiDvu.IsForeignKey = false;
				colvarTenGoiDvu.IsReadOnly = false;
				colvarTenGoiDvu.DefaultSetting = @"";
				colvarTenGoiDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenGoiDvu);
				
				TableSchema.TableColumn colvarThuTu = new TableSchema.TableColumn(schema);
				colvarThuTu.ColumnName = "THU_TU";
				colvarThuTu.DataType = DbType.Int32;
				colvarThuTu.MaxLength = 0;
				colvarThuTu.AutoIncrement = false;
				colvarThuTu.IsNullable = false;
				colvarThuTu.IsPrimaryKey = false;
				colvarThuTu.IsForeignKey = false;
				colvarThuTu.IsReadOnly = false;
				colvarThuTu.DefaultSetting = @"";
				colvarThuTu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThuTu);
				
				TableSchema.TableColumn colvarMoTa = new TableSchema.TableColumn(schema);
				colvarMoTa.ColumnName = "MO_TA";
				colvarMoTa.DataType = DbType.String;
				colvarMoTa.MaxLength = 50;
				colvarMoTa.AutoIncrement = false;
				colvarMoTa.IsNullable = true;
				colvarMoTa.IsPrimaryKey = false;
				colvarMoTa.IsForeignKey = false;
				colvarMoTa.IsReadOnly = false;
				colvarMoTa.DefaultSetting = @"";
				colvarMoTa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoTa);
				
				TableSchema.TableColumn colvarUnitId = new TableSchema.TableColumn(schema);
				colvarUnitId.ColumnName = "Unit_ID";
				colvarUnitId.DataType = DbType.Int32;
				colvarUnitId.MaxLength = 0;
				colvarUnitId.AutoIncrement = false;
				colvarUnitId.IsNullable = true;
				colvarUnitId.IsPrimaryKey = false;
				colvarUnitId.IsForeignKey = false;
				colvarUnitId.IsReadOnly = false;
				colvarUnitId.DefaultSetting = @"";
				colvarUnitId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitId);
				
				TableSchema.TableColumn colvarGoiKhongTru = new TableSchema.TableColumn(schema);
				colvarGoiKhongTru.ColumnName = "GOI_KHONG_TRU";
				colvarGoiKhongTru.DataType = DbType.Byte;
				colvarGoiKhongTru.MaxLength = 0;
				colvarGoiKhongTru.AutoIncrement = false;
				colvarGoiKhongTru.IsNullable = true;
				colvarGoiKhongTru.IsPrimaryKey = false;
				colvarGoiKhongTru.IsForeignKey = false;
				colvarGoiKhongTru.IsReadOnly = false;
				
						colvarGoiKhongTru.DefaultSetting = @"((0))";
				colvarGoiKhongTru.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGoiKhongTru);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_GOI_DVU",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdGoiDvu")]
		[Bindable(true)]
		public int IdGoiDvu 
		{
			get { return GetColumnValue<int>(Columns.IdGoiDvu); }
			set { SetColumnValue(Columns.IdGoiDvu, value); }
		}
		  
		[XmlAttribute("MaGoiDvu")]
		[Bindable(true)]
		public string MaGoiDvu 
		{
			get { return GetColumnValue<string>(Columns.MaGoiDvu); }
			set { SetColumnValue(Columns.MaGoiDvu, value); }
		}
		  
		[XmlAttribute("TenGoiDvu")]
		[Bindable(true)]
		public string TenGoiDvu 
		{
			get { return GetColumnValue<string>(Columns.TenGoiDvu); }
			set { SetColumnValue(Columns.TenGoiDvu, value); }
		}
		  
		[XmlAttribute("ThuTu")]
		[Bindable(true)]
		public int ThuTu 
		{
			get { return GetColumnValue<int>(Columns.ThuTu); }
			set { SetColumnValue(Columns.ThuTu, value); }
		}
		  
		[XmlAttribute("MoTa")]
		[Bindable(true)]
		public string MoTa 
		{
			get { return GetColumnValue<string>(Columns.MoTa); }
			set { SetColumnValue(Columns.MoTa, value); }
		}
		  
		[XmlAttribute("UnitId")]
		[Bindable(true)]
		public int? UnitId 
		{
			get { return GetColumnValue<int?>(Columns.UnitId); }
			set { SetColumnValue(Columns.UnitId, value); }
		}
		  
		[XmlAttribute("GoiKhongTru")]
		[Bindable(true)]
		public byte? GoiKhongTru 
		{
			get { return GetColumnValue<byte?>(Columns.GoiKhongTru); }
			set { SetColumnValue(Columns.GoiKhongTru, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaGoiDvu,string varTenGoiDvu,int varThuTu,string varMoTa,int? varUnitId,byte? varGoiKhongTru)
		{
			LGoiDvu item = new LGoiDvu();
			
			item.MaGoiDvu = varMaGoiDvu;
			
			item.TenGoiDvu = varTenGoiDvu;
			
			item.ThuTu = varThuTu;
			
			item.MoTa = varMoTa;
			
			item.UnitId = varUnitId;
			
			item.GoiKhongTru = varGoiKhongTru;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdGoiDvu,string varMaGoiDvu,string varTenGoiDvu,int varThuTu,string varMoTa,int? varUnitId,byte? varGoiKhongTru)
		{
			LGoiDvu item = new LGoiDvu();
			
				item.IdGoiDvu = varIdGoiDvu;
			
				item.MaGoiDvu = varMaGoiDvu;
			
				item.TenGoiDvu = varTenGoiDvu;
			
				item.ThuTu = varThuTu;
			
				item.MoTa = varMoTa;
			
				item.UnitId = varUnitId;
			
				item.GoiKhongTru = varGoiKhongTru;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdGoiDvuColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaGoiDvuColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenGoiDvuColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ThuTuColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MoTaColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitIdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn GoiKhongTruColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdGoiDvu = @"ID_GOI_DVU";
			 public static string MaGoiDvu = @"MA_GOI_DVU";
			 public static string TenGoiDvu = @"TEN_GOI_DVU";
			 public static string ThuTu = @"THU_TU";
			 public static string MoTa = @"MO_TA";
			 public static string UnitId = @"Unit_ID";
			 public static string GoiKhongTru = @"GOI_KHONG_TRU";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
