using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the HiepHoaChiPhiTuyenXa class.
	/// </summary>
    [Serializable]
	public partial class HiepHoaChiPhiTuyenXaCollection : ActiveList<HiepHoaChiPhiTuyenXa, HiepHoaChiPhiTuyenXaCollection>
	{	   
		public HiepHoaChiPhiTuyenXaCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>HiepHoaChiPhiTuyenXaCollection</returns>
		public HiepHoaChiPhiTuyenXaCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                HiepHoaChiPhiTuyenXa o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the HiepHoa_ChiPhi_TuyenXa table.
	/// </summary>
	[Serializable]
	public partial class HiepHoaChiPhiTuyenXa : ActiveRecord<HiepHoaChiPhiTuyenXa>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public HiepHoaChiPhiTuyenXa()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public HiepHoaChiPhiTuyenXa(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public HiepHoaChiPhiTuyenXa(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public HiepHoaChiPhiTuyenXa(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("HiepHoa_ChiPhi_TuyenXa", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "Patient_Code";
				colvarPatientCode.DataType = DbType.String;
				colvarPatientCode.MaxLength = 20;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = false;
				colvarPatientCode.IsPrimaryKey = false;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int32;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = false;
				colvarPatientId.IsPrimaryKey = false;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarNgayDKy = new TableSchema.TableColumn(schema);
				colvarNgayDKy.ColumnName = "Ngay_DKy";
				colvarNgayDKy.DataType = DbType.DateTime;
				colvarNgayDKy.MaxLength = 0;
				colvarNgayDKy.AutoIncrement = false;
				colvarNgayDKy.IsNullable = true;
				colvarNgayDKy.IsPrimaryKey = false;
				colvarNgayDKy.IsForeignKey = false;
				colvarNgayDKy.IsReadOnly = false;
				colvarNgayDKy.DefaultSetting = @"";
				colvarNgayDKy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayDKy);
				
				TableSchema.TableColumn colvarIdNhomDvu = new TableSchema.TableColumn(schema);
				colvarIdNhomDvu.ColumnName = "Id_Nhom_Dvu";
				colvarIdNhomDvu.DataType = DbType.Int16;
				colvarIdNhomDvu.MaxLength = 0;
				colvarIdNhomDvu.AutoIncrement = false;
				colvarIdNhomDvu.IsNullable = true;
				colvarIdNhomDvu.IsPrimaryKey = false;
				colvarIdNhomDvu.IsForeignKey = false;
				colvarIdNhomDvu.IsReadOnly = false;
				colvarIdNhomDvu.DefaultSetting = @"";
				colvarIdNhomDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdNhomDvu);
				
				TableSchema.TableColumn colvarIdDichVu = new TableSchema.TableColumn(schema);
				colvarIdDichVu.ColumnName = "Id_DichVu";
				colvarIdDichVu.DataType = DbType.Int16;
				colvarIdDichVu.MaxLength = 0;
				colvarIdDichVu.AutoIncrement = false;
				colvarIdDichVu.IsNullable = true;
				colvarIdDichVu.IsPrimaryKey = false;
				colvarIdDichVu.IsForeignKey = false;
				colvarIdDichVu.IsReadOnly = false;
				colvarIdDichVu.DefaultSetting = @"";
				colvarIdDichVu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdDichVu);
				
				TableSchema.TableColumn colvarDonGia = new TableSchema.TableColumn(schema);
				colvarDonGia.ColumnName = "Don_Gia";
				colvarDonGia.DataType = DbType.Decimal;
				colvarDonGia.MaxLength = 0;
				colvarDonGia.AutoIncrement = false;
				colvarDonGia.IsNullable = true;
				colvarDonGia.IsPrimaryKey = false;
				colvarDonGia.IsForeignKey = false;
				colvarDonGia.IsReadOnly = false;
				colvarDonGia.DefaultSetting = @"";
				colvarDonGia.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDonGia);
				
				TableSchema.TableColumn colvarPhuThu = new TableSchema.TableColumn(schema);
				colvarPhuThu.ColumnName = "Phu_Thu";
				colvarPhuThu.DataType = DbType.Decimal;
				colvarPhuThu.MaxLength = 0;
				colvarPhuThu.AutoIncrement = false;
				colvarPhuThu.IsNullable = true;
				colvarPhuThu.IsPrimaryKey = false;
				colvarPhuThu.IsForeignKey = false;
				colvarPhuThu.IsReadOnly = false;
				colvarPhuThu.DefaultSetting = @"";
				colvarPhuThu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhuThu);
				
				TableSchema.TableColumn colvarSoLuong = new TableSchema.TableColumn(schema);
				colvarSoLuong.ColumnName = "So_Luong";
				colvarSoLuong.DataType = DbType.Int32;
				colvarSoLuong.MaxLength = 0;
				colvarSoLuong.AutoIncrement = false;
				colvarSoLuong.IsNullable = true;
				colvarSoLuong.IsPrimaryKey = false;
				colvarSoLuong.IsForeignKey = false;
				colvarSoLuong.IsReadOnly = false;
				colvarSoLuong.DefaultSetting = @"";
				colvarSoLuong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoLuong);
				
				TableSchema.TableColumn colvarDaTt = new TableSchema.TableColumn(schema);
				colvarDaTt.ColumnName = "Da_TT";
				colvarDaTt.DataType = DbType.Boolean;
				colvarDaTt.MaxLength = 0;
				colvarDaTt.AutoIncrement = false;
				colvarDaTt.IsNullable = true;
				colvarDaTt.IsPrimaryKey = false;
				colvarDaTt.IsForeignKey = false;
				colvarDaTt.IsReadOnly = false;
				
						colvarDaTt.DefaultSetting = @"((0))";
				colvarDaTt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDaTt);
				
				TableSchema.TableColumn colvarPaymentTypeId = new TableSchema.TableColumn(schema);
				colvarPaymentTypeId.ColumnName = "PaymentType_ID";
				colvarPaymentTypeId.DataType = DbType.Byte;
				colvarPaymentTypeId.MaxLength = 0;
				colvarPaymentTypeId.AutoIncrement = false;
				colvarPaymentTypeId.IsNullable = true;
				colvarPaymentTypeId.IsPrimaryKey = false;
				colvarPaymentTypeId.IsForeignKey = false;
				colvarPaymentTypeId.IsReadOnly = false;
				colvarPaymentTypeId.DefaultSetting = @"";
				colvarPaymentTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentTypeId);
				
				TableSchema.TableColumn colvarTrongGoi = new TableSchema.TableColumn(schema);
				colvarTrongGoi.ColumnName = "Trong_Goi";
				colvarTrongGoi.DataType = DbType.Boolean;
				colvarTrongGoi.MaxLength = 0;
				colvarTrongGoi.AutoIncrement = false;
				colvarTrongGoi.IsNullable = true;
				colvarTrongGoi.IsPrimaryKey = false;
				colvarTrongGoi.IsForeignKey = false;
				colvarTrongGoi.IsReadOnly = false;
				
						colvarTrongGoi.DefaultSetting = @"((0))";
				colvarTrongGoi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrongGoi);
				
				TableSchema.TableColumn colvarPaymentId = new TableSchema.TableColumn(schema);
				colvarPaymentId.ColumnName = "Payment_ID";
				colvarPaymentId.DataType = DbType.Int32;
				colvarPaymentId.MaxLength = 0;
				colvarPaymentId.AutoIncrement = false;
				colvarPaymentId.IsNullable = true;
				colvarPaymentId.IsPrimaryKey = false;
				colvarPaymentId.IsForeignKey = false;
				colvarPaymentId.IsReadOnly = false;
				colvarPaymentId.DefaultSetting = @"";
				colvarPaymentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentId);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "Nguoi_Tao";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 20;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "Ngay_Tao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarPtramBhyt = new TableSchema.TableColumn(schema);
				colvarPtramBhyt.ColumnName = "Ptram_Bhyt";
				colvarPtramBhyt.DataType = DbType.Int16;
				colvarPtramBhyt.MaxLength = 0;
				colvarPtramBhyt.AutoIncrement = false;
				colvarPtramBhyt.IsNullable = true;
				colvarPtramBhyt.IsPrimaryKey = false;
				colvarPtramBhyt.IsForeignKey = false;
				colvarPtramBhyt.IsReadOnly = false;
				colvarPtramBhyt.DefaultSetting = @"";
				colvarPtramBhyt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPtramBhyt);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("HiepHoa_ChiPhi_TuyenXa",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public int PatientId 
		{
			get { return GetColumnValue<int>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("NgayDKy")]
		[Bindable(true)]
		public DateTime? NgayDKy 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayDKy); }
			set { SetColumnValue(Columns.NgayDKy, value); }
		}
		  
		[XmlAttribute("IdNhomDvu")]
		[Bindable(true)]
		public short? IdNhomDvu 
		{
			get { return GetColumnValue<short?>(Columns.IdNhomDvu); }
			set { SetColumnValue(Columns.IdNhomDvu, value); }
		}
		  
		[XmlAttribute("IdDichVu")]
		[Bindable(true)]
		public short? IdDichVu 
		{
			get { return GetColumnValue<short?>(Columns.IdDichVu); }
			set { SetColumnValue(Columns.IdDichVu, value); }
		}
		  
		[XmlAttribute("DonGia")]
		[Bindable(true)]
		public decimal? DonGia 
		{
			get { return GetColumnValue<decimal?>(Columns.DonGia); }
			set { SetColumnValue(Columns.DonGia, value); }
		}
		  
		[XmlAttribute("PhuThu")]
		[Bindable(true)]
		public decimal? PhuThu 
		{
			get { return GetColumnValue<decimal?>(Columns.PhuThu); }
			set { SetColumnValue(Columns.PhuThu, value); }
		}
		  
		[XmlAttribute("SoLuong")]
		[Bindable(true)]
		public int? SoLuong 
		{
			get { return GetColumnValue<int?>(Columns.SoLuong); }
			set { SetColumnValue(Columns.SoLuong, value); }
		}
		  
		[XmlAttribute("DaTt")]
		[Bindable(true)]
		public bool? DaTt 
		{
			get { return GetColumnValue<bool?>(Columns.DaTt); }
			set { SetColumnValue(Columns.DaTt, value); }
		}
		  
		[XmlAttribute("PaymentTypeId")]
		[Bindable(true)]
		public byte? PaymentTypeId 
		{
			get { return GetColumnValue<byte?>(Columns.PaymentTypeId); }
			set { SetColumnValue(Columns.PaymentTypeId, value); }
		}
		  
		[XmlAttribute("TrongGoi")]
		[Bindable(true)]
		public bool? TrongGoi 
		{
			get { return GetColumnValue<bool?>(Columns.TrongGoi); }
			set { SetColumnValue(Columns.TrongGoi, value); }
		}
		  
		[XmlAttribute("PaymentId")]
		[Bindable(true)]
		public int? PaymentId 
		{
			get { return GetColumnValue<int?>(Columns.PaymentId); }
			set { SetColumnValue(Columns.PaymentId, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("PtramBhyt")]
		[Bindable(true)]
		public short? PtramBhyt 
		{
			get { return GetColumnValue<short?>(Columns.PtramBhyt); }
			set { SetColumnValue(Columns.PtramBhyt, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varPatientCode,int varPatientId,DateTime? varNgayDKy,short? varIdNhomDvu,short? varIdDichVu,decimal? varDonGia,decimal? varPhuThu,int? varSoLuong,bool? varDaTt,byte? varPaymentTypeId,bool? varTrongGoi,int? varPaymentId,string varNguoiTao,DateTime? varNgayTao,short? varPtramBhyt)
		{
			HiepHoaChiPhiTuyenXa item = new HiepHoaChiPhiTuyenXa();
			
			item.PatientCode = varPatientCode;
			
			item.PatientId = varPatientId;
			
			item.NgayDKy = varNgayDKy;
			
			item.IdNhomDvu = varIdNhomDvu;
			
			item.IdDichVu = varIdDichVu;
			
			item.DonGia = varDonGia;
			
			item.PhuThu = varPhuThu;
			
			item.SoLuong = varSoLuong;
			
			item.DaTt = varDaTt;
			
			item.PaymentTypeId = varPaymentTypeId;
			
			item.TrongGoi = varTrongGoi;
			
			item.PaymentId = varPaymentId;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayTao = varNgayTao;
			
			item.PtramBhyt = varPtramBhyt;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varPatientCode,int varPatientId,DateTime? varNgayDKy,short? varIdNhomDvu,short? varIdDichVu,decimal? varDonGia,decimal? varPhuThu,int? varSoLuong,bool? varDaTt,byte? varPaymentTypeId,bool? varTrongGoi,int? varPaymentId,string varNguoiTao,DateTime? varNgayTao,short? varPtramBhyt)
		{
			HiepHoaChiPhiTuyenXa item = new HiepHoaChiPhiTuyenXa();
			
				item.Id = varId;
			
				item.PatientCode = varPatientCode;
			
				item.PatientId = varPatientId;
			
				item.NgayDKy = varNgayDKy;
			
				item.IdNhomDvu = varIdNhomDvu;
			
				item.IdDichVu = varIdDichVu;
			
				item.DonGia = varDonGia;
			
				item.PhuThu = varPhuThu;
			
				item.SoLuong = varSoLuong;
			
				item.DaTt = varDaTt;
			
				item.PaymentTypeId = varPaymentTypeId;
			
				item.TrongGoi = varTrongGoi;
			
				item.PaymentId = varPaymentId;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayTao = varNgayTao;
			
				item.PtramBhyt = varPtramBhyt;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayDKyColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IdNhomDvuColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IdDichVuColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DonGiaColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PhuThuColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SoLuongColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn DaTtColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentTypeIdColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn TrongGoiColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentIdColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn PtramBhytColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string PatientCode = @"Patient_Code";
			 public static string PatientId = @"Patient_ID";
			 public static string NgayDKy = @"Ngay_DKy";
			 public static string IdNhomDvu = @"Id_Nhom_Dvu";
			 public static string IdDichVu = @"Id_DichVu";
			 public static string DonGia = @"Don_Gia";
			 public static string PhuThu = @"Phu_Thu";
			 public static string SoLuong = @"So_Luong";
			 public static string DaTt = @"Da_TT";
			 public static string PaymentTypeId = @"PaymentType_ID";
			 public static string TrongGoi = @"Trong_Goi";
			 public static string PaymentId = @"Payment_ID";
			 public static string NguoiTao = @"Nguoi_Tao";
			 public static string NgayTao = @"Ngay_Tao";
			 public static string PtramBhyt = @"Ptram_Bhyt";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
