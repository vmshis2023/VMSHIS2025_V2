using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TTreatment class.
	/// </summary>
    [Serializable]
	public partial class TTreatmentCollection : ActiveList<TTreatment, TTreatmentCollection>
	{	   
		public TTreatmentCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TTreatmentCollection</returns>
		public TTreatmentCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TTreatment o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Treatment table.
	/// </summary>
	[Serializable]
	public partial class TTreatment : ActiveRecord<TTreatment>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TTreatment()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TTreatment(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TTreatment(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TTreatment(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Treatment", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTreatId = new TableSchema.TableColumn(schema);
				colvarTreatId.ColumnName = "Treat_ID";
				colvarTreatId.DataType = DbType.Int32;
				colvarTreatId.MaxLength = 0;
				colvarTreatId.AutoIncrement = true;
				colvarTreatId.IsNullable = false;
				colvarTreatId.IsPrimaryKey = true;
				colvarTreatId.IsForeignKey = false;
				colvarTreatId.IsReadOnly = false;
				colvarTreatId.DefaultSetting = @"";
				colvarTreatId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTreatId);
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "Patient_Code";
				colvarPatientCode.DataType = DbType.AnsiString;
				colvarPatientCode.MaxLength = 20;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = true;
				colvarPatientCode.IsPrimaryKey = false;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int32;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = true;
				colvarPatientId.IsPrimaryKey = false;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarPatientDeptId = new TableSchema.TableColumn(schema);
				colvarPatientDeptId.ColumnName = "PatientDept_ID";
				colvarPatientDeptId.DataType = DbType.Int32;
				colvarPatientDeptId.MaxLength = 0;
				colvarPatientDeptId.AutoIncrement = false;
				colvarPatientDeptId.IsNullable = true;
				colvarPatientDeptId.IsPrimaryKey = false;
				colvarPatientDeptId.IsForeignKey = false;
				colvarPatientDeptId.IsReadOnly = false;
				colvarPatientDeptId.DefaultSetting = @"";
				colvarPatientDeptId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientDeptId);
				
				TableSchema.TableColumn colvarDoctorId = new TableSchema.TableColumn(schema);
				colvarDoctorId.ColumnName = "Doctor_ID";
				colvarDoctorId.DataType = DbType.Int16;
				colvarDoctorId.MaxLength = 0;
				colvarDoctorId.AutoIncrement = false;
				colvarDoctorId.IsNullable = true;
				colvarDoctorId.IsPrimaryKey = false;
				colvarDoctorId.IsForeignKey = false;
				colvarDoctorId.IsReadOnly = false;
				colvarDoctorId.DefaultSetting = @"";
				colvarDoctorId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDoctorId);
				
				TableSchema.TableColumn colvarDepartmentId = new TableSchema.TableColumn(schema);
				colvarDepartmentId.ColumnName = "Department_ID";
				colvarDepartmentId.DataType = DbType.Int16;
				colvarDepartmentId.MaxLength = 0;
				colvarDepartmentId.AutoIncrement = false;
				colvarDepartmentId.IsNullable = true;
				colvarDepartmentId.IsPrimaryKey = false;
				colvarDepartmentId.IsForeignKey = false;
				colvarDepartmentId.IsReadOnly = false;
				colvarDepartmentId.DefaultSetting = @"";
				colvarDepartmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentId);
				
				TableSchema.TableColumn colvarDay = new TableSchema.TableColumn(schema);
				colvarDay.ColumnName = "Day";
				colvarDay.DataType = DbType.String;
				colvarDay.MaxLength = 20;
				colvarDay.AutoIncrement = false;
				colvarDay.IsNullable = true;
				colvarDay.IsPrimaryKey = false;
				colvarDay.IsForeignKey = false;
				colvarDay.IsReadOnly = false;
				colvarDay.DefaultSetting = @"";
				colvarDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDay);
				
				TableSchema.TableColumn colvarAdditionalStatus = new TableSchema.TableColumn(schema);
				colvarAdditionalStatus.ColumnName = "Additional_Status";
				colvarAdditionalStatus.DataType = DbType.Boolean;
				colvarAdditionalStatus.MaxLength = 0;
				colvarAdditionalStatus.AutoIncrement = false;
				colvarAdditionalStatus.IsNullable = true;
				colvarAdditionalStatus.IsPrimaryKey = false;
				colvarAdditionalStatus.IsForeignKey = false;
				colvarAdditionalStatus.IsReadOnly = false;
				
						colvarAdditionalStatus.DefaultSetting = @"((0))";
				colvarAdditionalStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdditionalStatus);
				
				TableSchema.TableColumn colvarEvents = new TableSchema.TableColumn(schema);
				colvarEvents.ColumnName = "Events";
				colvarEvents.DataType = DbType.String;
				colvarEvents.MaxLength = 1000;
				colvarEvents.AutoIncrement = false;
				colvarEvents.IsNullable = true;
				colvarEvents.IsPrimaryKey = false;
				colvarEvents.IsForeignKey = false;
				colvarEvents.IsReadOnly = false;
				colvarEvents.DefaultSetting = @"";
				colvarEvents.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEvents);
				
				TableSchema.TableColumn colvarOrders = new TableSchema.TableColumn(schema);
				colvarOrders.ColumnName = "Orders";
				colvarOrders.DataType = DbType.String;
				colvarOrders.MaxLength = 1000;
				colvarOrders.AutoIncrement = false;
				colvarOrders.IsNullable = true;
				colvarOrders.IsPrimaryKey = false;
				colvarOrders.IsForeignKey = false;
				colvarOrders.IsReadOnly = false;
				colvarOrders.DefaultSetting = @"";
				colvarOrders.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrders);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "Create_Date";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = true;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				
						colvarCreateDate.DefaultSetting = @"(getdate())";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				TableSchema.TableColumn colvarCreateBy = new TableSchema.TableColumn(schema);
				colvarCreateBy.ColumnName = "Create_by";
				colvarCreateBy.DataType = DbType.String;
				colvarCreateBy.MaxLength = 20;
				colvarCreateBy.AutoIncrement = false;
				colvarCreateBy.IsNullable = true;
				colvarCreateBy.IsPrimaryKey = false;
				colvarCreateBy.IsForeignKey = false;
				colvarCreateBy.IsReadOnly = false;
				colvarCreateBy.DefaultSetting = @"";
				colvarCreateBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateBy);
				
				TableSchema.TableColumn colvarModifyDate = new TableSchema.TableColumn(schema);
				colvarModifyDate.ColumnName = "Modify_Date";
				colvarModifyDate.DataType = DbType.DateTime;
				colvarModifyDate.MaxLength = 0;
				colvarModifyDate.AutoIncrement = false;
				colvarModifyDate.IsNullable = true;
				colvarModifyDate.IsPrimaryKey = false;
				colvarModifyDate.IsForeignKey = false;
				colvarModifyDate.IsReadOnly = false;
				colvarModifyDate.DefaultSetting = @"";
				colvarModifyDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifyDate);
				
				TableSchema.TableColumn colvarModifyBy = new TableSchema.TableColumn(schema);
				colvarModifyBy.ColumnName = "Modify_by";
				colvarModifyBy.DataType = DbType.String;
				colvarModifyBy.MaxLength = 20;
				colvarModifyBy.AutoIncrement = false;
				colvarModifyBy.IsNullable = true;
				colvarModifyBy.IsPrimaryKey = false;
				colvarModifyBy.IsForeignKey = false;
				colvarModifyBy.IsReadOnly = false;
				colvarModifyBy.DefaultSetting = @"";
				colvarModifyBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifyBy);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "Status";
				colvarStatus.DataType = DbType.Byte;
				colvarStatus.MaxLength = 0;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = true;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				colvarStatus.DefaultSetting = @"";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarNurseCreatedDate = new TableSchema.TableColumn(schema);
				colvarNurseCreatedDate.ColumnName = "Nurse_Created_Date";
				colvarNurseCreatedDate.DataType = DbType.DateTime;
				colvarNurseCreatedDate.MaxLength = 0;
				colvarNurseCreatedDate.AutoIncrement = false;
				colvarNurseCreatedDate.IsNullable = true;
				colvarNurseCreatedDate.IsPrimaryKey = false;
				colvarNurseCreatedDate.IsForeignKey = false;
				colvarNurseCreatedDate.IsReadOnly = false;
				colvarNurseCreatedDate.DefaultSetting = @"";
				colvarNurseCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNurseCreatedDate);
				
				TableSchema.TableColumn colvarNurseCreatedBy = new TableSchema.TableColumn(schema);
				colvarNurseCreatedBy.ColumnName = "Nurse_Created_By";
				colvarNurseCreatedBy.DataType = DbType.String;
				colvarNurseCreatedBy.MaxLength = 20;
				colvarNurseCreatedBy.AutoIncrement = false;
				colvarNurseCreatedBy.IsNullable = true;
				colvarNurseCreatedBy.IsPrimaryKey = false;
				colvarNurseCreatedBy.IsForeignKey = false;
				colvarNurseCreatedBy.IsReadOnly = false;
				colvarNurseCreatedBy.DefaultSetting = @"";
				colvarNurseCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNurseCreatedBy);
				
				TableSchema.TableColumn colvarNgayLapPhieu = new TableSchema.TableColumn(schema);
				colvarNgayLapPhieu.ColumnName = "NgayLapPhieu";
				colvarNgayLapPhieu.DataType = DbType.DateTime;
				colvarNgayLapPhieu.MaxLength = 0;
				colvarNgayLapPhieu.AutoIncrement = false;
				colvarNgayLapPhieu.IsNullable = true;
				colvarNgayLapPhieu.IsPrimaryKey = false;
				colvarNgayLapPhieu.IsForeignKey = false;
				colvarNgayLapPhieu.IsReadOnly = false;
				
						colvarNgayLapPhieu.DefaultSetting = @"(getdate())";
				colvarNgayLapPhieu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayLapPhieu);
				
				TableSchema.TableColumn colvarGioLapPhieu = new TableSchema.TableColumn(schema);
				colvarGioLapPhieu.ColumnName = "GioLapPhieu";
				colvarGioLapPhieu.DataType = DbType.String;
				colvarGioLapPhieu.MaxLength = 10;
				colvarGioLapPhieu.AutoIncrement = false;
				colvarGioLapPhieu.IsNullable = true;
				colvarGioLapPhieu.IsPrimaryKey = false;
				colvarGioLapPhieu.IsForeignKey = false;
				colvarGioLapPhieu.IsReadOnly = false;
				colvarGioLapPhieu.DefaultSetting = @"";
				colvarGioLapPhieu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGioLapPhieu);
				
				TableSchema.TableColumn colvarIpMacSua = new TableSchema.TableColumn(schema);
				colvarIpMacSua.ColumnName = "IP_MAC_SUA";
				colvarIpMacSua.DataType = DbType.String;
				colvarIpMacSua.MaxLength = 50;
				colvarIpMacSua.AutoIncrement = false;
				colvarIpMacSua.IsNullable = true;
				colvarIpMacSua.IsPrimaryKey = false;
				colvarIpMacSua.IsForeignKey = false;
				colvarIpMacSua.IsReadOnly = false;
				colvarIpMacSua.DefaultSetting = @"";
				colvarIpMacSua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpMacSua);
				
				TableSchema.TableColumn colvarIpMacTao = new TableSchema.TableColumn(schema);
				colvarIpMacTao.ColumnName = "IP_MAC_TAO";
				colvarIpMacTao.DataType = DbType.String;
				colvarIpMacTao.MaxLength = 50;
				colvarIpMacTao.AutoIncrement = false;
				colvarIpMacTao.IsNullable = true;
				colvarIpMacTao.IsPrimaryKey = false;
				colvarIpMacTao.IsForeignKey = false;
				colvarIpMacTao.IsReadOnly = false;
				colvarIpMacTao.DefaultSetting = @"";
				colvarIpMacTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpMacTao);
				
				TableSchema.TableColumn colvarIpMaySua = new TableSchema.TableColumn(schema);
				colvarIpMaySua.ColumnName = "IP_MAY_SUA";
				colvarIpMaySua.DataType = DbType.String;
				colvarIpMaySua.MaxLength = 20;
				colvarIpMaySua.AutoIncrement = false;
				colvarIpMaySua.IsNullable = true;
				colvarIpMaySua.IsPrimaryKey = false;
				colvarIpMaySua.IsForeignKey = false;
				colvarIpMaySua.IsReadOnly = false;
				colvarIpMaySua.DefaultSetting = @"";
				colvarIpMaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpMaySua);
				
				TableSchema.TableColumn colvarIpMayTao = new TableSchema.TableColumn(schema);
				colvarIpMayTao.ColumnName = "IP_MAY_TAO";
				colvarIpMayTao.DataType = DbType.String;
				colvarIpMayTao.MaxLength = 20;
				colvarIpMayTao.AutoIncrement = false;
				colvarIpMayTao.IsNullable = true;
				colvarIpMayTao.IsPrimaryKey = false;
				colvarIpMayTao.IsForeignKey = false;
				colvarIpMayTao.IsReadOnly = false;
				colvarIpMayTao.DefaultSetting = @"";
				colvarIpMayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpMayTao);
				
				TableSchema.TableColumn colvarDaIn = new TableSchema.TableColumn(schema);
				colvarDaIn.ColumnName = "Da_In";
				colvarDaIn.DataType = DbType.Boolean;
				colvarDaIn.MaxLength = 0;
				colvarDaIn.AutoIncrement = false;
				colvarDaIn.IsNullable = true;
				colvarDaIn.IsPrimaryKey = false;
				colvarDaIn.IsForeignKey = false;
				colvarDaIn.IsReadOnly = false;
				
						colvarDaIn.DefaultSetting = @"((0))";
				colvarDaIn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDaIn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_Treatment",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TreatId")]
		[Bindable(true)]
		public int TreatId 
		{
			get { return GetColumnValue<int>(Columns.TreatId); }
			set { SetColumnValue(Columns.TreatId, value); }
		}
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public int? PatientId 
		{
			get { return GetColumnValue<int?>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("PatientDeptId")]
		[Bindable(true)]
		public int? PatientDeptId 
		{
			get { return GetColumnValue<int?>(Columns.PatientDeptId); }
			set { SetColumnValue(Columns.PatientDeptId, value); }
		}
		  
		[XmlAttribute("DoctorId")]
		[Bindable(true)]
		public short? DoctorId 
		{
			get { return GetColumnValue<short?>(Columns.DoctorId); }
			set { SetColumnValue(Columns.DoctorId, value); }
		}
		  
		[XmlAttribute("DepartmentId")]
		[Bindable(true)]
		public short? DepartmentId 
		{
			get { return GetColumnValue<short?>(Columns.DepartmentId); }
			set { SetColumnValue(Columns.DepartmentId, value); }
		}
		  
		[XmlAttribute("Day")]
		[Bindable(true)]
		public string Day 
		{
			get { return GetColumnValue<string>(Columns.Day); }
			set { SetColumnValue(Columns.Day, value); }
		}
		  
		[XmlAttribute("AdditionalStatus")]
		[Bindable(true)]
		public bool? AdditionalStatus 
		{
			get { return GetColumnValue<bool?>(Columns.AdditionalStatus); }
			set { SetColumnValue(Columns.AdditionalStatus, value); }
		}
		  
		[XmlAttribute("Events")]
		[Bindable(true)]
		public string Events 
		{
			get { return GetColumnValue<string>(Columns.Events); }
			set { SetColumnValue(Columns.Events, value); }
		}
		  
		[XmlAttribute("Orders")]
		[Bindable(true)]
		public string Orders 
		{
			get { return GetColumnValue<string>(Columns.Orders); }
			set { SetColumnValue(Columns.Orders, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime? CreateDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		  
		[XmlAttribute("CreateBy")]
		[Bindable(true)]
		public string CreateBy 
		{
			get { return GetColumnValue<string>(Columns.CreateBy); }
			set { SetColumnValue(Columns.CreateBy, value); }
		}
		  
		[XmlAttribute("ModifyDate")]
		[Bindable(true)]
		public DateTime? ModifyDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifyDate); }
			set { SetColumnValue(Columns.ModifyDate, value); }
		}
		  
		[XmlAttribute("ModifyBy")]
		[Bindable(true)]
		public string ModifyBy 
		{
			get { return GetColumnValue<string>(Columns.ModifyBy); }
			set { SetColumnValue(Columns.ModifyBy, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public byte? Status 
		{
			get { return GetColumnValue<byte?>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("NurseCreatedDate")]
		[Bindable(true)]
		public DateTime? NurseCreatedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.NurseCreatedDate); }
			set { SetColumnValue(Columns.NurseCreatedDate, value); }
		}
		  
		[XmlAttribute("NurseCreatedBy")]
		[Bindable(true)]
		public string NurseCreatedBy 
		{
			get { return GetColumnValue<string>(Columns.NurseCreatedBy); }
			set { SetColumnValue(Columns.NurseCreatedBy, value); }
		}
		  
		[XmlAttribute("NgayLapPhieu")]
		[Bindable(true)]
		public DateTime? NgayLapPhieu 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayLapPhieu); }
			set { SetColumnValue(Columns.NgayLapPhieu, value); }
		}
		  
		[XmlAttribute("GioLapPhieu")]
		[Bindable(true)]
		public string GioLapPhieu 
		{
			get { return GetColumnValue<string>(Columns.GioLapPhieu); }
			set { SetColumnValue(Columns.GioLapPhieu, value); }
		}
		  
		[XmlAttribute("IpMacSua")]
		[Bindable(true)]
		public string IpMacSua 
		{
			get { return GetColumnValue<string>(Columns.IpMacSua); }
			set { SetColumnValue(Columns.IpMacSua, value); }
		}
		  
		[XmlAttribute("IpMacTao")]
		[Bindable(true)]
		public string IpMacTao 
		{
			get { return GetColumnValue<string>(Columns.IpMacTao); }
			set { SetColumnValue(Columns.IpMacTao, value); }
		}
		  
		[XmlAttribute("IpMaySua")]
		[Bindable(true)]
		public string IpMaySua 
		{
			get { return GetColumnValue<string>(Columns.IpMaySua); }
			set { SetColumnValue(Columns.IpMaySua, value); }
		}
		  
		[XmlAttribute("IpMayTao")]
		[Bindable(true)]
		public string IpMayTao 
		{
			get { return GetColumnValue<string>(Columns.IpMayTao); }
			set { SetColumnValue(Columns.IpMayTao, value); }
		}
		  
		[XmlAttribute("DaIn")]
		[Bindable(true)]
		public bool? DaIn 
		{
			get { return GetColumnValue<bool?>(Columns.DaIn); }
			set { SetColumnValue(Columns.DaIn, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varPatientCode,int? varPatientId,int? varPatientDeptId,short? varDoctorId,short? varDepartmentId,string varDay,bool? varAdditionalStatus,string varEvents,string varOrders,DateTime? varCreateDate,string varCreateBy,DateTime? varModifyDate,string varModifyBy,byte? varStatus,DateTime? varNurseCreatedDate,string varNurseCreatedBy,DateTime? varNgayLapPhieu,string varGioLapPhieu,string varIpMacSua,string varIpMacTao,string varIpMaySua,string varIpMayTao,bool? varDaIn)
		{
			TTreatment item = new TTreatment();
			
			item.PatientCode = varPatientCode;
			
			item.PatientId = varPatientId;
			
			item.PatientDeptId = varPatientDeptId;
			
			item.DoctorId = varDoctorId;
			
			item.DepartmentId = varDepartmentId;
			
			item.Day = varDay;
			
			item.AdditionalStatus = varAdditionalStatus;
			
			item.Events = varEvents;
			
			item.Orders = varOrders;
			
			item.CreateDate = varCreateDate;
			
			item.CreateBy = varCreateBy;
			
			item.ModifyDate = varModifyDate;
			
			item.ModifyBy = varModifyBy;
			
			item.Status = varStatus;
			
			item.NurseCreatedDate = varNurseCreatedDate;
			
			item.NurseCreatedBy = varNurseCreatedBy;
			
			item.NgayLapPhieu = varNgayLapPhieu;
			
			item.GioLapPhieu = varGioLapPhieu;
			
			item.IpMacSua = varIpMacSua;
			
			item.IpMacTao = varIpMacTao;
			
			item.IpMaySua = varIpMaySua;
			
			item.IpMayTao = varIpMayTao;
			
			item.DaIn = varDaIn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTreatId,string varPatientCode,int? varPatientId,int? varPatientDeptId,short? varDoctorId,short? varDepartmentId,string varDay,bool? varAdditionalStatus,string varEvents,string varOrders,DateTime? varCreateDate,string varCreateBy,DateTime? varModifyDate,string varModifyBy,byte? varStatus,DateTime? varNurseCreatedDate,string varNurseCreatedBy,DateTime? varNgayLapPhieu,string varGioLapPhieu,string varIpMacSua,string varIpMacTao,string varIpMaySua,string varIpMayTao,bool? varDaIn)
		{
			TTreatment item = new TTreatment();
			
				item.TreatId = varTreatId;
			
				item.PatientCode = varPatientCode;
			
				item.PatientId = varPatientId;
			
				item.PatientDeptId = varPatientDeptId;
			
				item.DoctorId = varDoctorId;
			
				item.DepartmentId = varDepartmentId;
			
				item.Day = varDay;
			
				item.AdditionalStatus = varAdditionalStatus;
			
				item.Events = varEvents;
			
				item.Orders = varOrders;
			
				item.CreateDate = varCreateDate;
			
				item.CreateBy = varCreateBy;
			
				item.ModifyDate = varModifyDate;
			
				item.ModifyBy = varModifyBy;
			
				item.Status = varStatus;
			
				item.NurseCreatedDate = varNurseCreatedDate;
			
				item.NurseCreatedBy = varNurseCreatedBy;
			
				item.NgayLapPhieu = varNgayLapPhieu;
			
				item.GioLapPhieu = varGioLapPhieu;
			
				item.IpMacSua = varIpMacSua;
			
				item.IpMacTao = varIpMacTao;
			
				item.IpMaySua = varIpMaySua;
			
				item.IpMayTao = varIpMayTao;
			
				item.DaIn = varDaIn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TreatIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientDeptIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DoctorIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DayColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn AdditionalStatusColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn EventsColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn OrdersColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateByColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifyDateColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifyByColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn NurseCreatedDateColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn NurseCreatedByColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayLapPhieuColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn GioLapPhieuColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn IpMacSuaColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn IpMacTaoColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn IpMaySuaColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn IpMayTaoColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn DaInColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TreatId = @"Treat_ID";
			 public static string PatientCode = @"Patient_Code";
			 public static string PatientId = @"Patient_ID";
			 public static string PatientDeptId = @"PatientDept_ID";
			 public static string DoctorId = @"Doctor_ID";
			 public static string DepartmentId = @"Department_ID";
			 public static string Day = @"Day";
			 public static string AdditionalStatus = @"Additional_Status";
			 public static string Events = @"Events";
			 public static string Orders = @"Orders";
			 public static string CreateDate = @"Create_Date";
			 public static string CreateBy = @"Create_by";
			 public static string ModifyDate = @"Modify_Date";
			 public static string ModifyBy = @"Modify_by";
			 public static string Status = @"Status";
			 public static string NurseCreatedDate = @"Nurse_Created_Date";
			 public static string NurseCreatedBy = @"Nurse_Created_By";
			 public static string NgayLapPhieu = @"NgayLapPhieu";
			 public static string GioLapPhieu = @"GioLapPhieu";
			 public static string IpMacSua = @"IP_MAC_SUA";
			 public static string IpMacTao = @"IP_MAC_TAO";
			 public static string IpMaySua = @"IP_MAY_SUA";
			 public static string IpMayTao = @"IP_MAY_TAO";
			 public static string DaIn = @"Da_In";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
