using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TExamDetail class.
	/// </summary>
    [Serializable]
	public partial class TExamDetailCollection : ActiveList<TExamDetail, TExamDetailCollection>
	{	   
		public TExamDetailCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TExamDetailCollection</returns>
		public TExamDetailCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TExamDetail o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Exam_Detail table.
	/// </summary>
	[Serializable]
	public partial class TExamDetail : ActiveRecord<TExamDetail>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TExamDetail()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TExamDetail(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TExamDetail(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TExamDetail(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Exam_Detail", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarExamId = new TableSchema.TableColumn(schema);
				colvarExamId.ColumnName = "Exam_ID";
				colvarExamId.DataType = DbType.Int64;
				colvarExamId.MaxLength = 0;
				colvarExamId.AutoIncrement = false;
				colvarExamId.IsNullable = false;
				colvarExamId.IsPrimaryKey = true;
				colvarExamId.IsForeignKey = false;
				colvarExamId.IsReadOnly = false;
				colvarExamId.DefaultSetting = @"";
				colvarExamId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExamId);
				
				TableSchema.TableColumn colvarCirculation = new TableSchema.TableColumn(schema);
				colvarCirculation.ColumnName = "Circulation";
				colvarCirculation.DataType = DbType.String;
				colvarCirculation.MaxLength = 100;
				colvarCirculation.AutoIncrement = false;
				colvarCirculation.IsNullable = true;
				colvarCirculation.IsPrimaryKey = false;
				colvarCirculation.IsForeignKey = false;
				colvarCirculation.IsReadOnly = false;
				colvarCirculation.DefaultSetting = @"";
				colvarCirculation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCirculation);
				
				TableSchema.TableColumn colvarRespiration = new TableSchema.TableColumn(schema);
				colvarRespiration.ColumnName = "Respiration";
				colvarRespiration.DataType = DbType.String;
				colvarRespiration.MaxLength = 100;
				colvarRespiration.AutoIncrement = false;
				colvarRespiration.IsNullable = true;
				colvarRespiration.IsPrimaryKey = false;
				colvarRespiration.IsForeignKey = false;
				colvarRespiration.IsReadOnly = false;
				colvarRespiration.DefaultSetting = @"";
				colvarRespiration.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRespiration);
				
				TableSchema.TableColumn colvarDigestion = new TableSchema.TableColumn(schema);
				colvarDigestion.ColumnName = "Digestion";
				colvarDigestion.DataType = DbType.String;
				colvarDigestion.MaxLength = 100;
				colvarDigestion.AutoIncrement = false;
				colvarDigestion.IsNullable = true;
				colvarDigestion.IsPrimaryKey = false;
				colvarDigestion.IsForeignKey = false;
				colvarDigestion.IsReadOnly = false;
				colvarDigestion.DefaultSetting = @"";
				colvarDigestion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDigestion);
				
				TableSchema.TableColumn colvarKidneyInfo = new TableSchema.TableColumn(schema);
				colvarKidneyInfo.ColumnName = "Kidney_Info";
				colvarKidneyInfo.DataType = DbType.String;
				colvarKidneyInfo.MaxLength = 100;
				colvarKidneyInfo.AutoIncrement = false;
				colvarKidneyInfo.IsNullable = true;
				colvarKidneyInfo.IsPrimaryKey = false;
				colvarKidneyInfo.IsForeignKey = false;
				colvarKidneyInfo.IsReadOnly = false;
				colvarKidneyInfo.DefaultSetting = @"";
				colvarKidneyInfo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKidneyInfo);
				
				TableSchema.TableColumn colvarNerveInfo = new TableSchema.TableColumn(schema);
				colvarNerveInfo.ColumnName = "Nerve_Info";
				colvarNerveInfo.DataType = DbType.String;
				colvarNerveInfo.MaxLength = 100;
				colvarNerveInfo.AutoIncrement = false;
				colvarNerveInfo.IsNullable = true;
				colvarNerveInfo.IsPrimaryKey = false;
				colvarNerveInfo.IsForeignKey = false;
				colvarNerveInfo.IsReadOnly = false;
				colvarNerveInfo.DefaultSetting = @"";
				colvarNerveInfo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNerveInfo);
				
				TableSchema.TableColumn colvarMuscleInfo = new TableSchema.TableColumn(schema);
				colvarMuscleInfo.ColumnName = "Muscle_Info";
				colvarMuscleInfo.DataType = DbType.String;
				colvarMuscleInfo.MaxLength = 100;
				colvarMuscleInfo.AutoIncrement = false;
				colvarMuscleInfo.IsNullable = true;
				colvarMuscleInfo.IsPrimaryKey = false;
				colvarMuscleInfo.IsForeignKey = false;
				colvarMuscleInfo.IsReadOnly = false;
				colvarMuscleInfo.DefaultSetting = @"";
				colvarMuscleInfo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMuscleInfo);
				
				TableSchema.TableColumn colvarDentalInfo = new TableSchema.TableColumn(schema);
				colvarDentalInfo.ColumnName = "Dental_Info";
				colvarDentalInfo.DataType = DbType.String;
				colvarDentalInfo.MaxLength = 100;
				colvarDentalInfo.AutoIncrement = false;
				colvarDentalInfo.IsNullable = true;
				colvarDentalInfo.IsPrimaryKey = false;
				colvarDentalInfo.IsForeignKey = false;
				colvarDentalInfo.IsReadOnly = false;
				colvarDentalInfo.DefaultSetting = @"";
				colvarDentalInfo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDentalInfo);
				
				TableSchema.TableColumn colvarEyeInfo = new TableSchema.TableColumn(schema);
				colvarEyeInfo.ColumnName = "Eye_Info";
				colvarEyeInfo.DataType = DbType.String;
				colvarEyeInfo.MaxLength = 100;
				colvarEyeInfo.AutoIncrement = false;
				colvarEyeInfo.IsNullable = true;
				colvarEyeInfo.IsPrimaryKey = false;
				colvarEyeInfo.IsForeignKey = false;
				colvarEyeInfo.IsReadOnly = false;
				colvarEyeInfo.DefaultSetting = @"";
				colvarEyeInfo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEyeInfo);
				
				TableSchema.TableColumn colvarEndocrine = new TableSchema.TableColumn(schema);
				colvarEndocrine.ColumnName = "Endocrine";
				colvarEndocrine.DataType = DbType.String;
				colvarEndocrine.MaxLength = 100;
				colvarEndocrine.AutoIncrement = false;
				colvarEndocrine.IsNullable = true;
				colvarEndocrine.IsPrimaryKey = false;
				colvarEndocrine.IsForeignKey = false;
				colvarEndocrine.IsReadOnly = false;
				colvarEndocrine.DefaultSetting = @"";
				colvarEndocrine.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndocrine);
				
				TableSchema.TableColumn colvarNutrition = new TableSchema.TableColumn(schema);
				colvarNutrition.ColumnName = "Nutrition";
				colvarNutrition.DataType = DbType.String;
				colvarNutrition.MaxLength = 100;
				colvarNutrition.AutoIncrement = false;
				colvarNutrition.IsNullable = true;
				colvarNutrition.IsPrimaryKey = false;
				colvarNutrition.IsForeignKey = false;
				colvarNutrition.IsReadOnly = false;
				colvarNutrition.DefaultSetting = @"";
				colvarNutrition.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNutrition);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "Created_By";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "Create_Date";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = true;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				colvarCreateDate.DefaultSetting = @"";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_Exam_Detail",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ExamId")]
		[Bindable(true)]
		public long ExamId 
		{
			get { return GetColumnValue<long>(Columns.ExamId); }
			set { SetColumnValue(Columns.ExamId, value); }
		}
		  
		[XmlAttribute("Circulation")]
		[Bindable(true)]
		public string Circulation 
		{
			get { return GetColumnValue<string>(Columns.Circulation); }
			set { SetColumnValue(Columns.Circulation, value); }
		}
		  
		[XmlAttribute("Respiration")]
		[Bindable(true)]
		public string Respiration 
		{
			get { return GetColumnValue<string>(Columns.Respiration); }
			set { SetColumnValue(Columns.Respiration, value); }
		}
		  
		[XmlAttribute("Digestion")]
		[Bindable(true)]
		public string Digestion 
		{
			get { return GetColumnValue<string>(Columns.Digestion); }
			set { SetColumnValue(Columns.Digestion, value); }
		}
		  
		[XmlAttribute("KidneyInfo")]
		[Bindable(true)]
		public string KidneyInfo 
		{
			get { return GetColumnValue<string>(Columns.KidneyInfo); }
			set { SetColumnValue(Columns.KidneyInfo, value); }
		}
		  
		[XmlAttribute("NerveInfo")]
		[Bindable(true)]
		public string NerveInfo 
		{
			get { return GetColumnValue<string>(Columns.NerveInfo); }
			set { SetColumnValue(Columns.NerveInfo, value); }
		}
		  
		[XmlAttribute("MuscleInfo")]
		[Bindable(true)]
		public string MuscleInfo 
		{
			get { return GetColumnValue<string>(Columns.MuscleInfo); }
			set { SetColumnValue(Columns.MuscleInfo, value); }
		}
		  
		[XmlAttribute("DentalInfo")]
		[Bindable(true)]
		public string DentalInfo 
		{
			get { return GetColumnValue<string>(Columns.DentalInfo); }
			set { SetColumnValue(Columns.DentalInfo, value); }
		}
		  
		[XmlAttribute("EyeInfo")]
		[Bindable(true)]
		public string EyeInfo 
		{
			get { return GetColumnValue<string>(Columns.EyeInfo); }
			set { SetColumnValue(Columns.EyeInfo, value); }
		}
		  
		[XmlAttribute("Endocrine")]
		[Bindable(true)]
		public string Endocrine 
		{
			get { return GetColumnValue<string>(Columns.Endocrine); }
			set { SetColumnValue(Columns.Endocrine, value); }
		}
		  
		[XmlAttribute("Nutrition")]
		[Bindable(true)]
		public string Nutrition 
		{
			get { return GetColumnValue<string>(Columns.Nutrition); }
			set { SetColumnValue(Columns.Nutrition, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime? CreateDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedDate")]
		[Bindable(true)]
		public DateTime? ModifiedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set { SetColumnValue(Columns.ModifiedDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varExamId,string varCirculation,string varRespiration,string varDigestion,string varKidneyInfo,string varNerveInfo,string varMuscleInfo,string varDentalInfo,string varEyeInfo,string varEndocrine,string varNutrition,string varCreatedBy,DateTime? varCreateDate,string varModifiedBy,DateTime? varModifiedDate)
		{
			TExamDetail item = new TExamDetail();
			
			item.ExamId = varExamId;
			
			item.Circulation = varCirculation;
			
			item.Respiration = varRespiration;
			
			item.Digestion = varDigestion;
			
			item.KidneyInfo = varKidneyInfo;
			
			item.NerveInfo = varNerveInfo;
			
			item.MuscleInfo = varMuscleInfo;
			
			item.DentalInfo = varDentalInfo;
			
			item.EyeInfo = varEyeInfo;
			
			item.Endocrine = varEndocrine;
			
			item.Nutrition = varNutrition;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreateDate = varCreateDate;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedDate = varModifiedDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varExamId,string varCirculation,string varRespiration,string varDigestion,string varKidneyInfo,string varNerveInfo,string varMuscleInfo,string varDentalInfo,string varEyeInfo,string varEndocrine,string varNutrition,string varCreatedBy,DateTime? varCreateDate,string varModifiedBy,DateTime? varModifiedDate)
		{
			TExamDetail item = new TExamDetail();
			
				item.ExamId = varExamId;
			
				item.Circulation = varCirculation;
			
				item.Respiration = varRespiration;
			
				item.Digestion = varDigestion;
			
				item.KidneyInfo = varKidneyInfo;
			
				item.NerveInfo = varNerveInfo;
			
				item.MuscleInfo = varMuscleInfo;
			
				item.DentalInfo = varDentalInfo;
			
				item.EyeInfo = varEyeInfo;
			
				item.Endocrine = varEndocrine;
			
				item.Nutrition = varNutrition;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreateDate = varCreateDate;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedDate = varModifiedDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ExamIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CirculationColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn RespirationColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DigestionColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn KidneyInfoColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn NerveInfoColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn MuscleInfoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DentalInfoColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn EyeInfoColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn EndocrineColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn NutritionColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedDateColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ExamId = @"Exam_ID";
			 public static string Circulation = @"Circulation";
			 public static string Respiration = @"Respiration";
			 public static string Digestion = @"Digestion";
			 public static string KidneyInfo = @"Kidney_Info";
			 public static string NerveInfo = @"Nerve_Info";
			 public static string MuscleInfo = @"Muscle_Info";
			 public static string DentalInfo = @"Dental_Info";
			 public static string EyeInfo = @"Eye_Info";
			 public static string Endocrine = @"Endocrine";
			 public static string Nutrition = @"Nutrition";
			 public static string CreatedBy = @"Created_By";
			 public static string CreateDate = @"Create_Date";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedDate = @"ModifiedDate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
