using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TExamInfo class.
	/// </summary>
    [Serializable]
	public partial class TExamInfoCollection : ActiveList<TExamInfo, TExamInfoCollection>
	{	   
		public TExamInfoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TExamInfoCollection</returns>
		public TExamInfoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TExamInfo o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Exam_Info table.
	/// </summary>
	[Serializable]
	public partial class TExamInfo : ActiveRecord<TExamInfo>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TExamInfo()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TExamInfo(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TExamInfo(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TExamInfo(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Exam_Info", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarExamId = new TableSchema.TableColumn(schema);
				colvarExamId.ColumnName = "Exam_ID";
				colvarExamId.DataType = DbType.Int64;
				colvarExamId.MaxLength = 0;
				colvarExamId.AutoIncrement = true;
				colvarExamId.IsNullable = false;
				colvarExamId.IsPrimaryKey = true;
				colvarExamId.IsForeignKey = false;
				colvarExamId.IsReadOnly = false;
				colvarExamId.DefaultSetting = @"";
				colvarExamId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExamId);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int64;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = false;
				colvarPatientId.IsPrimaryKey = false;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "Patient_Code";
				colvarPatientCode.DataType = DbType.AnsiString;
				colvarPatientCode.MaxLength = 10;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = false;
				colvarPatientCode.IsPrimaryKey = false;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarReason = new TableSchema.TableColumn(schema);
				colvarReason.ColumnName = "Reason";
				colvarReason.DataType = DbType.String;
				colvarReason.MaxLength = 100;
				colvarReason.AutoIncrement = false;
				colvarReason.IsNullable = true;
				colvarReason.IsPrimaryKey = false;
				colvarReason.IsForeignKey = false;
				colvarReason.IsReadOnly = false;
				colvarReason.DefaultSetting = @"";
				colvarReason.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReason);
				
				TableSchema.TableColumn colvarDiseaseTypeId = new TableSchema.TableColumn(schema);
				colvarDiseaseTypeId.ColumnName = "DiseaseType_ID";
				colvarDiseaseTypeId.DataType = DbType.Int16;
				colvarDiseaseTypeId.MaxLength = 0;
				colvarDiseaseTypeId.AutoIncrement = false;
				colvarDiseaseTypeId.IsNullable = true;
				colvarDiseaseTypeId.IsPrimaryKey = false;
				colvarDiseaseTypeId.IsForeignKey = false;
				colvarDiseaseTypeId.IsReadOnly = false;
				colvarDiseaseTypeId.DefaultSetting = @"";
				colvarDiseaseTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiseaseTypeId);
				
				TableSchema.TableColumn colvarDayDiseases = new TableSchema.TableColumn(schema);
				colvarDayDiseases.ColumnName = "Day_Diseases";
				colvarDayDiseases.DataType = DbType.Int16;
				colvarDayDiseases.MaxLength = 0;
				colvarDayDiseases.AutoIncrement = false;
				colvarDayDiseases.IsNullable = true;
				colvarDayDiseases.IsPrimaryKey = false;
				colvarDayDiseases.IsForeignKey = false;
				colvarDayDiseases.IsReadOnly = false;
				colvarDayDiseases.DefaultSetting = @"";
				colvarDayDiseases.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDayDiseases);
				
				TableSchema.TableColumn colvarTreatProfile = new TableSchema.TableColumn(schema);
				colvarTreatProfile.ColumnName = "Treat_Profile";
				colvarTreatProfile.DataType = DbType.String;
				colvarTreatProfile.MaxLength = 200;
				colvarTreatProfile.AutoIncrement = false;
				colvarTreatProfile.IsNullable = true;
				colvarTreatProfile.IsPrimaryKey = false;
				colvarTreatProfile.IsForeignKey = false;
				colvarTreatProfile.IsReadOnly = false;
				colvarTreatProfile.DefaultSetting = @"";
				colvarTreatProfile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTreatProfile);
				
				TableSchema.TableColumn colvarDiseaseProfile = new TableSchema.TableColumn(schema);
				colvarDiseaseProfile.ColumnName = "Disease_Profile";
				colvarDiseaseProfile.DataType = DbType.String;
				colvarDiseaseProfile.MaxLength = 200;
				colvarDiseaseProfile.AutoIncrement = false;
				colvarDiseaseProfile.IsNullable = true;
				colvarDiseaseProfile.IsPrimaryKey = false;
				colvarDiseaseProfile.IsForeignKey = false;
				colvarDiseaseProfile.IsReadOnly = false;
				colvarDiseaseProfile.DefaultSetting = @"";
				colvarDiseaseProfile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiseaseProfile);
				
				TableSchema.TableColumn colvarFamilyProfile = new TableSchema.TableColumn(schema);
				colvarFamilyProfile.ColumnName = "Family_Profile";
				colvarFamilyProfile.DataType = DbType.String;
				colvarFamilyProfile.MaxLength = 200;
				colvarFamilyProfile.AutoIncrement = false;
				colvarFamilyProfile.IsNullable = true;
				colvarFamilyProfile.IsPrimaryKey = false;
				colvarFamilyProfile.IsForeignKey = false;
				colvarFamilyProfile.IsReadOnly = false;
				colvarFamilyProfile.DefaultSetting = @"";
				colvarFamilyProfile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFamilyProfile);
				
				TableSchema.TableColumn colvarOtherInfo = new TableSchema.TableColumn(schema);
				colvarOtherInfo.ColumnName = "Other_Info";
				colvarOtherInfo.DataType = DbType.String;
				colvarOtherInfo.MaxLength = 200;
				colvarOtherInfo.AutoIncrement = false;
				colvarOtherInfo.IsNullable = true;
				colvarOtherInfo.IsPrimaryKey = false;
				colvarOtherInfo.IsForeignKey = false;
				colvarOtherInfo.IsReadOnly = false;
				colvarOtherInfo.DefaultSetting = @"";
				colvarOtherInfo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOtherInfo);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "Created_By";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "Create_Date";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = true;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				colvarCreateDate.DefaultSetting = @"";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);
				
				TableSchema.TableColumn colvarFreeDate = new TableSchema.TableColumn(schema);
				colvarFreeDate.ColumnName = "Free_Date";
				colvarFreeDate.DataType = DbType.Int32;
				colvarFreeDate.MaxLength = 0;
				colvarFreeDate.AutoIncrement = false;
				colvarFreeDate.IsNullable = true;
				colvarFreeDate.IsPrimaryKey = false;
				colvarFreeDate.IsForeignKey = false;
				colvarFreeDate.IsReadOnly = false;
				colvarFreeDate.DefaultSetting = @"";
				colvarFreeDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFreeDate);
				
				TableSchema.TableColumn colvarDeptPatientId = new TableSchema.TableColumn(schema);
				colvarDeptPatientId.ColumnName = "DeptPatient_ID";
				colvarDeptPatientId.DataType = DbType.Int32;
				colvarDeptPatientId.MaxLength = 0;
				colvarDeptPatientId.AutoIncrement = false;
				colvarDeptPatientId.IsNullable = true;
				colvarDeptPatientId.IsPrimaryKey = false;
				colvarDeptPatientId.IsForeignKey = false;
				colvarDeptPatientId.IsReadOnly = false;
				
						colvarDeptPatientId.DefaultSetting = @"((-1))";
				colvarDeptPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeptPatientId);
				
				TableSchema.TableColumn colvarFreeStartDate = new TableSchema.TableColumn(schema);
				colvarFreeStartDate.ColumnName = "Free_StartDate";
				colvarFreeStartDate.DataType = DbType.DateTime;
				colvarFreeStartDate.MaxLength = 0;
				colvarFreeStartDate.AutoIncrement = false;
				colvarFreeStartDate.IsNullable = true;
				colvarFreeStartDate.IsPrimaryKey = false;
				colvarFreeStartDate.IsForeignKey = false;
				colvarFreeStartDate.IsReadOnly = false;
				colvarFreeStartDate.DefaultSetting = @"";
				colvarFreeStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFreeStartDate);
				
				TableSchema.TableColumn colvarKetLuan = new TableSchema.TableColumn(schema);
				colvarKetLuan.ColumnName = "Ket_Luan";
				colvarKetLuan.DataType = DbType.String;
				colvarKetLuan.MaxLength = 4000;
				colvarKetLuan.AutoIncrement = false;
				colvarKetLuan.IsNullable = true;
				colvarKetLuan.IsPrimaryKey = false;
				colvarKetLuan.IsForeignKey = false;
				colvarKetLuan.IsReadOnly = false;
				colvarKetLuan.DefaultSetting = @"";
				colvarKetLuan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKetLuan);
				
				TableSchema.TableColumn colvarExamType = new TableSchema.TableColumn(schema);
				colvarExamType.ColumnName = "ExamType";
				colvarExamType.DataType = DbType.Int32;
				colvarExamType.MaxLength = 0;
				colvarExamType.AutoIncrement = false;
				colvarExamType.IsNullable = true;
				colvarExamType.IsPrimaryKey = false;
				colvarExamType.IsForeignKey = false;
				colvarExamType.IsReadOnly = false;
				
						colvarExamType.DefaultSetting = @"((0))";
				colvarExamType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExamType);
				
				TableSchema.TableColumn colvarChuY = new TableSchema.TableColumn(schema);
				colvarChuY.ColumnName = "Chu_Y";
				colvarChuY.DataType = DbType.String;
				colvarChuY.MaxLength = 500;
				colvarChuY.AutoIncrement = false;
				colvarChuY.IsNullable = true;
				colvarChuY.IsPrimaryKey = false;
				colvarChuY.IsForeignKey = false;
				colvarChuY.IsReadOnly = false;
				colvarChuY.DefaultSetting = @"";
				colvarChuY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChuY);
				
				TableSchema.TableColumn colvarTienLuong = new TableSchema.TableColumn(schema);
				colvarTienLuong.ColumnName = "TIEN_LUONG";
				colvarTienLuong.DataType = DbType.String;
				colvarTienLuong.MaxLength = 4000;
				colvarTienLuong.AutoIncrement = false;
				colvarTienLuong.IsNullable = true;
				colvarTienLuong.IsPrimaryKey = false;
				colvarTienLuong.IsForeignKey = false;
				colvarTienLuong.IsReadOnly = false;
				colvarTienLuong.DefaultSetting = @"";
				colvarTienLuong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTienLuong);
				
				TableSchema.TableColumn colvarHuongDieuTri = new TableSchema.TableColumn(schema);
				colvarHuongDieuTri.ColumnName = "HUONG_DIEU_TRI";
				colvarHuongDieuTri.DataType = DbType.String;
				colvarHuongDieuTri.MaxLength = 4000;
				colvarHuongDieuTri.AutoIncrement = false;
				colvarHuongDieuTri.IsNullable = true;
				colvarHuongDieuTri.IsPrimaryKey = false;
				colvarHuongDieuTri.IsForeignKey = false;
				colvarHuongDieuTri.IsReadOnly = false;
				colvarHuongDieuTri.DefaultSetting = @"";
				colvarHuongDieuTri.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHuongDieuTri);
				
				TableSchema.TableColumn colvarQtBenhLyDbCls = new TableSchema.TableColumn(schema);
				colvarQtBenhLyDbCls.ColumnName = "QT_Benh_Ly_DB_CLS";
				colvarQtBenhLyDbCls.DataType = DbType.String;
				colvarQtBenhLyDbCls.MaxLength = 4000;
				colvarQtBenhLyDbCls.AutoIncrement = false;
				colvarQtBenhLyDbCls.IsNullable = true;
				colvarQtBenhLyDbCls.IsPrimaryKey = false;
				colvarQtBenhLyDbCls.IsForeignKey = false;
				colvarQtBenhLyDbCls.IsReadOnly = false;
				colvarQtBenhLyDbCls.DefaultSetting = @"";
				colvarQtBenhLyDbCls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQtBenhLyDbCls);
				
				TableSchema.TableColumn colvarTomTatKqCls = new TableSchema.TableColumn(schema);
				colvarTomTatKqCls.ColumnName = "TomTat_KQ_CLS";
				colvarTomTatKqCls.DataType = DbType.String;
				colvarTomTatKqCls.MaxLength = 4000;
				colvarTomTatKqCls.AutoIncrement = false;
				colvarTomTatKqCls.IsNullable = true;
				colvarTomTatKqCls.IsPrimaryKey = false;
				colvarTomTatKqCls.IsForeignKey = false;
				colvarTomTatKqCls.IsReadOnly = false;
				colvarTomTatKqCls.DefaultSetting = @"";
				colvarTomTatKqCls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTomTatKqCls);
				
				TableSchema.TableColumn colvarPhuongPhapDt = new TableSchema.TableColumn(schema);
				colvarPhuongPhapDt.ColumnName = "Phuong_Phap_DT";
				colvarPhuongPhapDt.DataType = DbType.String;
				colvarPhuongPhapDt.MaxLength = 4000;
				colvarPhuongPhapDt.AutoIncrement = false;
				colvarPhuongPhapDt.IsNullable = true;
				colvarPhuongPhapDt.IsPrimaryKey = false;
				colvarPhuongPhapDt.IsForeignKey = false;
				colvarPhuongPhapDt.IsReadOnly = false;
				colvarPhuongPhapDt.DefaultSetting = @"";
				colvarPhuongPhapDt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhuongPhapDt);
				
				TableSchema.TableColumn colvarTinhTrangRv = new TableSchema.TableColumn(schema);
				colvarTinhTrangRv.ColumnName = "Tinh_Trang_RV";
				colvarTinhTrangRv.DataType = DbType.String;
				colvarTinhTrangRv.MaxLength = 4000;
				colvarTinhTrangRv.AutoIncrement = false;
				colvarTinhTrangRv.IsNullable = true;
				colvarTinhTrangRv.IsPrimaryKey = false;
				colvarTinhTrangRv.IsForeignKey = false;
				colvarTinhTrangRv.IsReadOnly = false;
				colvarTinhTrangRv.DefaultSetting = @"";
				colvarTinhTrangRv.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTinhTrangRv);
				
				TableSchema.TableColumn colvarHuongDtCheDoTiepTheo = new TableSchema.TableColumn(schema);
				colvarHuongDtCheDoTiepTheo.ColumnName = "Huong_DT_CheDo_TiepTheo";
				colvarHuongDtCheDoTiepTheo.DataType = DbType.String;
				colvarHuongDtCheDoTiepTheo.MaxLength = 4000;
				colvarHuongDtCheDoTiepTheo.AutoIncrement = false;
				colvarHuongDtCheDoTiepTheo.IsNullable = true;
				colvarHuongDtCheDoTiepTheo.IsPrimaryKey = false;
				colvarHuongDtCheDoTiepTheo.IsForeignKey = false;
				colvarHuongDtCheDoTiepTheo.IsReadOnly = false;
				colvarHuongDtCheDoTiepTheo.DefaultSetting = @"";
				colvarHuongDtCheDoTiepTheo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHuongDtCheDoTiepTheo);
				
				TableSchema.TableColumn colvarIdBsyCdinh = new TableSchema.TableColumn(schema);
				colvarIdBsyCdinh.ColumnName = "ID_BSY_CDINH";
				colvarIdBsyCdinh.DataType = DbType.Int32;
				colvarIdBsyCdinh.MaxLength = 0;
				colvarIdBsyCdinh.AutoIncrement = false;
				colvarIdBsyCdinh.IsNullable = true;
				colvarIdBsyCdinh.IsPrimaryKey = false;
				colvarIdBsyCdinh.IsForeignKey = false;
				colvarIdBsyCdinh.IsReadOnly = false;
				colvarIdBsyCdinh.DefaultSetting = @"";
				colvarIdBsyCdinh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdBsyCdinh);
				
				TableSchema.TableColumn colvarIpMaySua = new TableSchema.TableColumn(schema);
				colvarIpMaySua.ColumnName = "IP_MAY_SUA";
				colvarIpMaySua.DataType = DbType.String;
				colvarIpMaySua.MaxLength = 50;
				colvarIpMaySua.AutoIncrement = false;
				colvarIpMaySua.IsNullable = true;
				colvarIpMaySua.IsPrimaryKey = false;
				colvarIpMaySua.IsForeignKey = false;
				colvarIpMaySua.IsReadOnly = false;
				colvarIpMaySua.DefaultSetting = @"";
				colvarIpMaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpMaySua);
				
				TableSchema.TableColumn colvarIpMayTao = new TableSchema.TableColumn(schema);
				colvarIpMayTao.ColumnName = "IP_MAY_TAO";
				colvarIpMayTao.DataType = DbType.String;
				colvarIpMayTao.MaxLength = 50;
				colvarIpMayTao.AutoIncrement = false;
				colvarIpMayTao.IsNullable = true;
				colvarIpMayTao.IsPrimaryKey = false;
				colvarIpMayTao.IsForeignKey = false;
				colvarIpMayTao.IsReadOnly = false;
				colvarIpMayTao.DefaultSetting = @"";
				colvarIpMayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpMayTao);
				
				TableSchema.TableColumn colvarSoNgay = new TableSchema.TableColumn(schema);
				colvarSoNgay.ColumnName = "SO_NGAY";
				colvarSoNgay.DataType = DbType.Int32;
				colvarSoNgay.MaxLength = 0;
				colvarSoNgay.AutoIncrement = false;
				colvarSoNgay.IsNullable = true;
				colvarSoNgay.IsPrimaryKey = false;
				colvarSoNgay.IsForeignKey = false;
				colvarSoNgay.IsReadOnly = false;
				
						colvarSoNgay.DefaultSetting = @"((0))";
				colvarSoNgay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoNgay);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_Exam_Info",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ExamId")]
		[Bindable(true)]
		public long ExamId 
		{
			get { return GetColumnValue<long>(Columns.ExamId); }
			set { SetColumnValue(Columns.ExamId, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public long PatientId 
		{
			get { return GetColumnValue<long>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("Reason")]
		[Bindable(true)]
		public string Reason 
		{
			get { return GetColumnValue<string>(Columns.Reason); }
			set { SetColumnValue(Columns.Reason, value); }
		}
		  
		[XmlAttribute("DiseaseTypeId")]
		[Bindable(true)]
		public short? DiseaseTypeId 
		{
			get { return GetColumnValue<short?>(Columns.DiseaseTypeId); }
			set { SetColumnValue(Columns.DiseaseTypeId, value); }
		}
		  
		[XmlAttribute("DayDiseases")]
		[Bindable(true)]
		public short? DayDiseases 
		{
			get { return GetColumnValue<short?>(Columns.DayDiseases); }
			set { SetColumnValue(Columns.DayDiseases, value); }
		}
		  
		[XmlAttribute("TreatProfile")]
		[Bindable(true)]
		public string TreatProfile 
		{
			get { return GetColumnValue<string>(Columns.TreatProfile); }
			set { SetColumnValue(Columns.TreatProfile, value); }
		}
		  
		[XmlAttribute("DiseaseProfile")]
		[Bindable(true)]
		public string DiseaseProfile 
		{
			get { return GetColumnValue<string>(Columns.DiseaseProfile); }
			set { SetColumnValue(Columns.DiseaseProfile, value); }
		}
		  
		[XmlAttribute("FamilyProfile")]
		[Bindable(true)]
		public string FamilyProfile 
		{
			get { return GetColumnValue<string>(Columns.FamilyProfile); }
			set { SetColumnValue(Columns.FamilyProfile, value); }
		}
		  
		[XmlAttribute("OtherInfo")]
		[Bindable(true)]
		public string OtherInfo 
		{
			get { return GetColumnValue<string>(Columns.OtherInfo); }
			set { SetColumnValue(Columns.OtherInfo, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime? CreateDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedDate")]
		[Bindable(true)]
		public DateTime? ModifiedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set { SetColumnValue(Columns.ModifiedDate, value); }
		}
		  
		[XmlAttribute("FreeDate")]
		[Bindable(true)]
		public int? FreeDate 
		{
			get { return GetColumnValue<int?>(Columns.FreeDate); }
			set { SetColumnValue(Columns.FreeDate, value); }
		}
		  
		[XmlAttribute("DeptPatientId")]
		[Bindable(true)]
		public int? DeptPatientId 
		{
			get { return GetColumnValue<int?>(Columns.DeptPatientId); }
			set { SetColumnValue(Columns.DeptPatientId, value); }
		}
		  
		[XmlAttribute("FreeStartDate")]
		[Bindable(true)]
		public DateTime? FreeStartDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.FreeStartDate); }
			set { SetColumnValue(Columns.FreeStartDate, value); }
		}
		  
		[XmlAttribute("KetLuan")]
		[Bindable(true)]
		public string KetLuan 
		{
			get { return GetColumnValue<string>(Columns.KetLuan); }
			set { SetColumnValue(Columns.KetLuan, value); }
		}
		  
		[XmlAttribute("ExamType")]
		[Bindable(true)]
		public int? ExamType 
		{
			get { return GetColumnValue<int?>(Columns.ExamType); }
			set { SetColumnValue(Columns.ExamType, value); }
		}
		  
		[XmlAttribute("ChuY")]
		[Bindable(true)]
		public string ChuY 
		{
			get { return GetColumnValue<string>(Columns.ChuY); }
			set { SetColumnValue(Columns.ChuY, value); }
		}
		  
		[XmlAttribute("TienLuong")]
		[Bindable(true)]
		public string TienLuong 
		{
			get { return GetColumnValue<string>(Columns.TienLuong); }
			set { SetColumnValue(Columns.TienLuong, value); }
		}
		  
		[XmlAttribute("HuongDieuTri")]
		[Bindable(true)]
		public string HuongDieuTri 
		{
			get { return GetColumnValue<string>(Columns.HuongDieuTri); }
			set { SetColumnValue(Columns.HuongDieuTri, value); }
		}
		  
		[XmlAttribute("QtBenhLyDbCls")]
		[Bindable(true)]
		public string QtBenhLyDbCls 
		{
			get { return GetColumnValue<string>(Columns.QtBenhLyDbCls); }
			set { SetColumnValue(Columns.QtBenhLyDbCls, value); }
		}
		  
		[XmlAttribute("TomTatKqCls")]
		[Bindable(true)]
		public string TomTatKqCls 
		{
			get { return GetColumnValue<string>(Columns.TomTatKqCls); }
			set { SetColumnValue(Columns.TomTatKqCls, value); }
		}
		  
		[XmlAttribute("PhuongPhapDt")]
		[Bindable(true)]
		public string PhuongPhapDt 
		{
			get { return GetColumnValue<string>(Columns.PhuongPhapDt); }
			set { SetColumnValue(Columns.PhuongPhapDt, value); }
		}
		  
		[XmlAttribute("TinhTrangRv")]
		[Bindable(true)]
		public string TinhTrangRv 
		{
			get { return GetColumnValue<string>(Columns.TinhTrangRv); }
			set { SetColumnValue(Columns.TinhTrangRv, value); }
		}
		  
		[XmlAttribute("HuongDtCheDoTiepTheo")]
		[Bindable(true)]
		public string HuongDtCheDoTiepTheo 
		{
			get { return GetColumnValue<string>(Columns.HuongDtCheDoTiepTheo); }
			set { SetColumnValue(Columns.HuongDtCheDoTiepTheo, value); }
		}
		  
		[XmlAttribute("IdBsyCdinh")]
		[Bindable(true)]
		public int? IdBsyCdinh 
		{
			get { return GetColumnValue<int?>(Columns.IdBsyCdinh); }
			set { SetColumnValue(Columns.IdBsyCdinh, value); }
		}
		  
		[XmlAttribute("IpMaySua")]
		[Bindable(true)]
		public string IpMaySua 
		{
			get { return GetColumnValue<string>(Columns.IpMaySua); }
			set { SetColumnValue(Columns.IpMaySua, value); }
		}
		  
		[XmlAttribute("IpMayTao")]
		[Bindable(true)]
		public string IpMayTao 
		{
			get { return GetColumnValue<string>(Columns.IpMayTao); }
			set { SetColumnValue(Columns.IpMayTao, value); }
		}
		  
		[XmlAttribute("SoNgay")]
		[Bindable(true)]
		public int? SoNgay 
		{
			get { return GetColumnValue<int?>(Columns.SoNgay); }
			set { SetColumnValue(Columns.SoNgay, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varPatientId,string varPatientCode,string varReason,short? varDiseaseTypeId,short? varDayDiseases,string varTreatProfile,string varDiseaseProfile,string varFamilyProfile,string varOtherInfo,string varCreatedBy,DateTime? varCreateDate,string varModifiedBy,DateTime? varModifiedDate,int? varFreeDate,int? varDeptPatientId,DateTime? varFreeStartDate,string varKetLuan,int? varExamType,string varChuY,string varTienLuong,string varHuongDieuTri,string varQtBenhLyDbCls,string varTomTatKqCls,string varPhuongPhapDt,string varTinhTrangRv,string varHuongDtCheDoTiepTheo,int? varIdBsyCdinh,string varIpMaySua,string varIpMayTao,int? varSoNgay)
		{
			TExamInfo item = new TExamInfo();
			
			item.PatientId = varPatientId;
			
			item.PatientCode = varPatientCode;
			
			item.Reason = varReason;
			
			item.DiseaseTypeId = varDiseaseTypeId;
			
			item.DayDiseases = varDayDiseases;
			
			item.TreatProfile = varTreatProfile;
			
			item.DiseaseProfile = varDiseaseProfile;
			
			item.FamilyProfile = varFamilyProfile;
			
			item.OtherInfo = varOtherInfo;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreateDate = varCreateDate;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedDate = varModifiedDate;
			
			item.FreeDate = varFreeDate;
			
			item.DeptPatientId = varDeptPatientId;
			
			item.FreeStartDate = varFreeStartDate;
			
			item.KetLuan = varKetLuan;
			
			item.ExamType = varExamType;
			
			item.ChuY = varChuY;
			
			item.TienLuong = varTienLuong;
			
			item.HuongDieuTri = varHuongDieuTri;
			
			item.QtBenhLyDbCls = varQtBenhLyDbCls;
			
			item.TomTatKqCls = varTomTatKqCls;
			
			item.PhuongPhapDt = varPhuongPhapDt;
			
			item.TinhTrangRv = varTinhTrangRv;
			
			item.HuongDtCheDoTiepTheo = varHuongDtCheDoTiepTheo;
			
			item.IdBsyCdinh = varIdBsyCdinh;
			
			item.IpMaySua = varIpMaySua;
			
			item.IpMayTao = varIpMayTao;
			
			item.SoNgay = varSoNgay;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varExamId,long varPatientId,string varPatientCode,string varReason,short? varDiseaseTypeId,short? varDayDiseases,string varTreatProfile,string varDiseaseProfile,string varFamilyProfile,string varOtherInfo,string varCreatedBy,DateTime? varCreateDate,string varModifiedBy,DateTime? varModifiedDate,int? varFreeDate,int? varDeptPatientId,DateTime? varFreeStartDate,string varKetLuan,int? varExamType,string varChuY,string varTienLuong,string varHuongDieuTri,string varQtBenhLyDbCls,string varTomTatKqCls,string varPhuongPhapDt,string varTinhTrangRv,string varHuongDtCheDoTiepTheo,int? varIdBsyCdinh,string varIpMaySua,string varIpMayTao,int? varSoNgay)
		{
			TExamInfo item = new TExamInfo();
			
				item.ExamId = varExamId;
			
				item.PatientId = varPatientId;
			
				item.PatientCode = varPatientCode;
			
				item.Reason = varReason;
			
				item.DiseaseTypeId = varDiseaseTypeId;
			
				item.DayDiseases = varDayDiseases;
			
				item.TreatProfile = varTreatProfile;
			
				item.DiseaseProfile = varDiseaseProfile;
			
				item.FamilyProfile = varFamilyProfile;
			
				item.OtherInfo = varOtherInfo;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreateDate = varCreateDate;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedDate = varModifiedDate;
			
				item.FreeDate = varFreeDate;
			
				item.DeptPatientId = varDeptPatientId;
			
				item.FreeStartDate = varFreeStartDate;
			
				item.KetLuan = varKetLuan;
			
				item.ExamType = varExamType;
			
				item.ChuY = varChuY;
			
				item.TienLuong = varTienLuong;
			
				item.HuongDieuTri = varHuongDieuTri;
			
				item.QtBenhLyDbCls = varQtBenhLyDbCls;
			
				item.TomTatKqCls = varTomTatKqCls;
			
				item.PhuongPhapDt = varPhuongPhapDt;
			
				item.TinhTrangRv = varTinhTrangRv;
			
				item.HuongDtCheDoTiepTheo = varHuongDtCheDoTiepTheo;
			
				item.IdBsyCdinh = varIdBsyCdinh;
			
				item.IpMaySua = varIpMaySua;
			
				item.IpMayTao = varIpMayTao;
			
				item.SoNgay = varSoNgay;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ExamIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ReasonColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DiseaseTypeIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DayDiseasesColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TreatProfileColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DiseaseProfileColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn FamilyProfileColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn OtherInfoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedDateColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn FreeDateColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn DeptPatientIdColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn FreeStartDateColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn KetLuanColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn ExamTypeColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ChuYColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn TienLuongColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn HuongDieuTriColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn QtBenhLyDbClsColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn TomTatKqClsColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn PhuongPhapDtColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn TinhTrangRvColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn HuongDtCheDoTiepTheoColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn IdBsyCdinhColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn IpMaySuaColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn IpMayTaoColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn SoNgayColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ExamId = @"Exam_ID";
			 public static string PatientId = @"Patient_ID";
			 public static string PatientCode = @"Patient_Code";
			 public static string Reason = @"Reason";
			 public static string DiseaseTypeId = @"DiseaseType_ID";
			 public static string DayDiseases = @"Day_Diseases";
			 public static string TreatProfile = @"Treat_Profile";
			 public static string DiseaseProfile = @"Disease_Profile";
			 public static string FamilyProfile = @"Family_Profile";
			 public static string OtherInfo = @"Other_Info";
			 public static string CreatedBy = @"Created_By";
			 public static string CreateDate = @"Create_Date";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedDate = @"ModifiedDate";
			 public static string FreeDate = @"Free_Date";
			 public static string DeptPatientId = @"DeptPatient_ID";
			 public static string FreeStartDate = @"Free_StartDate";
			 public static string KetLuan = @"Ket_Luan";
			 public static string ExamType = @"ExamType";
			 public static string ChuY = @"Chu_Y";
			 public static string TienLuong = @"TIEN_LUONG";
			 public static string HuongDieuTri = @"HUONG_DIEU_TRI";
			 public static string QtBenhLyDbCls = @"QT_Benh_Ly_DB_CLS";
			 public static string TomTatKqCls = @"TomTat_KQ_CLS";
			 public static string PhuongPhapDt = @"Phuong_Phap_DT";
			 public static string TinhTrangRv = @"Tinh_Trang_RV";
			 public static string HuongDtCheDoTiepTheo = @"Huong_DT_CheDo_TiepTheo";
			 public static string IdBsyCdinh = @"ID_BSY_CDINH";
			 public static string IpMaySua = @"IP_MAY_SUA";
			 public static string IpMayTao = @"IP_MAY_TAO";
			 public static string SoNgay = @"SO_NGAY";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
