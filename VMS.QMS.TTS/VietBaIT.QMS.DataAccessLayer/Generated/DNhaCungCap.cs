using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the DNhaCungCap class.
	/// </summary>
    [Serializable]
	public partial class DNhaCungCapCollection : ActiveList<DNhaCungCap, DNhaCungCapCollection>
	{	   
		public DNhaCungCapCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DNhaCungCapCollection</returns>
		public DNhaCungCapCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DNhaCungCap o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the D_NHA_CUNG_CAP table.
	/// </summary>
	[Serializable]
	public partial class DNhaCungCap : ActiveRecord<DNhaCungCap>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DNhaCungCap()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DNhaCungCap(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DNhaCungCap(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DNhaCungCap(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("D_NHA_CUNG_CAP", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdNhaCcap = new TableSchema.TableColumn(schema);
				colvarIdNhaCcap.ColumnName = "ID_NHA_CCAP";
				colvarIdNhaCcap.DataType = DbType.Int16;
				colvarIdNhaCcap.MaxLength = 0;
				colvarIdNhaCcap.AutoIncrement = true;
				colvarIdNhaCcap.IsNullable = false;
				colvarIdNhaCcap.IsPrimaryKey = true;
				colvarIdNhaCcap.IsForeignKey = false;
				colvarIdNhaCcap.IsReadOnly = false;
				colvarIdNhaCcap.DefaultSetting = @"";
				colvarIdNhaCcap.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdNhaCcap);
				
				TableSchema.TableColumn colvarMaNhaCcap = new TableSchema.TableColumn(schema);
				colvarMaNhaCcap.ColumnName = "MA_NHA_CCAP";
				colvarMaNhaCcap.DataType = DbType.String;
				colvarMaNhaCcap.MaxLength = 50;
				colvarMaNhaCcap.AutoIncrement = false;
				colvarMaNhaCcap.IsNullable = true;
				colvarMaNhaCcap.IsPrimaryKey = false;
				colvarMaNhaCcap.IsForeignKey = false;
				colvarMaNhaCcap.IsReadOnly = false;
				colvarMaNhaCcap.DefaultSetting = @"";
				colvarMaNhaCcap.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaNhaCcap);
				
				TableSchema.TableColumn colvarTenNhaCcap = new TableSchema.TableColumn(schema);
				colvarTenNhaCcap.ColumnName = "TEN_NHA_CCAP";
				colvarTenNhaCcap.DataType = DbType.String;
				colvarTenNhaCcap.MaxLength = 200;
				colvarTenNhaCcap.AutoIncrement = false;
				colvarTenNhaCcap.IsNullable = true;
				colvarTenNhaCcap.IsPrimaryKey = false;
				colvarTenNhaCcap.IsForeignKey = false;
				colvarTenNhaCcap.IsReadOnly = false;
				colvarTenNhaCcap.DefaultSetting = @"";
				colvarTenNhaCcap.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenNhaCcap);
				
				TableSchema.TableColumn colvarThuTu = new TableSchema.TableColumn(schema);
				colvarThuTu.ColumnName = "THU_TU";
				colvarThuTu.DataType = DbType.Int16;
				colvarThuTu.MaxLength = 0;
				colvarThuTu.AutoIncrement = false;
				colvarThuTu.IsNullable = true;
				colvarThuTu.IsPrimaryKey = false;
				colvarThuTu.IsForeignKey = false;
				colvarThuTu.IsReadOnly = false;
				colvarThuTu.DefaultSetting = @"";
				colvarThuTu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThuTu);
				
				TableSchema.TableColumn colvarGhiChu = new TableSchema.TableColumn(schema);
				colvarGhiChu.ColumnName = "GHI_CHU";
				colvarGhiChu.DataType = DbType.String;
				colvarGhiChu.MaxLength = 255;
				colvarGhiChu.AutoIncrement = false;
				colvarGhiChu.IsNullable = true;
				colvarGhiChu.IsPrimaryKey = false;
				colvarGhiChu.IsForeignKey = false;
				colvarGhiChu.IsReadOnly = false;
				colvarGhiChu.DefaultSetting = @"";
				colvarGhiChu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGhiChu);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("D_NHA_CUNG_CAP",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdNhaCcap")]
		[Bindable(true)]
		public short IdNhaCcap 
		{
			get { return GetColumnValue<short>(Columns.IdNhaCcap); }
			set { SetColumnValue(Columns.IdNhaCcap, value); }
		}
		  
		[XmlAttribute("MaNhaCcap")]
		[Bindable(true)]
		public string MaNhaCcap 
		{
			get { return GetColumnValue<string>(Columns.MaNhaCcap); }
			set { SetColumnValue(Columns.MaNhaCcap, value); }
		}
		  
		[XmlAttribute("TenNhaCcap")]
		[Bindable(true)]
		public string TenNhaCcap 
		{
			get { return GetColumnValue<string>(Columns.TenNhaCcap); }
			set { SetColumnValue(Columns.TenNhaCcap, value); }
		}
		  
		[XmlAttribute("ThuTu")]
		[Bindable(true)]
		public short? ThuTu 
		{
			get { return GetColumnValue<short?>(Columns.ThuTu); }
			set { SetColumnValue(Columns.ThuTu, value); }
		}
		  
		[XmlAttribute("GhiChu")]
		[Bindable(true)]
		public string GhiChu 
		{
			get { return GetColumnValue<string>(Columns.GhiChu); }
			set { SetColumnValue(Columns.GhiChu, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaNhaCcap,string varTenNhaCcap,short? varThuTu,string varGhiChu)
		{
			DNhaCungCap item = new DNhaCungCap();
			
			item.MaNhaCcap = varMaNhaCcap;
			
			item.TenNhaCcap = varTenNhaCcap;
			
			item.ThuTu = varThuTu;
			
			item.GhiChu = varGhiChu;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(short varIdNhaCcap,string varMaNhaCcap,string varTenNhaCcap,short? varThuTu,string varGhiChu)
		{
			DNhaCungCap item = new DNhaCungCap();
			
				item.IdNhaCcap = varIdNhaCcap;
			
				item.MaNhaCcap = varMaNhaCcap;
			
				item.TenNhaCcap = varTenNhaCcap;
			
				item.ThuTu = varThuTu;
			
				item.GhiChu = varGhiChu;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdNhaCcapColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaNhaCcapColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenNhaCcapColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ThuTuColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn GhiChuColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdNhaCcap = @"ID_NHA_CCAP";
			 public static string MaNhaCcap = @"MA_NHA_CCAP";
			 public static string TenNhaCcap = @"TEN_NHA_CCAP";
			 public static string ThuTu = @"THU_TU";
			 public static string GhiChu = @"GHI_CHU";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
