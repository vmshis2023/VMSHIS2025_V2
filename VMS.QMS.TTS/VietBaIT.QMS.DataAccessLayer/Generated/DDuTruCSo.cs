using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the DDuTruCSo class.
	/// </summary>
    [Serializable]
	public partial class DDuTruCSoCollection : ActiveList<DDuTruCSo, DDuTruCSoCollection>
	{	   
		public DDuTruCSoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DDuTruCSoCollection</returns>
		public DDuTruCSoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DDuTruCSo o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the D_DuTru_CSo table.
	/// </summary>
	[Serializable]
	public partial class DDuTruCSo : ActiveRecord<DDuTruCSo>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DDuTruCSo()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DDuTruCSo(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DDuTruCSo(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DDuTruCSo(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("D_DuTru_CSo", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarIdPhieuCSo = new TableSchema.TableColumn(schema);
				colvarIdPhieuCSo.ColumnName = "ID_Phieu_CSo";
				colvarIdPhieuCSo.DataType = DbType.Int32;
				colvarIdPhieuCSo.MaxLength = 0;
				colvarIdPhieuCSo.AutoIncrement = false;
				colvarIdPhieuCSo.IsNullable = true;
				colvarIdPhieuCSo.IsPrimaryKey = false;
				colvarIdPhieuCSo.IsForeignKey = false;
				colvarIdPhieuCSo.IsReadOnly = false;
				colvarIdPhieuCSo.DefaultSetting = @"";
				colvarIdPhieuCSo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhieuCSo);
				
				TableSchema.TableColumn colvarTenPhieu = new TableSchema.TableColumn(schema);
				colvarTenPhieu.ColumnName = "Ten_Phieu";
				colvarTenPhieu.DataType = DbType.String;
				colvarTenPhieu.MaxLength = 50;
				colvarTenPhieu.AutoIncrement = false;
				colvarTenPhieu.IsNullable = true;
				colvarTenPhieu.IsPrimaryKey = false;
				colvarTenPhieu.IsForeignKey = false;
				colvarTenPhieu.IsReadOnly = false;
				colvarTenPhieu.DefaultSetting = @"";
				colvarTenPhieu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenPhieu);
				
				TableSchema.TableColumn colvarNgayLapPhieu = new TableSchema.TableColumn(schema);
				colvarNgayLapPhieu.ColumnName = "Ngay_LapPhieu";
				colvarNgayLapPhieu.DataType = DbType.DateTime;
				colvarNgayLapPhieu.MaxLength = 0;
				colvarNgayLapPhieu.AutoIncrement = false;
				colvarNgayLapPhieu.IsNullable = true;
				colvarNgayLapPhieu.IsPrimaryKey = false;
				colvarNgayLapPhieu.IsForeignKey = false;
				colvarNgayLapPhieu.IsReadOnly = false;
				colvarNgayLapPhieu.DefaultSetting = @"";
				colvarNgayLapPhieu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayLapPhieu);
				
				TableSchema.TableColumn colvarIdNhanVien = new TableSchema.TableColumn(schema);
				colvarIdNhanVien.ColumnName = "Id_NhanVien";
				colvarIdNhanVien.DataType = DbType.Int16;
				colvarIdNhanVien.MaxLength = 0;
				colvarIdNhanVien.AutoIncrement = false;
				colvarIdNhanVien.IsNullable = true;
				colvarIdNhanVien.IsPrimaryKey = false;
				colvarIdNhanVien.IsForeignKey = false;
				colvarIdNhanVien.IsReadOnly = false;
				colvarIdNhanVien.DefaultSetting = @"";
				colvarIdNhanVien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdNhanVien);
				
				TableSchema.TableColumn colvarIdKhoa = new TableSchema.TableColumn(schema);
				colvarIdKhoa.ColumnName = "Id_Khoa";
				colvarIdKhoa.DataType = DbType.Int16;
				colvarIdKhoa.MaxLength = 0;
				colvarIdKhoa.AutoIncrement = false;
				colvarIdKhoa.IsNullable = true;
				colvarIdKhoa.IsPrimaryKey = false;
				colvarIdKhoa.IsForeignKey = false;
				colvarIdKhoa.IsReadOnly = false;
				colvarIdKhoa.DefaultSetting = @"";
				colvarIdKhoa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdKhoa);
				
				TableSchema.TableColumn colvarIdKho = new TableSchema.TableColumn(schema);
				colvarIdKho.ColumnName = "Id_Kho";
				colvarIdKho.DataType = DbType.Int16;
				colvarIdKho.MaxLength = 0;
				colvarIdKho.AutoIncrement = false;
				colvarIdKho.IsNullable = true;
				colvarIdKho.IsPrimaryKey = false;
				colvarIdKho.IsForeignKey = false;
				colvarIdKho.IsReadOnly = false;
				colvarIdKho.DefaultSetting = @"";
				colvarIdKho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdKho);
				
				TableSchema.TableColumn colvarIdThuoc = new TableSchema.TableColumn(schema);
				colvarIdThuoc.ColumnName = "Id_Thuoc";
				colvarIdThuoc.DataType = DbType.Int32;
				colvarIdThuoc.MaxLength = 0;
				colvarIdThuoc.AutoIncrement = false;
				colvarIdThuoc.IsNullable = true;
				colvarIdThuoc.IsPrimaryKey = false;
				colvarIdThuoc.IsForeignKey = false;
				colvarIdThuoc.IsReadOnly = false;
				colvarIdThuoc.DefaultSetting = @"";
				colvarIdThuoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdThuoc);
				
				TableSchema.TableColumn colvarSoLuong = new TableSchema.TableColumn(schema);
				colvarSoLuong.ColumnName = "So_Luong";
				colvarSoLuong.DataType = DbType.Int32;
				colvarSoLuong.MaxLength = 0;
				colvarSoLuong.AutoIncrement = false;
				colvarSoLuong.IsNullable = true;
				colvarSoLuong.IsPrimaryKey = false;
				colvarSoLuong.IsForeignKey = false;
				colvarSoLuong.IsReadOnly = false;
				colvarSoLuong.DefaultSetting = @"";
				colvarSoLuong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoLuong);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "Ngay_Tao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				
						colvarNgayTao.DefaultSetting = @"(getdate())";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "Nguoi_Tao";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 20;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("D_DuTru_CSo",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("IdPhieuCSo")]
		[Bindable(true)]
		public int? IdPhieuCSo 
		{
			get { return GetColumnValue<int?>(Columns.IdPhieuCSo); }
			set { SetColumnValue(Columns.IdPhieuCSo, value); }
		}
		  
		[XmlAttribute("TenPhieu")]
		[Bindable(true)]
		public string TenPhieu 
		{
			get { return GetColumnValue<string>(Columns.TenPhieu); }
			set { SetColumnValue(Columns.TenPhieu, value); }
		}
		  
		[XmlAttribute("NgayLapPhieu")]
		[Bindable(true)]
		public DateTime? NgayLapPhieu 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayLapPhieu); }
			set { SetColumnValue(Columns.NgayLapPhieu, value); }
		}
		  
		[XmlAttribute("IdNhanVien")]
		[Bindable(true)]
		public short? IdNhanVien 
		{
			get { return GetColumnValue<short?>(Columns.IdNhanVien); }
			set { SetColumnValue(Columns.IdNhanVien, value); }
		}
		  
		[XmlAttribute("IdKhoa")]
		[Bindable(true)]
		public short? IdKhoa 
		{
			get { return GetColumnValue<short?>(Columns.IdKhoa); }
			set { SetColumnValue(Columns.IdKhoa, value); }
		}
		  
		[XmlAttribute("IdKho")]
		[Bindable(true)]
		public short? IdKho 
		{
			get { return GetColumnValue<short?>(Columns.IdKho); }
			set { SetColumnValue(Columns.IdKho, value); }
		}
		  
		[XmlAttribute("IdThuoc")]
		[Bindable(true)]
		public int? IdThuoc 
		{
			get { return GetColumnValue<int?>(Columns.IdThuoc); }
			set { SetColumnValue(Columns.IdThuoc, value); }
		}
		  
		[XmlAttribute("SoLuong")]
		[Bindable(true)]
		public int? SoLuong 
		{
			get { return GetColumnValue<int?>(Columns.SoLuong); }
			set { SetColumnValue(Columns.SoLuong, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varIdPhieuCSo,string varTenPhieu,DateTime? varNgayLapPhieu,short? varIdNhanVien,short? varIdKhoa,short? varIdKho,int? varIdThuoc,int? varSoLuong,DateTime? varNgayTao,string varNguoiTao)
		{
			DDuTruCSo item = new DDuTruCSo();
			
			item.IdPhieuCSo = varIdPhieuCSo;
			
			item.TenPhieu = varTenPhieu;
			
			item.NgayLapPhieu = varNgayLapPhieu;
			
			item.IdNhanVien = varIdNhanVien;
			
			item.IdKhoa = varIdKhoa;
			
			item.IdKho = varIdKho;
			
			item.IdThuoc = varIdThuoc;
			
			item.SoLuong = varSoLuong;
			
			item.NgayTao = varNgayTao;
			
			item.NguoiTao = varNguoiTao;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varIdPhieuCSo,string varTenPhieu,DateTime? varNgayLapPhieu,short? varIdNhanVien,short? varIdKhoa,short? varIdKho,int? varIdThuoc,int? varSoLuong,DateTime? varNgayTao,string varNguoiTao)
		{
			DDuTruCSo item = new DDuTruCSo();
			
				item.Id = varId;
			
				item.IdPhieuCSo = varIdPhieuCSo;
			
				item.TenPhieu = varTenPhieu;
			
				item.NgayLapPhieu = varNgayLapPhieu;
			
				item.IdNhanVien = varIdNhanVien;
			
				item.IdKhoa = varIdKhoa;
			
				item.IdKho = varIdKho;
			
				item.IdThuoc = varIdThuoc;
			
				item.SoLuong = varSoLuong;
			
				item.NgayTao = varNgayTao;
			
				item.NguoiTao = varNguoiTao;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdPhieuCSoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenPhieuColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayLapPhieuColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IdNhanVienColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IdKhoaColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IdKhoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IdThuocColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SoLuongColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string IdPhieuCSo = @"ID_Phieu_CSo";
			 public static string TenPhieu = @"Ten_Phieu";
			 public static string NgayLapPhieu = @"Ngay_LapPhieu";
			 public static string IdNhanVien = @"Id_NhanVien";
			 public static string IdKhoa = @"Id_Khoa";
			 public static string IdKho = @"Id_Kho";
			 public static string IdThuoc = @"Id_Thuoc";
			 public static string SoLuong = @"So_Luong";
			 public static string NgayTao = @"Ngay_Tao";
			 public static string NguoiTao = @"Nguoi_Tao";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
