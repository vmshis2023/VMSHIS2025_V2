using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the ErrorLog class.
	/// </summary>
    [Serializable]
	public partial class ErrorLogCollection : ActiveList<ErrorLog, ErrorLogCollection>
	{	   
		public ErrorLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ErrorLogCollection</returns>
		public ErrorLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ErrorLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ErrorLog table.
	/// </summary>
	[Serializable]
	public partial class ErrorLog : ActiveRecord<ErrorLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ErrorLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ErrorLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ErrorLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ErrorLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ErrorLog", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarErrorId = new TableSchema.TableColumn(schema);
				colvarErrorId.ColumnName = "error_id";
				colvarErrorId.DataType = DbType.Int32;
				colvarErrorId.MaxLength = 0;
				colvarErrorId.AutoIncrement = true;
				colvarErrorId.IsNullable = false;
				colvarErrorId.IsPrimaryKey = true;
				colvarErrorId.IsForeignKey = false;
				colvarErrorId.IsReadOnly = false;
				colvarErrorId.DefaultSetting = @"";
				colvarErrorId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarErrorId);
				
				TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
				colvarUserName.ColumnName = "user_name";
				colvarUserName.DataType = DbType.String;
				colvarUserName.MaxLength = 50;
				colvarUserName.AutoIncrement = false;
				colvarUserName.IsNullable = true;
				colvarUserName.IsPrimaryKey = false;
				colvarUserName.IsForeignKey = false;
				colvarUserName.IsReadOnly = false;
				colvarUserName.DefaultSetting = @"";
				colvarUserName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserName);
				
				TableSchema.TableColumn colvarFormName = new TableSchema.TableColumn(schema);
				colvarFormName.ColumnName = "form_name";
				colvarFormName.DataType = DbType.String;
				colvarFormName.MaxLength = 50;
				colvarFormName.AutoIncrement = false;
				colvarFormName.IsNullable = true;
				colvarFormName.IsPrimaryKey = false;
				colvarFormName.IsForeignKey = false;
				colvarFormName.IsReadOnly = false;
				colvarFormName.DefaultSetting = @"";
				colvarFormName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFormName);
				
				TableSchema.TableColumn colvarErrorTime = new TableSchema.TableColumn(schema);
				colvarErrorTime.ColumnName = "error_time";
				colvarErrorTime.DataType = DbType.DateTime;
				colvarErrorTime.MaxLength = 0;
				colvarErrorTime.AutoIncrement = false;
				colvarErrorTime.IsNullable = true;
				colvarErrorTime.IsPrimaryKey = false;
				colvarErrorTime.IsForeignKey = false;
				colvarErrorTime.IsReadOnly = false;
				colvarErrorTime.DefaultSetting = @"";
				colvarErrorTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarErrorTime);
				
				TableSchema.TableColumn colvarApplicationName = new TableSchema.TableColumn(schema);
				colvarApplicationName.ColumnName = "application_name";
				colvarApplicationName.DataType = DbType.String;
				colvarApplicationName.MaxLength = 50;
				colvarApplicationName.AutoIncrement = false;
				colvarApplicationName.IsNullable = true;
				colvarApplicationName.IsPrimaryKey = false;
				colvarApplicationName.IsForeignKey = false;
				colvarApplicationName.IsReadOnly = false;
				colvarApplicationName.DefaultSetting = @"";
				colvarApplicationName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplicationName);
				
				TableSchema.TableColumn colvarErrorContent = new TableSchema.TableColumn(schema);
				colvarErrorContent.ColumnName = "error_content";
				colvarErrorContent.DataType = DbType.String;
				colvarErrorContent.MaxLength = 2500;
				colvarErrorContent.AutoIncrement = false;
				colvarErrorContent.IsNullable = true;
				colvarErrorContent.IsPrimaryKey = false;
				colvarErrorContent.IsForeignKey = false;
				colvarErrorContent.IsReadOnly = false;
				colvarErrorContent.DefaultSetting = @"";
				colvarErrorContent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarErrorContent);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("ErrorLog",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ErrorId")]
		[Bindable(true)]
		public int ErrorId 
		{
			get { return GetColumnValue<int>(Columns.ErrorId); }
			set { SetColumnValue(Columns.ErrorId, value); }
		}
		  
		[XmlAttribute("UserName")]
		[Bindable(true)]
		public string UserName 
		{
			get { return GetColumnValue<string>(Columns.UserName); }
			set { SetColumnValue(Columns.UserName, value); }
		}
		  
		[XmlAttribute("FormName")]
		[Bindable(true)]
		public string FormName 
		{
			get { return GetColumnValue<string>(Columns.FormName); }
			set { SetColumnValue(Columns.FormName, value); }
		}
		  
		[XmlAttribute("ErrorTime")]
		[Bindable(true)]
		public DateTime? ErrorTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.ErrorTime); }
			set { SetColumnValue(Columns.ErrorTime, value); }
		}
		  
		[XmlAttribute("ApplicationName")]
		[Bindable(true)]
		public string ApplicationName 
		{
			get { return GetColumnValue<string>(Columns.ApplicationName); }
			set { SetColumnValue(Columns.ApplicationName, value); }
		}
		  
		[XmlAttribute("ErrorContent")]
		[Bindable(true)]
		public string ErrorContent 
		{
			get { return GetColumnValue<string>(Columns.ErrorContent); }
			set { SetColumnValue(Columns.ErrorContent, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varUserName,string varFormName,DateTime? varErrorTime,string varApplicationName,string varErrorContent)
		{
			ErrorLog item = new ErrorLog();
			
			item.UserName = varUserName;
			
			item.FormName = varFormName;
			
			item.ErrorTime = varErrorTime;
			
			item.ApplicationName = varApplicationName;
			
			item.ErrorContent = varErrorContent;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varErrorId,string varUserName,string varFormName,DateTime? varErrorTime,string varApplicationName,string varErrorContent)
		{
			ErrorLog item = new ErrorLog();
			
				item.ErrorId = varErrorId;
			
				item.UserName = varUserName;
			
				item.FormName = varFormName;
			
				item.ErrorTime = varErrorTime;
			
				item.ApplicationName = varApplicationName;
			
				item.ErrorContent = varErrorContent;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ErrorIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn UserNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FormNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ErrorTimeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ApplicationNameColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ErrorContentColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ErrorId = @"error_id";
			 public static string UserName = @"user_name";
			 public static string FormName = @"form_name";
			 public static string ErrorTime = @"error_time";
			 public static string ApplicationName = @"application_name";
			 public static string ErrorContent = @"error_content";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
