using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LDrug class.
	/// </summary>
    [Serializable]
	public partial class LDrugCollection : ActiveList<LDrug, LDrugCollection>
	{	   
		public LDrugCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LDrugCollection</returns>
		public LDrugCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LDrug o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_Drugs table.
	/// </summary>
	[Serializable]
	public partial class LDrug : ActiveRecord<LDrug>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LDrug()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LDrug(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LDrug(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LDrug(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_Drugs", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarDrugId = new TableSchema.TableColumn(schema);
				colvarDrugId.ColumnName = "Drug_ID";
				colvarDrugId.DataType = DbType.Int32;
				colvarDrugId.MaxLength = 0;
				colvarDrugId.AutoIncrement = true;
				colvarDrugId.IsNullable = false;
				colvarDrugId.IsPrimaryKey = true;
				colvarDrugId.IsForeignKey = false;
				colvarDrugId.IsReadOnly = false;
				colvarDrugId.DefaultSetting = @"";
				colvarDrugId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDrugId);
				
				TableSchema.TableColumn colvarDrugCode = new TableSchema.TableColumn(schema);
				colvarDrugCode.ColumnName = "Drug_Code";
				colvarDrugCode.DataType = DbType.AnsiString;
				colvarDrugCode.MaxLength = 20;
				colvarDrugCode.AutoIncrement = false;
				colvarDrugCode.IsNullable = false;
				colvarDrugCode.IsPrimaryKey = false;
				colvarDrugCode.IsForeignKey = false;
				colvarDrugCode.IsReadOnly = false;
				colvarDrugCode.DefaultSetting = @"";
				colvarDrugCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDrugCode);
				
				TableSchema.TableColumn colvarDrugName = new TableSchema.TableColumn(schema);
				colvarDrugName.ColumnName = "Drug_Name";
				colvarDrugName.DataType = DbType.String;
				colvarDrugName.MaxLength = 200;
				colvarDrugName.AutoIncrement = false;
				colvarDrugName.IsNullable = false;
				colvarDrugName.IsPrimaryKey = false;
				colvarDrugName.IsForeignKey = false;
				colvarDrugName.IsReadOnly = false;
				colvarDrugName.DefaultSetting = @"";
				colvarDrugName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDrugName);
				
				TableSchema.TableColumn colvarDrugTypeId = new TableSchema.TableColumn(schema);
				colvarDrugTypeId.ColumnName = "DrugType_ID";
				colvarDrugTypeId.DataType = DbType.Int16;
				colvarDrugTypeId.MaxLength = 0;
				colvarDrugTypeId.AutoIncrement = false;
				colvarDrugTypeId.IsNullable = false;
				colvarDrugTypeId.IsPrimaryKey = false;
				colvarDrugTypeId.IsForeignKey = false;
				colvarDrugTypeId.IsReadOnly = false;
				colvarDrugTypeId.DefaultSetting = @"";
				colvarDrugTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDrugTypeId);
				
				TableSchema.TableColumn colvarDrugNature = new TableSchema.TableColumn(schema);
				colvarDrugNature.ColumnName = "Drug_Nature";
				colvarDrugNature.DataType = DbType.Byte;
				colvarDrugNature.MaxLength = 0;
				colvarDrugNature.AutoIncrement = false;
				colvarDrugNature.IsNullable = false;
				colvarDrugNature.IsPrimaryKey = false;
				colvarDrugNature.IsForeignKey = false;
				colvarDrugNature.IsReadOnly = false;
				
						colvarDrugNature.DefaultSetting = @"((0))";
				colvarDrugNature.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDrugNature);
				
				TableSchema.TableColumn colvarPrice = new TableSchema.TableColumn(schema);
				colvarPrice.ColumnName = "Price";
				colvarPrice.DataType = DbType.Decimal;
				colvarPrice.MaxLength = 0;
				colvarPrice.AutoIncrement = false;
				colvarPrice.IsNullable = false;
				colvarPrice.IsPrimaryKey = false;
				colvarPrice.IsForeignKey = false;
				colvarPrice.IsReadOnly = false;
				colvarPrice.DefaultSetting = @"";
				colvarPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrice);
				
				TableSchema.TableColumn colvarUnitId = new TableSchema.TableColumn(schema);
				colvarUnitId.ColumnName = "Unit_ID";
				colvarUnitId.DataType = DbType.Int16;
				colvarUnitId.MaxLength = 0;
				colvarUnitId.AutoIncrement = false;
				colvarUnitId.IsNullable = false;
				colvarUnitId.IsPrimaryKey = false;
				colvarUnitId.IsForeignKey = false;
				colvarUnitId.IsReadOnly = false;
				colvarUnitId.DefaultSetting = @"";
				colvarUnitId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitId);
				
				TableSchema.TableColumn colvarHieuLuc = new TableSchema.TableColumn(schema);
				colvarHieuLuc.ColumnName = "HieuLuc";
				colvarHieuLuc.DataType = DbType.Byte;
				colvarHieuLuc.MaxLength = 0;
				colvarHieuLuc.AutoIncrement = false;
				colvarHieuLuc.IsNullable = false;
				colvarHieuLuc.IsPrimaryKey = false;
				colvarHieuLuc.IsForeignKey = false;
				colvarHieuLuc.IsReadOnly = false;
				
						colvarHieuLuc.DefaultSetting = @"((1))";
				colvarHieuLuc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHieuLuc);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 255;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				TableSchema.TableColumn colvarActive = new TableSchema.TableColumn(schema);
				colvarActive.ColumnName = "active";
				colvarActive.DataType = DbType.String;
				colvarActive.MaxLength = 255;
				colvarActive.AutoIncrement = false;
				colvarActive.IsNullable = true;
				colvarActive.IsPrimaryKey = false;
				colvarActive.IsForeignKey = false;
				colvarActive.IsReadOnly = false;
				colvarActive.DefaultSetting = @"";
				colvarActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActive);
				
				TableSchema.TableColumn colvarContent = new TableSchema.TableColumn(schema);
				colvarContent.ColumnName = "Content";
				colvarContent.DataType = DbType.String;
				colvarContent.MaxLength = 255;
				colvarContent.AutoIncrement = false;
				colvarContent.IsNullable = true;
				colvarContent.IsPrimaryKey = false;
				colvarContent.IsForeignKey = false;
				colvarContent.IsReadOnly = false;
				colvarContent.DefaultSetting = @"";
				colvarContent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContent);
				
				TableSchema.TableColumn colvarManufacturers = new TableSchema.TableColumn(schema);
				colvarManufacturers.ColumnName = "Manufacturers";
				colvarManufacturers.DataType = DbType.String;
				colvarManufacturers.MaxLength = 100;
				colvarManufacturers.AutoIncrement = false;
				colvarManufacturers.IsNullable = true;
				colvarManufacturers.IsPrimaryKey = false;
				colvarManufacturers.IsForeignKey = false;
				colvarManufacturers.IsReadOnly = false;
				colvarManufacturers.DefaultSetting = @"";
				colvarManufacturers.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManufacturers);
				
				TableSchema.TableColumn colvarNumberRegister = new TableSchema.TableColumn(schema);
				colvarNumberRegister.ColumnName = "Number_Register";
				colvarNumberRegister.DataType = DbType.String;
				colvarNumberRegister.MaxLength = 50;
				colvarNumberRegister.AutoIncrement = false;
				colvarNumberRegister.IsNullable = true;
				colvarNumberRegister.IsPrimaryKey = false;
				colvarNumberRegister.IsForeignKey = false;
				colvarNumberRegister.IsReadOnly = false;
				colvarNumberRegister.DefaultSetting = @"";
				colvarNumberRegister.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumberRegister);
				
				TableSchema.TableColumn colvarProducer = new TableSchema.TableColumn(schema);
				colvarProducer.ColumnName = "Producer";
				colvarProducer.DataType = DbType.String;
				colvarProducer.MaxLength = 100;
				colvarProducer.AutoIncrement = false;
				colvarProducer.IsNullable = true;
				colvarProducer.IsPrimaryKey = false;
				colvarProducer.IsForeignKey = false;
				colvarProducer.IsReadOnly = false;
				colvarProducer.DefaultSetting = @"";
				colvarProducer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProducer);
				
				TableSchema.TableColumn colvarListBHYT = new TableSchema.TableColumn(schema);
				colvarListBHYT.ColumnName = "ListBHYT";
				colvarListBHYT.DataType = DbType.String;
				colvarListBHYT.MaxLength = 255;
				colvarListBHYT.AutoIncrement = false;
				colvarListBHYT.IsNullable = true;
				colvarListBHYT.IsPrimaryKey = false;
				colvarListBHYT.IsForeignKey = false;
				colvarListBHYT.IsReadOnly = false;
				colvarListBHYT.DefaultSetting = @"";
				colvarListBHYT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarListBHYT);
				
				TableSchema.TableColumn colvarDangBche = new TableSchema.TableColumn(schema);
				colvarDangBche.ColumnName = "Dang_BCHE";
				colvarDangBche.DataType = DbType.String;
				colvarDangBche.MaxLength = 100;
				colvarDangBche.AutoIncrement = false;
				colvarDangBche.IsNullable = true;
				colvarDangBche.IsPrimaryKey = false;
				colvarDangBche.IsForeignKey = false;
				colvarDangBche.IsReadOnly = false;
				colvarDangBche.DefaultSetting = @"";
				colvarDangBche.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDangBche);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "NGUOI_TAO";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 50;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NGAY_TAO";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNgaySua = new TableSchema.TableColumn(schema);
				colvarNgaySua.ColumnName = "NGAY_SUA";
				colvarNgaySua.DataType = DbType.DateTime;
				colvarNgaySua.MaxLength = 0;
				colvarNgaySua.AutoIncrement = false;
				colvarNgaySua.IsNullable = true;
				colvarNgaySua.IsPrimaryKey = false;
				colvarNgaySua.IsForeignKey = false;
				colvarNgaySua.IsReadOnly = false;
				colvarNgaySua.DefaultSetting = @"";
				colvarNgaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgaySua);
				
				TableSchema.TableColumn colvarNguoiSua = new TableSchema.TableColumn(schema);
				colvarNguoiSua.ColumnName = "NGUOI_SUA";
				colvarNguoiSua.DataType = DbType.String;
				colvarNguoiSua.MaxLength = 50;
				colvarNguoiSua.AutoIncrement = false;
				colvarNguoiSua.IsNullable = true;
				colvarNguoiSua.IsPrimaryKey = false;
				colvarNguoiSua.IsForeignKey = false;
				colvarNguoiSua.IsReadOnly = false;
				colvarNguoiSua.DefaultSetting = @"";
				colvarNguoiSua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiSua);
				
				TableSchema.TableColumn colvarBnNgoaiTru = new TableSchema.TableColumn(schema);
				colvarBnNgoaiTru.ColumnName = "BN_NGOAI_TRU";
				colvarBnNgoaiTru.DataType = DbType.Int32;
				colvarBnNgoaiTru.MaxLength = 0;
				colvarBnNgoaiTru.AutoIncrement = false;
				colvarBnNgoaiTru.IsNullable = true;
				colvarBnNgoaiTru.IsPrimaryKey = false;
				colvarBnNgoaiTru.IsForeignKey = false;
				colvarBnNgoaiTru.IsReadOnly = false;
				colvarBnNgoaiTru.DefaultSetting = @"";
				colvarBnNgoaiTru.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBnNgoaiTru);
				
				TableSchema.TableColumn colvarBnNoiTru = new TableSchema.TableColumn(schema);
				colvarBnNoiTru.ColumnName = "BN_NOI_TRU";
				colvarBnNoiTru.DataType = DbType.Int32;
				colvarBnNoiTru.MaxLength = 0;
				colvarBnNoiTru.AutoIncrement = false;
				colvarBnNoiTru.IsNullable = true;
				colvarBnNoiTru.IsPrimaryKey = false;
				colvarBnNoiTru.IsForeignKey = false;
				colvarBnNoiTru.IsReadOnly = false;
				colvarBnNoiTru.DefaultSetting = @"";
				colvarBnNoiTru.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBnNoiTru);
				
				TableSchema.TableColumn colvarMaKhoaThien = new TableSchema.TableColumn(schema);
				colvarMaKhoaThien.ColumnName = "MA_KHOA_THIEN";
				colvarMaKhoaThien.DataType = DbType.String;
				colvarMaKhoaThien.MaxLength = 50;
				colvarMaKhoaThien.AutoIncrement = false;
				colvarMaKhoaThien.IsNullable = true;
				colvarMaKhoaThien.IsPrimaryKey = false;
				colvarMaKhoaThien.IsForeignKey = false;
				colvarMaKhoaThien.IsReadOnly = false;
				colvarMaKhoaThien.DefaultSetting = @"";
				colvarMaKhoaThien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaKhoaThien);
				
				TableSchema.TableColumn colvarKieuThuocVt = new TableSchema.TableColumn(schema);
				colvarKieuThuocVt.ColumnName = "KIEU_THUOC_VT";
				colvarKieuThuocVt.DataType = DbType.String;
				colvarKieuThuocVt.MaxLength = 10;
				colvarKieuThuocVt.AutoIncrement = false;
				colvarKieuThuocVt.IsNullable = true;
				colvarKieuThuocVt.IsPrimaryKey = false;
				colvarKieuThuocVt.IsForeignKey = false;
				colvarKieuThuocVt.IsReadOnly = false;
				colvarKieuThuocVt.DefaultSetting = @"";
				colvarKieuThuocVt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKieuThuocVt);
				
				TableSchema.TableColumn colvarTenBhyt = new TableSchema.TableColumn(schema);
				colvarTenBhyt.ColumnName = "TEN_BHYT";
				colvarTenBhyt.DataType = DbType.String;
				colvarTenBhyt.MaxLength = 200;
				colvarTenBhyt.AutoIncrement = false;
				colvarTenBhyt.IsNullable = true;
				colvarTenBhyt.IsPrimaryKey = false;
				colvarTenBhyt.IsForeignKey = false;
				colvarTenBhyt.IsReadOnly = false;
				colvarTenBhyt.DefaultSetting = @"";
				colvarTenBhyt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenBhyt);
				
				TableSchema.TableColumn colvarNqTt = new TableSchema.TableColumn(schema);
				colvarNqTt.ColumnName = "NQ_TT";
				colvarNqTt.DataType = DbType.String;
				colvarNqTt.MaxLength = 50;
				colvarNqTt.AutoIncrement = false;
				colvarNqTt.IsNullable = true;
				colvarNqTt.IsPrimaryKey = false;
				colvarNqTt.IsForeignKey = false;
				colvarNqTt.IsReadOnly = false;
				colvarNqTt.DefaultSetting = @"";
				colvarNqTt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNqTt);
				
				TableSchema.TableColumn colvarIsNhapSLKhong = new TableSchema.TableColumn(schema);
				colvarIsNhapSLKhong.ColumnName = "IsNhap_SLKhong";
				colvarIsNhapSLKhong.DataType = DbType.Boolean;
				colvarIsNhapSLKhong.MaxLength = 0;
				colvarIsNhapSLKhong.AutoIncrement = false;
				colvarIsNhapSLKhong.IsNullable = true;
				colvarIsNhapSLKhong.IsPrimaryKey = false;
				colvarIsNhapSLKhong.IsForeignKey = false;
				colvarIsNhapSLKhong.IsReadOnly = false;
				
						colvarIsNhapSLKhong.DefaultSetting = @"((0))";
				colvarIsNhapSLKhong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsNhapSLKhong);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_Drugs",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("DrugId")]
		[Bindable(true)]
		public int DrugId 
		{
			get { return GetColumnValue<int>(Columns.DrugId); }
			set { SetColumnValue(Columns.DrugId, value); }
		}
		  
		[XmlAttribute("DrugCode")]
		[Bindable(true)]
		public string DrugCode 
		{
			get { return GetColumnValue<string>(Columns.DrugCode); }
			set { SetColumnValue(Columns.DrugCode, value); }
		}
		  
		[XmlAttribute("DrugName")]
		[Bindable(true)]
		public string DrugName 
		{
			get { return GetColumnValue<string>(Columns.DrugName); }
			set { SetColumnValue(Columns.DrugName, value); }
		}
		  
		[XmlAttribute("DrugTypeId")]
		[Bindable(true)]
		public short DrugTypeId 
		{
			get { return GetColumnValue<short>(Columns.DrugTypeId); }
			set { SetColumnValue(Columns.DrugTypeId, value); }
		}
		  
		[XmlAttribute("DrugNature")]
		[Bindable(true)]
		public byte DrugNature 
		{
			get { return GetColumnValue<byte>(Columns.DrugNature); }
			set { SetColumnValue(Columns.DrugNature, value); }
		}
		  
		[XmlAttribute("Price")]
		[Bindable(true)]
		public decimal Price 
		{
			get { return GetColumnValue<decimal>(Columns.Price); }
			set { SetColumnValue(Columns.Price, value); }
		}
		  
		[XmlAttribute("UnitId")]
		[Bindable(true)]
		public short UnitId 
		{
			get { return GetColumnValue<short>(Columns.UnitId); }
			set { SetColumnValue(Columns.UnitId, value); }
		}
		  
		[XmlAttribute("HieuLuc")]
		[Bindable(true)]
		public byte HieuLuc 
		{
			get { return GetColumnValue<byte>(Columns.HieuLuc); }
			set { SetColumnValue(Columns.HieuLuc, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		  
		[XmlAttribute("Active")]
		[Bindable(true)]
		public string Active 
		{
			get { return GetColumnValue<string>(Columns.Active); }
			set { SetColumnValue(Columns.Active, value); }
		}
		  
		[XmlAttribute("Content")]
		[Bindable(true)]
		public string Content 
		{
			get { return GetColumnValue<string>(Columns.Content); }
			set { SetColumnValue(Columns.Content, value); }
		}
		  
		[XmlAttribute("Manufacturers")]
		[Bindable(true)]
		public string Manufacturers 
		{
			get { return GetColumnValue<string>(Columns.Manufacturers); }
			set { SetColumnValue(Columns.Manufacturers, value); }
		}
		  
		[XmlAttribute("NumberRegister")]
		[Bindable(true)]
		public string NumberRegister 
		{
			get { return GetColumnValue<string>(Columns.NumberRegister); }
			set { SetColumnValue(Columns.NumberRegister, value); }
		}
		  
		[XmlAttribute("Producer")]
		[Bindable(true)]
		public string Producer 
		{
			get { return GetColumnValue<string>(Columns.Producer); }
			set { SetColumnValue(Columns.Producer, value); }
		}
		  
		[XmlAttribute("ListBHYT")]
		[Bindable(true)]
		public string ListBHYT 
		{
			get { return GetColumnValue<string>(Columns.ListBHYT); }
			set { SetColumnValue(Columns.ListBHYT, value); }
		}
		  
		[XmlAttribute("DangBche")]
		[Bindable(true)]
		public string DangBche 
		{
			get { return GetColumnValue<string>(Columns.DangBche); }
			set { SetColumnValue(Columns.DangBche, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NgaySua")]
		[Bindable(true)]
		public DateTime? NgaySua 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgaySua); }
			set { SetColumnValue(Columns.NgaySua, value); }
		}
		  
		[XmlAttribute("NguoiSua")]
		[Bindable(true)]
		public string NguoiSua 
		{
			get { return GetColumnValue<string>(Columns.NguoiSua); }
			set { SetColumnValue(Columns.NguoiSua, value); }
		}
		  
		[XmlAttribute("BnNgoaiTru")]
		[Bindable(true)]
		public int? BnNgoaiTru 
		{
			get { return GetColumnValue<int?>(Columns.BnNgoaiTru); }
			set { SetColumnValue(Columns.BnNgoaiTru, value); }
		}
		  
		[XmlAttribute("BnNoiTru")]
		[Bindable(true)]
		public int? BnNoiTru 
		{
			get { return GetColumnValue<int?>(Columns.BnNoiTru); }
			set { SetColumnValue(Columns.BnNoiTru, value); }
		}
		  
		[XmlAttribute("MaKhoaThien")]
		[Bindable(true)]
		public string MaKhoaThien 
		{
			get { return GetColumnValue<string>(Columns.MaKhoaThien); }
			set { SetColumnValue(Columns.MaKhoaThien, value); }
		}
		  
		[XmlAttribute("KieuThuocVt")]
		[Bindable(true)]
		public string KieuThuocVt 
		{
			get { return GetColumnValue<string>(Columns.KieuThuocVt); }
			set { SetColumnValue(Columns.KieuThuocVt, value); }
		}
		  
		[XmlAttribute("TenBhyt")]
		[Bindable(true)]
		public string TenBhyt 
		{
			get { return GetColumnValue<string>(Columns.TenBhyt); }
			set { SetColumnValue(Columns.TenBhyt, value); }
		}
		  
		[XmlAttribute("NqTt")]
		[Bindable(true)]
		public string NqTt 
		{
			get { return GetColumnValue<string>(Columns.NqTt); }
			set { SetColumnValue(Columns.NqTt, value); }
		}
		  
		[XmlAttribute("IsNhapSLKhong")]
		[Bindable(true)]
		public bool? IsNhapSLKhong 
		{
			get { return GetColumnValue<bool?>(Columns.IsNhapSLKhong); }
			set { SetColumnValue(Columns.IsNhapSLKhong, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varDrugCode,string varDrugName,short varDrugTypeId,byte varDrugNature,decimal varPrice,short varUnitId,byte varHieuLuc,string varSDesc,string varActive,string varContent,string varManufacturers,string varNumberRegister,string varProducer,string varListBHYT,string varDangBche,string varNguoiTao,DateTime? varNgayTao,DateTime? varNgaySua,string varNguoiSua,int? varBnNgoaiTru,int? varBnNoiTru,string varMaKhoaThien,string varKieuThuocVt,string varTenBhyt,string varNqTt,bool? varIsNhapSLKhong)
		{
			LDrug item = new LDrug();
			
			item.DrugCode = varDrugCode;
			
			item.DrugName = varDrugName;
			
			item.DrugTypeId = varDrugTypeId;
			
			item.DrugNature = varDrugNature;
			
			item.Price = varPrice;
			
			item.UnitId = varUnitId;
			
			item.HieuLuc = varHieuLuc;
			
			item.SDesc = varSDesc;
			
			item.Active = varActive;
			
			item.Content = varContent;
			
			item.Manufacturers = varManufacturers;
			
			item.NumberRegister = varNumberRegister;
			
			item.Producer = varProducer;
			
			item.ListBHYT = varListBHYT;
			
			item.DangBche = varDangBche;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayTao = varNgayTao;
			
			item.NgaySua = varNgaySua;
			
			item.NguoiSua = varNguoiSua;
			
			item.BnNgoaiTru = varBnNgoaiTru;
			
			item.BnNoiTru = varBnNoiTru;
			
			item.MaKhoaThien = varMaKhoaThien;
			
			item.KieuThuocVt = varKieuThuocVt;
			
			item.TenBhyt = varTenBhyt;
			
			item.NqTt = varNqTt;
			
			item.IsNhapSLKhong = varIsNhapSLKhong;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varDrugId,string varDrugCode,string varDrugName,short varDrugTypeId,byte varDrugNature,decimal varPrice,short varUnitId,byte varHieuLuc,string varSDesc,string varActive,string varContent,string varManufacturers,string varNumberRegister,string varProducer,string varListBHYT,string varDangBche,string varNguoiTao,DateTime? varNgayTao,DateTime? varNgaySua,string varNguoiSua,int? varBnNgoaiTru,int? varBnNoiTru,string varMaKhoaThien,string varKieuThuocVt,string varTenBhyt,string varNqTt,bool? varIsNhapSLKhong)
		{
			LDrug item = new LDrug();
			
				item.DrugId = varDrugId;
			
				item.DrugCode = varDrugCode;
			
				item.DrugName = varDrugName;
			
				item.DrugTypeId = varDrugTypeId;
			
				item.DrugNature = varDrugNature;
			
				item.Price = varPrice;
			
				item.UnitId = varUnitId;
			
				item.HieuLuc = varHieuLuc;
			
				item.SDesc = varSDesc;
			
				item.Active = varActive;
			
				item.Content = varContent;
			
				item.Manufacturers = varManufacturers;
			
				item.NumberRegister = varNumberRegister;
			
				item.Producer = varProducer;
			
				item.ListBHYT = varListBHYT;
			
				item.DangBche = varDangBche;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayTao = varNgayTao;
			
				item.NgaySua = varNgaySua;
			
				item.NguoiSua = varNguoiSua;
			
				item.BnNgoaiTru = varBnNgoaiTru;
			
				item.BnNoiTru = varBnNoiTru;
			
				item.MaKhoaThien = varMaKhoaThien;
			
				item.KieuThuocVt = varKieuThuocVt;
			
				item.TenBhyt = varTenBhyt;
			
				item.NqTt = varNqTt;
			
				item.IsNhapSLKhong = varIsNhapSLKhong;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn DrugIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DrugCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DrugNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DrugTypeIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DrugNatureColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitIdColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn HieuLucColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ActiveColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ContentColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ManufacturersColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn NumberRegisterColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ProducerColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ListBHYTColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn DangBcheColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn NgaySuaColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiSuaColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn BnNgoaiTruColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn BnNoiTruColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn MaKhoaThienColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn KieuThuocVtColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn TenBhytColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn NqTtColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn IsNhapSLKhongColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string DrugId = @"Drug_ID";
			 public static string DrugCode = @"Drug_Code";
			 public static string DrugName = @"Drug_Name";
			 public static string DrugTypeId = @"DrugType_ID";
			 public static string DrugNature = @"Drug_Nature";
			 public static string Price = @"Price";
			 public static string UnitId = @"Unit_ID";
			 public static string HieuLuc = @"HieuLuc";
			 public static string SDesc = @"sDesc";
			 public static string Active = @"active";
			 public static string Content = @"Content";
			 public static string Manufacturers = @"Manufacturers";
			 public static string NumberRegister = @"Number_Register";
			 public static string Producer = @"Producer";
			 public static string ListBHYT = @"ListBHYT";
			 public static string DangBche = @"Dang_BCHE";
			 public static string NguoiTao = @"NGUOI_TAO";
			 public static string NgayTao = @"NGAY_TAO";
			 public static string NgaySua = @"NGAY_SUA";
			 public static string NguoiSua = @"NGUOI_SUA";
			 public static string BnNgoaiTru = @"BN_NGOAI_TRU";
			 public static string BnNoiTru = @"BN_NOI_TRU";
			 public static string MaKhoaThien = @"MA_KHOA_THIEN";
			 public static string KieuThuocVt = @"KIEU_THUOC_VT";
			 public static string TenBhyt = @"TEN_BHYT";
			 public static string NqTt = @"NQ_TT";
			 public static string IsNhapSLKhong = @"IsNhap_SLKhong";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
