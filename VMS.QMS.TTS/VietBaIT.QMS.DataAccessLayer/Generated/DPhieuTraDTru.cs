using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the DPhieuTraDTru class.
	/// </summary>
    [Serializable]
	public partial class DPhieuTraDTruCollection : ActiveList<DPhieuTraDTru, DPhieuTraDTruCollection>
	{	   
		public DPhieuTraDTruCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DPhieuTraDTruCollection</returns>
		public DPhieuTraDTruCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DPhieuTraDTru o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the D_Phieu_Tra_DTru table.
	/// </summary>
	[Serializable]
	public partial class DPhieuTraDTru : ActiveRecord<DPhieuTraDTru>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DPhieuTraDTru()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DPhieuTraDTru(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DPhieuTraDTru(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DPhieuTraDTru(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("D_Phieu_Tra_DTru", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdPhieuTraDtru = new TableSchema.TableColumn(schema);
				colvarIdPhieuTraDtru.ColumnName = "Id_PhieuTra_Dtru";
				colvarIdPhieuTraDtru.DataType = DbType.Int32;
				colvarIdPhieuTraDtru.MaxLength = 0;
				colvarIdPhieuTraDtru.AutoIncrement = true;
				colvarIdPhieuTraDtru.IsNullable = false;
				colvarIdPhieuTraDtru.IsPrimaryKey = true;
				colvarIdPhieuTraDtru.IsForeignKey = false;
				colvarIdPhieuTraDtru.IsReadOnly = false;
				colvarIdPhieuTraDtru.DefaultSetting = @"";
				colvarIdPhieuTraDtru.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhieuTraDtru);
				
				TableSchema.TableColumn colvarNgayTraDtru = new TableSchema.TableColumn(schema);
				colvarNgayTraDtru.ColumnName = "Ngay_Tra_Dtru";
				colvarNgayTraDtru.DataType = DbType.DateTime;
				colvarNgayTraDtru.MaxLength = 0;
				colvarNgayTraDtru.AutoIncrement = false;
				colvarNgayTraDtru.IsNullable = false;
				colvarNgayTraDtru.IsPrimaryKey = false;
				colvarNgayTraDtru.IsForeignKey = false;
				colvarNgayTraDtru.IsReadOnly = false;
				
						colvarNgayTraDtru.DefaultSetting = @"(getdate())";
				colvarNgayTraDtru.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTraDtru);
				
				TableSchema.TableColumn colvarIdNhanVien = new TableSchema.TableColumn(schema);
				colvarIdNhanVien.ColumnName = "Id_NhanVien";
				colvarIdNhanVien.DataType = DbType.Int16;
				colvarIdNhanVien.MaxLength = 0;
				colvarIdNhanVien.AutoIncrement = false;
				colvarIdNhanVien.IsNullable = false;
				colvarIdNhanVien.IsPrimaryKey = false;
				colvarIdNhanVien.IsForeignKey = false;
				colvarIdNhanVien.IsReadOnly = false;
				colvarIdNhanVien.DefaultSetting = @"";
				colvarIdNhanVien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdNhanVien);
				
				TableSchema.TableColumn colvarIdKhoa = new TableSchema.TableColumn(schema);
				colvarIdKhoa.ColumnName = "Id_Khoa";
				colvarIdKhoa.DataType = DbType.Int16;
				colvarIdKhoa.MaxLength = 0;
				colvarIdKhoa.AutoIncrement = false;
				colvarIdKhoa.IsNullable = true;
				colvarIdKhoa.IsPrimaryKey = false;
				colvarIdKhoa.IsForeignKey = false;
				colvarIdKhoa.IsReadOnly = false;
				colvarIdKhoa.DefaultSetting = @"";
				colvarIdKhoa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdKhoa);
				
				TableSchema.TableColumn colvarIdKho = new TableSchema.TableColumn(schema);
				colvarIdKho.ColumnName = "Id_Kho";
				colvarIdKho.DataType = DbType.Int16;
				colvarIdKho.MaxLength = 0;
				colvarIdKho.AutoIncrement = false;
				colvarIdKho.IsNullable = false;
				colvarIdKho.IsPrimaryKey = false;
				colvarIdKho.IsForeignKey = false;
				colvarIdKho.IsReadOnly = false;
				colvarIdKho.DefaultSetting = @"";
				colvarIdKho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdKho);
				
				TableSchema.TableColumn colvarDaTra = new TableSchema.TableColumn(schema);
				colvarDaTra.ColumnName = "Da_Tra";
				colvarDaTra.DataType = DbType.Boolean;
				colvarDaTra.MaxLength = 0;
				colvarDaTra.AutoIncrement = false;
				colvarDaTra.IsNullable = true;
				colvarDaTra.IsPrimaryKey = false;
				colvarDaTra.IsForeignKey = false;
				colvarDaTra.IsReadOnly = false;
				
						colvarDaTra.DefaultSetting = @"((0))";
				colvarDaTra.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDaTra);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "Nguoi_Tao";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 20;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = false;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "Ngay_Tao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = false;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				
						colvarNgayTao.DefaultSetting = @"(getdate())";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNguoiXNhan = new TableSchema.TableColumn(schema);
				colvarNguoiXNhan.ColumnName = "Nguoi_XNhan";
				colvarNguoiXNhan.DataType = DbType.String;
				colvarNguoiXNhan.MaxLength = 20;
				colvarNguoiXNhan.AutoIncrement = false;
				colvarNguoiXNhan.IsNullable = true;
				colvarNguoiXNhan.IsPrimaryKey = false;
				colvarNguoiXNhan.IsForeignKey = false;
				colvarNguoiXNhan.IsReadOnly = false;
				colvarNguoiXNhan.DefaultSetting = @"";
				colvarNguoiXNhan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiXNhan);
				
				TableSchema.TableColumn colvarNgayXNhan = new TableSchema.TableColumn(schema);
				colvarNgayXNhan.ColumnName = "Ngay_XNhan";
				colvarNgayXNhan.DataType = DbType.DateTime;
				colvarNgayXNhan.MaxLength = 0;
				colvarNgayXNhan.AutoIncrement = false;
				colvarNgayXNhan.IsNullable = true;
				colvarNgayXNhan.IsPrimaryKey = false;
				colvarNgayXNhan.IsForeignKey = false;
				colvarNgayXNhan.IsReadOnly = false;
				colvarNgayXNhan.DefaultSetting = @"";
				colvarNgayXNhan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayXNhan);
				
				TableSchema.TableColumn colvarNguoiSua = new TableSchema.TableColumn(schema);
				colvarNguoiSua.ColumnName = "Nguoi_Sua";
				colvarNguoiSua.DataType = DbType.String;
				colvarNguoiSua.MaxLength = 50;
				colvarNguoiSua.AutoIncrement = false;
				colvarNguoiSua.IsNullable = true;
				colvarNguoiSua.IsPrimaryKey = false;
				colvarNguoiSua.IsForeignKey = false;
				colvarNguoiSua.IsReadOnly = false;
				colvarNguoiSua.DefaultSetting = @"";
				colvarNguoiSua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiSua);
				
				TableSchema.TableColumn colvarNgaySua = new TableSchema.TableColumn(schema);
				colvarNgaySua.ColumnName = "Ngay_Sua";
				colvarNgaySua.DataType = DbType.DateTime;
				colvarNgaySua.MaxLength = 0;
				colvarNgaySua.AutoIncrement = false;
				colvarNgaySua.IsNullable = true;
				colvarNgaySua.IsPrimaryKey = false;
				colvarNgaySua.IsForeignKey = false;
				colvarNgaySua.IsReadOnly = false;
				colvarNgaySua.DefaultSetting = @"";
				colvarNgaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgaySua);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("D_Phieu_Tra_DTru",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdPhieuTraDtru")]
		[Bindable(true)]
		public int IdPhieuTraDtru 
		{
			get { return GetColumnValue<int>(Columns.IdPhieuTraDtru); }
			set { SetColumnValue(Columns.IdPhieuTraDtru, value); }
		}
		  
		[XmlAttribute("NgayTraDtru")]
		[Bindable(true)]
		public DateTime NgayTraDtru 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayTraDtru); }
			set { SetColumnValue(Columns.NgayTraDtru, value); }
		}
		  
		[XmlAttribute("IdNhanVien")]
		[Bindable(true)]
		public short IdNhanVien 
		{
			get { return GetColumnValue<short>(Columns.IdNhanVien); }
			set { SetColumnValue(Columns.IdNhanVien, value); }
		}
		  
		[XmlAttribute("IdKhoa")]
		[Bindable(true)]
		public short? IdKhoa 
		{
			get { return GetColumnValue<short?>(Columns.IdKhoa); }
			set { SetColumnValue(Columns.IdKhoa, value); }
		}
		  
		[XmlAttribute("IdKho")]
		[Bindable(true)]
		public short IdKho 
		{
			get { return GetColumnValue<short>(Columns.IdKho); }
			set { SetColumnValue(Columns.IdKho, value); }
		}
		  
		[XmlAttribute("DaTra")]
		[Bindable(true)]
		public bool? DaTra 
		{
			get { return GetColumnValue<bool?>(Columns.DaTra); }
			set { SetColumnValue(Columns.DaTra, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime NgayTao 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NguoiXNhan")]
		[Bindable(true)]
		public string NguoiXNhan 
		{
			get { return GetColumnValue<string>(Columns.NguoiXNhan); }
			set { SetColumnValue(Columns.NguoiXNhan, value); }
		}
		  
		[XmlAttribute("NgayXNhan")]
		[Bindable(true)]
		public DateTime? NgayXNhan 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayXNhan); }
			set { SetColumnValue(Columns.NgayXNhan, value); }
		}
		  
		[XmlAttribute("NguoiSua")]
		[Bindable(true)]
		public string NguoiSua 
		{
			get { return GetColumnValue<string>(Columns.NguoiSua); }
			set { SetColumnValue(Columns.NguoiSua, value); }
		}
		  
		[XmlAttribute("NgaySua")]
		[Bindable(true)]
		public DateTime? NgaySua 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgaySua); }
			set { SetColumnValue(Columns.NgaySua, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(DateTime varNgayTraDtru,short varIdNhanVien,short? varIdKhoa,short varIdKho,bool? varDaTra,string varNguoiTao,DateTime varNgayTao,string varNguoiXNhan,DateTime? varNgayXNhan,string varNguoiSua,DateTime? varNgaySua)
		{
			DPhieuTraDTru item = new DPhieuTraDTru();
			
			item.NgayTraDtru = varNgayTraDtru;
			
			item.IdNhanVien = varIdNhanVien;
			
			item.IdKhoa = varIdKhoa;
			
			item.IdKho = varIdKho;
			
			item.DaTra = varDaTra;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayTao = varNgayTao;
			
			item.NguoiXNhan = varNguoiXNhan;
			
			item.NgayXNhan = varNgayXNhan;
			
			item.NguoiSua = varNguoiSua;
			
			item.NgaySua = varNgaySua;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdPhieuTraDtru,DateTime varNgayTraDtru,short varIdNhanVien,short? varIdKhoa,short varIdKho,bool? varDaTra,string varNguoiTao,DateTime varNgayTao,string varNguoiXNhan,DateTime? varNgayXNhan,string varNguoiSua,DateTime? varNgaySua)
		{
			DPhieuTraDTru item = new DPhieuTraDTru();
			
				item.IdPhieuTraDtru = varIdPhieuTraDtru;
			
				item.NgayTraDtru = varNgayTraDtru;
			
				item.IdNhanVien = varIdNhanVien;
			
				item.IdKhoa = varIdKhoa;
			
				item.IdKho = varIdKho;
			
				item.DaTra = varDaTra;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayTao = varNgayTao;
			
				item.NguoiXNhan = varNguoiXNhan;
			
				item.NgayXNhan = varNgayXNhan;
			
				item.NguoiSua = varNguoiSua;
			
				item.NgaySua = varNgaySua;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdPhieuTraDtruColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTraDtruColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdNhanVienColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IdKhoaColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IdKhoColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DaTraColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiXNhanColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayXNhanColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiSuaColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn NgaySuaColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdPhieuTraDtru = @"Id_PhieuTra_Dtru";
			 public static string NgayTraDtru = @"Ngay_Tra_Dtru";
			 public static string IdNhanVien = @"Id_NhanVien";
			 public static string IdKhoa = @"Id_Khoa";
			 public static string IdKho = @"Id_Kho";
			 public static string DaTra = @"Da_Tra";
			 public static string NguoiTao = @"Nguoi_Tao";
			 public static string NgayTao = @"Ngay_Tao";
			 public static string NguoiXNhan = @"Nguoi_XNhan";
			 public static string NgayXNhan = @"Ngay_XNhan";
			 public static string NguoiSua = @"Nguoi_Sua";
			 public static string NgaySua = @"Ngay_Sua";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
