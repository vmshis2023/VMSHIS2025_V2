using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LGroupService class.
	/// </summary>
    [Serializable]
	public partial class LGroupServiceCollection : ActiveList<LGroupService, LGroupServiceCollection>
	{	   
		public LGroupServiceCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LGroupServiceCollection</returns>
		public LGroupServiceCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LGroupService o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_Group_Services table.
	/// </summary>
	[Serializable]
	public partial class LGroupService : ActiveRecord<LGroupService>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LGroupService()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LGroupService(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LGroupService(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LGroupService(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_Group_Services", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarGroupServiceId = new TableSchema.TableColumn(schema);
				colvarGroupServiceId.ColumnName = "GroupService_ID";
				colvarGroupServiceId.DataType = DbType.Int32;
				colvarGroupServiceId.MaxLength = 0;
				colvarGroupServiceId.AutoIncrement = true;
				colvarGroupServiceId.IsNullable = false;
				colvarGroupServiceId.IsPrimaryKey = true;
				colvarGroupServiceId.IsForeignKey = false;
				colvarGroupServiceId.IsReadOnly = false;
				colvarGroupServiceId.DefaultSetting = @"";
				colvarGroupServiceId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGroupServiceId);
				
				TableSchema.TableColumn colvarGroupCode = new TableSchema.TableColumn(schema);
				colvarGroupCode.ColumnName = "Group_Code";
				colvarGroupCode.DataType = DbType.String;
				colvarGroupCode.MaxLength = 50;
				colvarGroupCode.AutoIncrement = false;
				colvarGroupCode.IsNullable = true;
				colvarGroupCode.IsPrimaryKey = false;
				colvarGroupCode.IsForeignKey = false;
				colvarGroupCode.IsReadOnly = false;
				colvarGroupCode.DefaultSetting = @"";
				colvarGroupCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGroupCode);
				
				TableSchema.TableColumn colvarGroupName = new TableSchema.TableColumn(schema);
				colvarGroupName.ColumnName = "Group_Name";
				colvarGroupName.DataType = DbType.String;
				colvarGroupName.MaxLength = 50;
				colvarGroupName.AutoIncrement = false;
				colvarGroupName.IsNullable = true;
				colvarGroupName.IsPrimaryKey = false;
				colvarGroupName.IsForeignKey = false;
				colvarGroupName.IsReadOnly = false;
				colvarGroupName.DefaultSetting = @"";
				colvarGroupName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGroupName);
				
				TableSchema.TableColumn colvarParentId = new TableSchema.TableColumn(schema);
				colvarParentId.ColumnName = "Parent_ID";
				colvarParentId.DataType = DbType.Int16;
				colvarParentId.MaxLength = 0;
				colvarParentId.AutoIncrement = false;
				colvarParentId.IsNullable = true;
				colvarParentId.IsPrimaryKey = false;
				colvarParentId.IsForeignKey = false;
				colvarParentId.IsReadOnly = false;
				colvarParentId.DefaultSetting = @"";
				colvarParentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParentId);
				
				TableSchema.TableColumn colvarServiceId = new TableSchema.TableColumn(schema);
				colvarServiceId.ColumnName = "Service_ID";
				colvarServiceId.DataType = DbType.Int16;
				colvarServiceId.MaxLength = 0;
				colvarServiceId.AutoIncrement = false;
				colvarServiceId.IsNullable = true;
				colvarServiceId.IsPrimaryKey = false;
				colvarServiceId.IsForeignKey = false;
				colvarServiceId.IsReadOnly = false;
				colvarServiceId.DefaultSetting = @"";
				colvarServiceId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceId);
				
				TableSchema.TableColumn colvarServiceDetailId = new TableSchema.TableColumn(schema);
				colvarServiceDetailId.ColumnName = "ServiceDetail_ID";
				colvarServiceDetailId.DataType = DbType.Int16;
				colvarServiceDetailId.MaxLength = 0;
				colvarServiceDetailId.AutoIncrement = false;
				colvarServiceDetailId.IsNullable = true;
				colvarServiceDetailId.IsPrimaryKey = false;
				colvarServiceDetailId.IsForeignKey = false;
				colvarServiceDetailId.IsReadOnly = false;
				colvarServiceDetailId.DefaultSetting = @"";
				colvarServiceDetailId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceDetailId);
				
				TableSchema.TableColumn colvarIntOrder = new TableSchema.TableColumn(schema);
				colvarIntOrder.ColumnName = "IntOrder";
				colvarIntOrder.DataType = DbType.Int32;
				colvarIntOrder.MaxLength = 0;
				colvarIntOrder.AutoIncrement = false;
				colvarIntOrder.IsNullable = true;
				colvarIntOrder.IsPrimaryKey = false;
				colvarIntOrder.IsForeignKey = false;
				colvarIntOrder.IsReadOnly = false;
				colvarIntOrder.DefaultSetting = @"";
				colvarIntOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIntOrder);
				
				TableSchema.TableColumn colvarIsView = new TableSchema.TableColumn(schema);
				colvarIsView.ColumnName = "IsView";
				colvarIsView.DataType = DbType.Int32;
				colvarIsView.MaxLength = 0;
				colvarIsView.AutoIncrement = false;
				colvarIsView.IsNullable = true;
				colvarIsView.IsPrimaryKey = false;
				colvarIsView.IsForeignKey = false;
				colvarIsView.IsReadOnly = false;
				
						colvarIsView.DefaultSetting = @"((1))";
				colvarIsView.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsView);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "Created_By";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "Create_Date";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = true;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				colvarCreateDate.DefaultSetting = @"";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_Group_Services",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("GroupServiceId")]
		[Bindable(true)]
		public int GroupServiceId 
		{
			get { return GetColumnValue<int>(Columns.GroupServiceId); }
			set { SetColumnValue(Columns.GroupServiceId, value); }
		}
		  
		[XmlAttribute("GroupCode")]
		[Bindable(true)]
		public string GroupCode 
		{
			get { return GetColumnValue<string>(Columns.GroupCode); }
			set { SetColumnValue(Columns.GroupCode, value); }
		}
		  
		[XmlAttribute("GroupName")]
		[Bindable(true)]
		public string GroupName 
		{
			get { return GetColumnValue<string>(Columns.GroupName); }
			set { SetColumnValue(Columns.GroupName, value); }
		}
		  
		[XmlAttribute("ParentId")]
		[Bindable(true)]
		public short? ParentId 
		{
			get { return GetColumnValue<short?>(Columns.ParentId); }
			set { SetColumnValue(Columns.ParentId, value); }
		}
		  
		[XmlAttribute("ServiceId")]
		[Bindable(true)]
		public short? ServiceId 
		{
			get { return GetColumnValue<short?>(Columns.ServiceId); }
			set { SetColumnValue(Columns.ServiceId, value); }
		}
		  
		[XmlAttribute("ServiceDetailId")]
		[Bindable(true)]
		public short? ServiceDetailId 
		{
			get { return GetColumnValue<short?>(Columns.ServiceDetailId); }
			set { SetColumnValue(Columns.ServiceDetailId, value); }
		}
		  
		[XmlAttribute("IntOrder")]
		[Bindable(true)]
		public int? IntOrder 
		{
			get { return GetColumnValue<int?>(Columns.IntOrder); }
			set { SetColumnValue(Columns.IntOrder, value); }
		}
		  
		[XmlAttribute("IsView")]
		[Bindable(true)]
		public int? IsView 
		{
			get { return GetColumnValue<int?>(Columns.IsView); }
			set { SetColumnValue(Columns.IsView, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime? CreateDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varGroupCode,string varGroupName,short? varParentId,short? varServiceId,short? varServiceDetailId,int? varIntOrder,int? varIsView,string varCreatedBy,DateTime? varCreateDate)
		{
			LGroupService item = new LGroupService();
			
			item.GroupCode = varGroupCode;
			
			item.GroupName = varGroupName;
			
			item.ParentId = varParentId;
			
			item.ServiceId = varServiceId;
			
			item.ServiceDetailId = varServiceDetailId;
			
			item.IntOrder = varIntOrder;
			
			item.IsView = varIsView;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreateDate = varCreateDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varGroupServiceId,string varGroupCode,string varGroupName,short? varParentId,short? varServiceId,short? varServiceDetailId,int? varIntOrder,int? varIsView,string varCreatedBy,DateTime? varCreateDate)
		{
			LGroupService item = new LGroupService();
			
				item.GroupServiceId = varGroupServiceId;
			
				item.GroupCode = varGroupCode;
			
				item.GroupName = varGroupName;
			
				item.ParentId = varParentId;
			
				item.ServiceId = varServiceId;
			
				item.ServiceDetailId = varServiceDetailId;
			
				item.IntOrder = varIntOrder;
			
				item.IsView = varIsView;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreateDate = varCreateDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn GroupServiceIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn GroupCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn GroupNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ParentIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceDetailIdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IntOrderColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IsViewColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string GroupServiceId = @"GroupService_ID";
			 public static string GroupCode = @"Group_Code";
			 public static string GroupName = @"Group_Name";
			 public static string ParentId = @"Parent_ID";
			 public static string ServiceId = @"Service_ID";
			 public static string ServiceDetailId = @"ServiceDetail_ID";
			 public static string IntOrder = @"IntOrder";
			 public static string IsView = @"IsView";
			 public static string CreatedBy = @"Created_By";
			 public static string CreateDate = @"Create_Date";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
