using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
    /// <summary>
    /// Controller class for T_Physical_Exam
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TPhysicalExamController
    {
        // Preload our schema..
        TPhysicalExam thisSchemaLoad = new TPhysicalExam();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TPhysicalExamCollection FetchAll()
        {
            TPhysicalExamCollection coll = new TPhysicalExamCollection();
            Query qry = new Query(TPhysicalExam.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TPhysicalExamCollection FetchByID(object PhysicalId)
        {
            TPhysicalExamCollection coll = new TPhysicalExamCollection().Where("Physical_ID", PhysicalId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TPhysicalExamCollection FetchByQuery(Query qry)
        {
            TPhysicalExamCollection coll = new TPhysicalExamCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object PhysicalId)
        {
            return (TPhysicalExam.Delete(PhysicalId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object PhysicalId)
        {
            return (TPhysicalExam.Destroy(PhysicalId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int? PatientDeptId,int? TreatId,string PatientCode,int? PatientId,string BodyTemp,string BloodPressure,int? Artery,int? BreatheRate,string Height,string Weight,string SDesc,string CreateBy,DateTime? CreateDate,string ModifyBy,DateTime? ModifyDate)
	    {
		    TPhysicalExam item = new TPhysicalExam();
		    
            item.PatientDeptId = PatientDeptId;
            
            item.TreatId = TreatId;
            
            item.PatientCode = PatientCode;
            
            item.PatientId = PatientId;
            
            item.BodyTemp = BodyTemp;
            
            item.BloodPressure = BloodPressure;
            
            item.Artery = Artery;
            
            item.BreatheRate = BreatheRate;
            
            item.Height = Height;
            
            item.Weight = Weight;
            
            item.SDesc = SDesc;
            
            item.CreateBy = CreateBy;
            
            item.CreateDate = CreateDate;
            
            item.ModifyBy = ModifyBy;
            
            item.ModifyDate = ModifyDate;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int PhysicalId,int? PatientDeptId,int? TreatId,string PatientCode,int? PatientId,string BodyTemp,string BloodPressure,int? Artery,int? BreatheRate,string Height,string Weight,string SDesc,string CreateBy,DateTime? CreateDate,string ModifyBy,DateTime? ModifyDate)
	    {
		    TPhysicalExam item = new TPhysicalExam();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.PhysicalId = PhysicalId;
				
			item.PatientDeptId = PatientDeptId;
				
			item.TreatId = TreatId;
				
			item.PatientCode = PatientCode;
				
			item.PatientId = PatientId;
				
			item.BodyTemp = BodyTemp;
				
			item.BloodPressure = BloodPressure;
				
			item.Artery = Artery;
				
			item.BreatheRate = BreatheRate;
				
			item.Height = Height;
				
			item.Weight = Weight;
				
			item.SDesc = SDesc;
				
			item.CreateBy = CreateBy;
				
			item.CreateDate = CreateDate;
				
			item.ModifyBy = ModifyBy;
				
			item.ModifyDate = ModifyDate;
				
	        item.Save(UserName);
	    }
    }
}
