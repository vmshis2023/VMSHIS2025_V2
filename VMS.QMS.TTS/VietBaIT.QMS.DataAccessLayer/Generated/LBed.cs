using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LBed class.
	/// </summary>
    [Serializable]
	public partial class LBedCollection : ActiveList<LBed, LBedCollection>
	{	   
		public LBedCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LBedCollection</returns>
		public LBedCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LBed o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_Beds table.
	/// </summary>
	[Serializable]
	public partial class LBed : ActiveRecord<LBed>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LBed()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LBed(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LBed(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LBed(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_Beds", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarBedId = new TableSchema.TableColumn(schema);
				colvarBedId.ColumnName = "Bed_ID";
				colvarBedId.DataType = DbType.Int16;
				colvarBedId.MaxLength = 0;
				colvarBedId.AutoIncrement = true;
				colvarBedId.IsNullable = false;
				colvarBedId.IsPrimaryKey = true;
				colvarBedId.IsForeignKey = false;
				colvarBedId.IsReadOnly = false;
				colvarBedId.DefaultSetting = @"";
				colvarBedId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedId);
				
				TableSchema.TableColumn colvarBedCode = new TableSchema.TableColumn(schema);
				colvarBedCode.ColumnName = "Bed_code";
				colvarBedCode.DataType = DbType.AnsiString;
				colvarBedCode.MaxLength = 20;
				colvarBedCode.AutoIncrement = false;
				colvarBedCode.IsNullable = false;
				colvarBedCode.IsPrimaryKey = false;
				colvarBedCode.IsForeignKey = false;
				colvarBedCode.IsReadOnly = false;
				colvarBedCode.DefaultSetting = @"";
				colvarBedCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedCode);
				
				TableSchema.TableColumn colvarBedName = new TableSchema.TableColumn(schema);
				colvarBedName.ColumnName = "Bed_Name";
				colvarBedName.DataType = DbType.String;
				colvarBedName.MaxLength = 50;
				colvarBedName.AutoIncrement = false;
				colvarBedName.IsNullable = false;
				colvarBedName.IsPrimaryKey = false;
				colvarBedName.IsForeignKey = false;
				colvarBedName.IsReadOnly = false;
				
						colvarBedName.DefaultSetting = @"('')";
				colvarBedName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedName);
				
				TableSchema.TableColumn colvarTenBhyt = new TableSchema.TableColumn(schema);
				colvarTenBhyt.ColumnName = "Ten_Bhyt";
				colvarTenBhyt.DataType = DbType.String;
				colvarTenBhyt.MaxLength = 50;
				colvarTenBhyt.AutoIncrement = false;
				colvarTenBhyt.IsNullable = true;
				colvarTenBhyt.IsPrimaryKey = false;
				colvarTenBhyt.IsForeignKey = false;
				colvarTenBhyt.IsReadOnly = false;
				colvarTenBhyt.DefaultSetting = @"";
				colvarTenBhyt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenBhyt);
				
				TableSchema.TableColumn colvarDepartmentId = new TableSchema.TableColumn(schema);
				colvarDepartmentId.ColumnName = "Department_ID";
				colvarDepartmentId.DataType = DbType.Int16;
				colvarDepartmentId.MaxLength = 0;
				colvarDepartmentId.AutoIncrement = false;
				colvarDepartmentId.IsNullable = false;
				colvarDepartmentId.IsPrimaryKey = false;
				colvarDepartmentId.IsForeignKey = false;
				colvarDepartmentId.IsReadOnly = false;
				colvarDepartmentId.DefaultSetting = @"";
				colvarDepartmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentId);
				
				TableSchema.TableColumn colvarRoomId = new TableSchema.TableColumn(schema);
				colvarRoomId.ColumnName = "Room_ID";
				colvarRoomId.DataType = DbType.Int16;
				colvarRoomId.MaxLength = 0;
				colvarRoomId.AutoIncrement = false;
				colvarRoomId.IsNullable = false;
				colvarRoomId.IsPrimaryKey = false;
				colvarRoomId.IsForeignKey = false;
				colvarRoomId.IsReadOnly = false;
				colvarRoomId.DefaultSetting = @"";
				colvarRoomId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoomId);
				
				TableSchema.TableColumn colvarBedFee = new TableSchema.TableColumn(schema);
				colvarBedFee.ColumnName = "Bed_Fee";
				colvarBedFee.DataType = DbType.Decimal;
				colvarBedFee.MaxLength = 0;
				colvarBedFee.AutoIncrement = false;
				colvarBedFee.IsNullable = false;
				colvarBedFee.IsPrimaryKey = false;
				colvarBedFee.IsForeignKey = false;
				colvarBedFee.IsReadOnly = false;
				
						colvarBedFee.DefaultSetting = @"((0))";
				colvarBedFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedFee);
				
				TableSchema.TableColumn colvarMaxPeople = new TableSchema.TableColumn(schema);
				colvarMaxPeople.ColumnName = "MaxPeople";
				colvarMaxPeople.DataType = DbType.Int16;
				colvarMaxPeople.MaxLength = 0;
				colvarMaxPeople.AutoIncrement = false;
				colvarMaxPeople.IsNullable = false;
				colvarMaxPeople.IsPrimaryKey = false;
				colvarMaxPeople.IsForeignKey = false;
				colvarMaxPeople.IsReadOnly = false;
				
						colvarMaxPeople.DefaultSetting = @"((1))";
				colvarMaxPeople.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaxPeople);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 255;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				TableSchema.TableColumn colvarUnitId = new TableSchema.TableColumn(schema);
				colvarUnitId.ColumnName = "Unit_ID";
				colvarUnitId.DataType = DbType.Int16;
				colvarUnitId.MaxLength = 0;
				colvarUnitId.AutoIncrement = false;
				colvarUnitId.IsNullable = true;
				colvarUnitId.IsPrimaryKey = false;
				colvarUnitId.IsForeignKey = false;
				colvarUnitId.IsReadOnly = false;
				colvarUnitId.DefaultSetting = @"";
				colvarUnitId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitId);
				
				TableSchema.TableColumn colvarHienThi = new TableSchema.TableColumn(schema);
				colvarHienThi.ColumnName = "HIEN_THI";
				colvarHienThi.DataType = DbType.Byte;
				colvarHienThi.MaxLength = 0;
				colvarHienThi.AutoIncrement = false;
				colvarHienThi.IsNullable = true;
				colvarHienThi.IsPrimaryKey = false;
				colvarHienThi.IsForeignKey = false;
				colvarHienThi.IsReadOnly = false;
				colvarHienThi.DefaultSetting = @"";
				colvarHienThi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHienThi);
				
				TableSchema.TableColumn colvarIsTuNguyen = new TableSchema.TableColumn(schema);
				colvarIsTuNguyen.ColumnName = "IsTuNguyen";
				colvarIsTuNguyen.DataType = DbType.Byte;
				colvarIsTuNguyen.MaxLength = 0;
				colvarIsTuNguyen.AutoIncrement = false;
				colvarIsTuNguyen.IsNullable = true;
				colvarIsTuNguyen.IsPrimaryKey = false;
				colvarIsTuNguyen.IsForeignKey = false;
				colvarIsTuNguyen.IsReadOnly = false;
				colvarIsTuNguyen.DefaultSetting = @"";
				colvarIsTuNguyen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsTuNguyen);
				
				TableSchema.TableColumn colvarStt = new TableSchema.TableColumn(schema);
				colvarStt.ColumnName = "STT";
				colvarStt.DataType = DbType.Int16;
				colvarStt.MaxLength = 0;
				colvarStt.AutoIncrement = false;
				colvarStt.IsNullable = true;
				colvarStt.IsPrimaryKey = false;
				colvarStt.IsForeignKey = false;
				colvarStt.IsReadOnly = false;
				colvarStt.DefaultSetting = @"";
				colvarStt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStt);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_Beds",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("BedId")]
		[Bindable(true)]
		public short BedId 
		{
			get { return GetColumnValue<short>(Columns.BedId); }
			set { SetColumnValue(Columns.BedId, value); }
		}
		  
		[XmlAttribute("BedCode")]
		[Bindable(true)]
		public string BedCode 
		{
			get { return GetColumnValue<string>(Columns.BedCode); }
			set { SetColumnValue(Columns.BedCode, value); }
		}
		  
		[XmlAttribute("BedName")]
		[Bindable(true)]
		public string BedName 
		{
			get { return GetColumnValue<string>(Columns.BedName); }
			set { SetColumnValue(Columns.BedName, value); }
		}
		  
		[XmlAttribute("TenBhyt")]
		[Bindable(true)]
		public string TenBhyt 
		{
			get { return GetColumnValue<string>(Columns.TenBhyt); }
			set { SetColumnValue(Columns.TenBhyt, value); }
		}
		  
		[XmlAttribute("DepartmentId")]
		[Bindable(true)]
		public short DepartmentId 
		{
			get { return GetColumnValue<short>(Columns.DepartmentId); }
			set { SetColumnValue(Columns.DepartmentId, value); }
		}
		  
		[XmlAttribute("RoomId")]
		[Bindable(true)]
		public short RoomId 
		{
			get { return GetColumnValue<short>(Columns.RoomId); }
			set { SetColumnValue(Columns.RoomId, value); }
		}
		  
		[XmlAttribute("BedFee")]
		[Bindable(true)]
		public decimal BedFee 
		{
			get { return GetColumnValue<decimal>(Columns.BedFee); }
			set { SetColumnValue(Columns.BedFee, value); }
		}
		  
		[XmlAttribute("MaxPeople")]
		[Bindable(true)]
		public short MaxPeople 
		{
			get { return GetColumnValue<short>(Columns.MaxPeople); }
			set { SetColumnValue(Columns.MaxPeople, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		  
		[XmlAttribute("UnitId")]
		[Bindable(true)]
		public short? UnitId 
		{
			get { return GetColumnValue<short?>(Columns.UnitId); }
			set { SetColumnValue(Columns.UnitId, value); }
		}
		  
		[XmlAttribute("HienThi")]
		[Bindable(true)]
		public byte? HienThi 
		{
			get { return GetColumnValue<byte?>(Columns.HienThi); }
			set { SetColumnValue(Columns.HienThi, value); }
		}
		  
		[XmlAttribute("IsTuNguyen")]
		[Bindable(true)]
		public byte? IsTuNguyen 
		{
			get { return GetColumnValue<byte?>(Columns.IsTuNguyen); }
			set { SetColumnValue(Columns.IsTuNguyen, value); }
		}
		  
		[XmlAttribute("Stt")]
		[Bindable(true)]
		public short? Stt 
		{
			get { return GetColumnValue<short?>(Columns.Stt); }
			set { SetColumnValue(Columns.Stt, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varBedCode,string varBedName,string varTenBhyt,short varDepartmentId,short varRoomId,decimal varBedFee,short varMaxPeople,string varSDesc,short? varUnitId,byte? varHienThi,byte? varIsTuNguyen,short? varStt)
		{
			LBed item = new LBed();
			
			item.BedCode = varBedCode;
			
			item.BedName = varBedName;
			
			item.TenBhyt = varTenBhyt;
			
			item.DepartmentId = varDepartmentId;
			
			item.RoomId = varRoomId;
			
			item.BedFee = varBedFee;
			
			item.MaxPeople = varMaxPeople;
			
			item.SDesc = varSDesc;
			
			item.UnitId = varUnitId;
			
			item.HienThi = varHienThi;
			
			item.IsTuNguyen = varIsTuNguyen;
			
			item.Stt = varStt;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(short varBedId,string varBedCode,string varBedName,string varTenBhyt,short varDepartmentId,short varRoomId,decimal varBedFee,short varMaxPeople,string varSDesc,short? varUnitId,byte? varHienThi,byte? varIsTuNguyen,short? varStt)
		{
			LBed item = new LBed();
			
				item.BedId = varBedId;
			
				item.BedCode = varBedCode;
			
				item.BedName = varBedName;
			
				item.TenBhyt = varTenBhyt;
			
				item.DepartmentId = varDepartmentId;
			
				item.RoomId = varRoomId;
			
				item.BedFee = varBedFee;
			
				item.MaxPeople = varMaxPeople;
			
				item.SDesc = varSDesc;
			
				item.UnitId = varUnitId;
			
				item.HienThi = varHienThi;
			
				item.IsTuNguyen = varIsTuNguyen;
			
				item.Stt = varStt;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn BedIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn BedCodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn BedNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TenBhytColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn RoomIdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn BedFeeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn MaxPeopleColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitIdColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn HienThiColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn IsTuNguyenColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn SttColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string BedId = @"Bed_ID";
			 public static string BedCode = @"Bed_code";
			 public static string BedName = @"Bed_Name";
			 public static string TenBhyt = @"Ten_Bhyt";
			 public static string DepartmentId = @"Department_ID";
			 public static string RoomId = @"Room_ID";
			 public static string BedFee = @"Bed_Fee";
			 public static string MaxPeople = @"MaxPeople";
			 public static string SDesc = @"sDesc";
			 public static string UnitId = @"Unit_ID";
			 public static string HienThi = @"HIEN_THI";
			 public static string IsTuNguyen = @"IsTuNguyen";
			 public static string Stt = @"STT";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
