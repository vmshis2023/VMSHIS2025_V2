using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer{
    /// <summary>
    /// Strongly-typed collection for the VPatientSearch class.
    /// </summary>
    [Serializable]
    public partial class VPatientSearchCollection : ReadOnlyList<VPatientSearch, VPatientSearchCollection>
    {        
        public VPatientSearchCollection() {}
    }
    /// <summary>
    /// This is  Read-only wrapper class for the V_PatientSearch view.
    /// </summary>
    [Serializable]
    public partial class VPatientSearch : ReadOnlyRecord<VPatientSearch>, IReadOnlyRecord
    {
    
	    #region Default Settings
	    protected static void SetSQLProps() 
	    {
		    GetTableSchema();
	    }
	    #endregion
        #region Schema Accessor
	    public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }
    	
        private static void GetTableSchema() 
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("V_PatientSearch", TableType.View, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns
                
                TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
                colvarPatientId.ColumnName = "Patient_ID";
                colvarPatientId.DataType = DbType.Int64;
                colvarPatientId.MaxLength = 0;
                colvarPatientId.AutoIncrement = false;
                colvarPatientId.IsNullable = false;
                colvarPatientId.IsPrimaryKey = false;
                colvarPatientId.IsForeignKey = false;
                colvarPatientId.IsReadOnly = false;
                
                schema.Columns.Add(colvarPatientId);
                
                TableSchema.TableColumn colvarSex = new TableSchema.TableColumn(schema);
                colvarSex.ColumnName = "Sex";
                colvarSex.DataType = DbType.String;
                colvarSex.MaxLength = 10;
                colvarSex.AutoIncrement = false;
                colvarSex.IsNullable = true;
                colvarSex.IsPrimaryKey = false;
                colvarSex.IsForeignKey = false;
                colvarSex.IsReadOnly = false;
                
                schema.Columns.Add(colvarSex);
                
                TableSchema.TableColumn colvarInputDate = new TableSchema.TableColumn(schema);
                colvarInputDate.ColumnName = "Input_Date";
                colvarInputDate.DataType = DbType.DateTime;
                colvarInputDate.MaxLength = 0;
                colvarInputDate.AutoIncrement = false;
                colvarInputDate.IsNullable = false;
                colvarInputDate.IsPrimaryKey = false;
                colvarInputDate.IsForeignKey = false;
                colvarInputDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarInputDate);
                
                TableSchema.TableColumn colvarPatientPhone = new TableSchema.TableColumn(schema);
                colvarPatientPhone.ColumnName = "Patient_Phone";
                colvarPatientPhone.DataType = DbType.String;
                colvarPatientPhone.MaxLength = 50;
                colvarPatientPhone.AutoIncrement = false;
                colvarPatientPhone.IsNullable = true;
                colvarPatientPhone.IsPrimaryKey = false;
                colvarPatientPhone.IsForeignKey = false;
                colvarPatientPhone.IsReadOnly = false;
                
                schema.Columns.Add(colvarPatientPhone);
                
                TableSchema.TableColumn colvarPatientEmail = new TableSchema.TableColumn(schema);
                colvarPatientEmail.ColumnName = "Patient_Email";
                colvarPatientEmail.DataType = DbType.String;
                colvarPatientEmail.MaxLength = 50;
                colvarPatientEmail.AutoIncrement = false;
                colvarPatientEmail.IsNullable = true;
                colvarPatientEmail.IsPrimaryKey = false;
                colvarPatientEmail.IsForeignKey = false;
                colvarPatientEmail.IsReadOnly = false;
                
                schema.Columns.Add(colvarPatientEmail);
                
                TableSchema.TableColumn colvarIdentifyNum = new TableSchema.TableColumn(schema);
                colvarIdentifyNum.ColumnName = "Identify_Num";
                colvarIdentifyNum.DataType = DbType.AnsiString;
                colvarIdentifyNum.MaxLength = 50;
                colvarIdentifyNum.AutoIncrement = false;
                colvarIdentifyNum.IsNullable = true;
                colvarIdentifyNum.IsPrimaryKey = false;
                colvarIdentifyNum.IsForeignKey = false;
                colvarIdentifyNum.IsReadOnly = false;
                
                schema.Columns.Add(colvarIdentifyNum);
                
                TableSchema.TableColumn colvarPatientName = new TableSchema.TableColumn(schema);
                colvarPatientName.ColumnName = "Patient_Name";
                colvarPatientName.DataType = DbType.String;
                colvarPatientName.MaxLength = 100;
                colvarPatientName.AutoIncrement = false;
                colvarPatientName.IsNullable = true;
                colvarPatientName.IsPrimaryKey = false;
                colvarPatientName.IsForeignKey = false;
                colvarPatientName.IsReadOnly = false;
                
                schema.Columns.Add(colvarPatientName);
                
                TableSchema.TableColumn colvarPatientBirth = new TableSchema.TableColumn(schema);
                colvarPatientBirth.ColumnName = "Patient_Birth";
                colvarPatientBirth.DataType = DbType.DateTime;
                colvarPatientBirth.MaxLength = 0;
                colvarPatientBirth.AutoIncrement = false;
                colvarPatientBirth.IsNullable = true;
                colvarPatientBirth.IsPrimaryKey = false;
                colvarPatientBirth.IsForeignKey = false;
                colvarPatientBirth.IsReadOnly = false;
                
                schema.Columns.Add(colvarPatientBirth);
                
                TableSchema.TableColumn colvarYearOfBirth = new TableSchema.TableColumn(schema);
                colvarYearOfBirth.ColumnName = "Year_Of_Birth";
                colvarYearOfBirth.DataType = DbType.Int16;
                colvarYearOfBirth.MaxLength = 0;
                colvarYearOfBirth.AutoIncrement = false;
                colvarYearOfBirth.IsNullable = true;
                colvarYearOfBirth.IsPrimaryKey = false;
                colvarYearOfBirth.IsForeignKey = false;
                colvarYearOfBirth.IsReadOnly = false;
                
                schema.Columns.Add(colvarYearOfBirth);
                
                TableSchema.TableColumn colvarPatientSex = new TableSchema.TableColumn(schema);
                colvarPatientSex.ColumnName = "Patient_Sex";
                colvarPatientSex.DataType = DbType.Byte;
                colvarPatientSex.MaxLength = 0;
                colvarPatientSex.AutoIncrement = false;
                colvarPatientSex.IsNullable = false;
                colvarPatientSex.IsPrimaryKey = false;
                colvarPatientSex.IsForeignKey = false;
                colvarPatientSex.IsReadOnly = false;
                
                schema.Columns.Add(colvarPatientSex);
                
                TableSchema.TableColumn colvarSurveyName = new TableSchema.TableColumn(schema);
                colvarSurveyName.ColumnName = "SurveyName";
                colvarSurveyName.DataType = DbType.String;
                colvarSurveyName.MaxLength = 100;
                colvarSurveyName.AutoIncrement = false;
                colvarSurveyName.IsNullable = true;
                colvarSurveyName.IsPrimaryKey = false;
                colvarSurveyName.IsForeignKey = false;
                colvarSurveyName.IsReadOnly = false;
                
                schema.Columns.Add(colvarSurveyName);
                
                TableSchema.TableColumn colvarPatientAddr = new TableSchema.TableColumn(schema);
                colvarPatientAddr.ColumnName = "Patient_Addr";
                colvarPatientAddr.DataType = DbType.String;
                colvarPatientAddr.MaxLength = 200;
                colvarPatientAddr.AutoIncrement = false;
                colvarPatientAddr.IsNullable = true;
                colvarPatientAddr.IsPrimaryKey = false;
                colvarPatientAddr.IsForeignKey = false;
                colvarPatientAddr.IsReadOnly = false;
                
                schema.Columns.Add(colvarPatientAddr);
                
                TableSchema.TableColumn colvarPInputDate = new TableSchema.TableColumn(schema);
                colvarPInputDate.ColumnName = "PInputDate";
                colvarPInputDate.DataType = DbType.AnsiString;
                colvarPInputDate.MaxLength = 50;
                colvarPInputDate.AutoIncrement = false;
                colvarPInputDate.IsNullable = true;
                colvarPInputDate.IsPrimaryKey = false;
                colvarPInputDate.IsForeignKey = false;
                colvarPInputDate.IsReadOnly = false;
                
                schema.Columns.Add(colvarPInputDate);
                
                
                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("V_PatientSearch",schema);
            }
        }
        #endregion
        
        #region Query Accessor
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    #endregion
	    
	    #region .ctors
	    public VPatientSearch()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }
        public VPatientSearch(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public VPatientSearch(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public VPatientSearch(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion
	    
	    #region Props
	    
          
        [XmlAttribute("PatientId")]
        [Bindable(true)]
        public long PatientId 
	    {
		    get
		    {
			    return GetColumnValue<long>("Patient_ID");
		    }
            set 
		    {
			    SetColumnValue("Patient_ID", value);
            }
        }
	      
        [XmlAttribute("Sex")]
        [Bindable(true)]
        public string Sex 
	    {
		    get
		    {
			    return GetColumnValue<string>("Sex");
		    }
            set 
		    {
			    SetColumnValue("Sex", value);
            }
        }
	      
        [XmlAttribute("InputDate")]
        [Bindable(true)]
        public DateTime InputDate 
	    {
		    get
		    {
			    return GetColumnValue<DateTime>("Input_Date");
		    }
            set 
		    {
			    SetColumnValue("Input_Date", value);
            }
        }
	      
        [XmlAttribute("PatientPhone")]
        [Bindable(true)]
        public string PatientPhone 
	    {
		    get
		    {
			    return GetColumnValue<string>("Patient_Phone");
		    }
            set 
		    {
			    SetColumnValue("Patient_Phone", value);
            }
        }
	      
        [XmlAttribute("PatientEmail")]
        [Bindable(true)]
        public string PatientEmail 
	    {
		    get
		    {
			    return GetColumnValue<string>("Patient_Email");
		    }
            set 
		    {
			    SetColumnValue("Patient_Email", value);
            }
        }
	      
        [XmlAttribute("IdentifyNum")]
        [Bindable(true)]
        public string IdentifyNum 
	    {
		    get
		    {
			    return GetColumnValue<string>("Identify_Num");
		    }
            set 
		    {
			    SetColumnValue("Identify_Num", value);
            }
        }
	      
        [XmlAttribute("PatientName")]
        [Bindable(true)]
        public string PatientName 
	    {
		    get
		    {
			    return GetColumnValue<string>("Patient_Name");
		    }
            set 
		    {
			    SetColumnValue("Patient_Name", value);
            }
        }
	      
        [XmlAttribute("PatientBirth")]
        [Bindable(true)]
        public DateTime? PatientBirth 
	    {
		    get
		    {
			    return GetColumnValue<DateTime?>("Patient_Birth");
		    }
            set 
		    {
			    SetColumnValue("Patient_Birth", value);
            }
        }
	      
        [XmlAttribute("YearOfBirth")]
        [Bindable(true)]
        public short? YearOfBirth 
	    {
		    get
		    {
			    return GetColumnValue<short?>("Year_Of_Birth");
		    }
            set 
		    {
			    SetColumnValue("Year_Of_Birth", value);
            }
        }
	      
        [XmlAttribute("PatientSex")]
        [Bindable(true)]
        public byte PatientSex 
	    {
		    get
		    {
			    return GetColumnValue<byte>("Patient_Sex");
		    }
            set 
		    {
			    SetColumnValue("Patient_Sex", value);
            }
        }
	      
        [XmlAttribute("SurveyName")]
        [Bindable(true)]
        public string SurveyName 
	    {
		    get
		    {
			    return GetColumnValue<string>("SurveyName");
		    }
            set 
		    {
			    SetColumnValue("SurveyName", value);
            }
        }
	      
        [XmlAttribute("PatientAddr")]
        [Bindable(true)]
        public string PatientAddr 
	    {
		    get
		    {
			    return GetColumnValue<string>("Patient_Addr");
		    }
            set 
		    {
			    SetColumnValue("Patient_Addr", value);
            }
        }
	      
        [XmlAttribute("PInputDate")]
        [Bindable(true)]
        public string PInputDate 
	    {
		    get
		    {
			    return GetColumnValue<string>("PInputDate");
		    }
            set 
		    {
			    SetColumnValue("PInputDate", value);
            }
        }
	    
	    #endregion
    
	    #region Columns Struct
	    public struct Columns
	    {
		    
		    
            public static string PatientId = @"Patient_ID";
            
            public static string Sex = @"Sex";
            
            public static string InputDate = @"Input_Date";
            
            public static string PatientPhone = @"Patient_Phone";
            
            public static string PatientEmail = @"Patient_Email";
            
            public static string IdentifyNum = @"Identify_Num";
            
            public static string PatientName = @"Patient_Name";
            
            public static string PatientBirth = @"Patient_Birth";
            
            public static string YearOfBirth = @"Year_Of_Birth";
            
            public static string PatientSex = @"Patient_Sex";
            
            public static string SurveyName = @"SurveyName";
            
            public static string PatientAddr = @"Patient_Addr";
            
            public static string PInputDate = @"PInputDate";
            
	    }
	    #endregion
	    
	    
	    #region IAbstractRecord Members
        public new CT GetColumnValue<CT>(string columnName) {
            return base.GetColumnValue<CT>(columnName);
        }
        public object GetColumnValue(string columnName) {
            return base.GetColumnValue<object>(columnName);
        }
        #endregion
	    
    }
}
