using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LDrugStockTemp class.
	/// </summary>
    [Serializable]
	public partial class LDrugStockTempCollection : ActiveList<LDrugStockTemp, LDrugStockTempCollection>
	{	   
		public LDrugStockTempCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LDrugStockTempCollection</returns>
		public LDrugStockTempCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LDrugStockTemp o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_Drug_Stock_temp table.
	/// </summary>
	[Serializable]
	public partial class LDrugStockTemp : ActiveRecord<LDrugStockTemp>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LDrugStockTemp()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LDrugStockTemp(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LDrugStockTemp(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LDrugStockTemp(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_Drug_Stock_temp", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarStockId = new TableSchema.TableColumn(schema);
				colvarStockId.ColumnName = "Stock_ID";
				colvarStockId.DataType = DbType.Int16;
				colvarStockId.MaxLength = 0;
				colvarStockId.AutoIncrement = false;
				colvarStockId.IsNullable = false;
				colvarStockId.IsPrimaryKey = true;
				colvarStockId.IsForeignKey = false;
				colvarStockId.IsReadOnly = false;
				colvarStockId.DefaultSetting = @"";
				colvarStockId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStockId);
				
				TableSchema.TableColumn colvarDrugId = new TableSchema.TableColumn(schema);
				colvarDrugId.ColumnName = "Drug_ID";
				colvarDrugId.DataType = DbType.Int32;
				colvarDrugId.MaxLength = 0;
				colvarDrugId.AutoIncrement = false;
				colvarDrugId.IsNullable = false;
				colvarDrugId.IsPrimaryKey = true;
				colvarDrugId.IsForeignKey = false;
				colvarDrugId.IsReadOnly = false;
				colvarDrugId.DefaultSetting = @"";
				colvarDrugId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDrugId);
				
				TableSchema.TableColumn colvarExpireDate = new TableSchema.TableColumn(schema);
				colvarExpireDate.ColumnName = "Expire_Date";
				colvarExpireDate.DataType = DbType.DateTime;
				colvarExpireDate.MaxLength = 0;
				colvarExpireDate.AutoIncrement = false;
				colvarExpireDate.IsNullable = false;
				colvarExpireDate.IsPrimaryKey = true;
				colvarExpireDate.IsForeignKey = false;
				colvarExpireDate.IsReadOnly = false;
				colvarExpireDate.DefaultSetting = @"";
				colvarExpireDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpireDate);
				
				TableSchema.TableColumn colvarManuDate = new TableSchema.TableColumn(schema);
				colvarManuDate.ColumnName = "Manu_Date";
				colvarManuDate.DataType = DbType.DateTime;
				colvarManuDate.MaxLength = 0;
				colvarManuDate.AutoIncrement = false;
				colvarManuDate.IsNullable = false;
				colvarManuDate.IsPrimaryKey = false;
				colvarManuDate.IsForeignKey = false;
				colvarManuDate.IsReadOnly = false;
				colvarManuDate.DefaultSetting = @"";
				colvarManuDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManuDate);
				
				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = false;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);
				
				TableSchema.TableColumn colvarOriginalPrice = new TableSchema.TableColumn(schema);
				colvarOriginalPrice.ColumnName = "Original_Price";
				colvarOriginalPrice.DataType = DbType.Currency;
				colvarOriginalPrice.MaxLength = 0;
				colvarOriginalPrice.AutoIncrement = false;
				colvarOriginalPrice.IsNullable = false;
				colvarOriginalPrice.IsPrimaryKey = true;
				colvarOriginalPrice.IsForeignKey = false;
				colvarOriginalPrice.IsReadOnly = false;
				colvarOriginalPrice.DefaultSetting = @"";
				colvarOriginalPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOriginalPrice);
				
				TableSchema.TableColumn colvarInputDate = new TableSchema.TableColumn(schema);
				colvarInputDate.ColumnName = "Input_Date";
				colvarInputDate.DataType = DbType.DateTime;
				colvarInputDate.MaxLength = 0;
				colvarInputDate.AutoIncrement = false;
				colvarInputDate.IsNullable = true;
				colvarInputDate.IsPrimaryKey = false;
				colvarInputDate.IsForeignKey = false;
				colvarInputDate.IsReadOnly = false;
				
						colvarInputDate.DefaultSetting = @"(getdate())";
				colvarInputDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInputDate);
				
				TableSchema.TableColumn colvarStockCategory = new TableSchema.TableColumn(schema);
				colvarStockCategory.ColumnName = "Stock_category";
				colvarStockCategory.DataType = DbType.Byte;
				colvarStockCategory.MaxLength = 0;
				colvarStockCategory.AutoIncrement = false;
				colvarStockCategory.IsNullable = true;
				colvarStockCategory.IsPrimaryKey = false;
				colvarStockCategory.IsForeignKey = false;
				colvarStockCategory.IsReadOnly = false;
				colvarStockCategory.DefaultSetting = @"";
				colvarStockCategory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStockCategory);
				
				TableSchema.TableColumn colvarLot = new TableSchema.TableColumn(schema);
				colvarLot.ColumnName = "Lot";
				colvarLot.DataType = DbType.String;
				colvarLot.MaxLength = 100;
				colvarLot.AutoIncrement = false;
				colvarLot.IsNullable = true;
				colvarLot.IsPrimaryKey = false;
				colvarLot.IsForeignKey = false;
				colvarLot.IsReadOnly = false;
				colvarLot.DefaultSetting = @"";
				colvarLot.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLot);
				
				TableSchema.TableColumn colvarSupplyUnitId = new TableSchema.TableColumn(schema);
				colvarSupplyUnitId.ColumnName = "SupplyUnit_ID";
				colvarSupplyUnitId.DataType = DbType.Int16;
				colvarSupplyUnitId.MaxLength = 0;
				colvarSupplyUnitId.AutoIncrement = false;
				colvarSupplyUnitId.IsNullable = true;
				colvarSupplyUnitId.IsPrimaryKey = false;
				colvarSupplyUnitId.IsForeignKey = false;
				colvarSupplyUnitId.IsReadOnly = false;
				colvarSupplyUnitId.DefaultSetting = @"";
				colvarSupplyUnitId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSupplyUnitId);
				
				TableSchema.TableColumn colvarGiaBan = new TableSchema.TableColumn(schema);
				colvarGiaBan.ColumnName = "GIA_BAN";
				colvarGiaBan.DataType = DbType.Currency;
				colvarGiaBan.MaxLength = 0;
				colvarGiaBan.AutoIncrement = false;
				colvarGiaBan.IsNullable = true;
				colvarGiaBan.IsPrimaryKey = false;
				colvarGiaBan.IsForeignKey = false;
				colvarGiaBan.IsReadOnly = false;
				
						colvarGiaBan.DefaultSetting = @"((0))";
				colvarGiaBan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGiaBan);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_Drug_Stock_temp",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("StockId")]
		[Bindable(true)]
		public short StockId 
		{
			get { return GetColumnValue<short>(Columns.StockId); }
			set { SetColumnValue(Columns.StockId, value); }
		}
		  
		[XmlAttribute("DrugId")]
		[Bindable(true)]
		public int DrugId 
		{
			get { return GetColumnValue<int>(Columns.DrugId); }
			set { SetColumnValue(Columns.DrugId, value); }
		}
		  
		[XmlAttribute("ExpireDate")]
		[Bindable(true)]
		public DateTime ExpireDate 
		{
			get { return GetColumnValue<DateTime>(Columns.ExpireDate); }
			set { SetColumnValue(Columns.ExpireDate, value); }
		}
		  
		[XmlAttribute("ManuDate")]
		[Bindable(true)]
		public DateTime ManuDate 
		{
			get { return GetColumnValue<DateTime>(Columns.ManuDate); }
			set { SetColumnValue(Columns.ManuDate, value); }
		}
		  
		[XmlAttribute("Quantity")]
		[Bindable(true)]
		public int Quantity 
		{
			get { return GetColumnValue<int>(Columns.Quantity); }
			set { SetColumnValue(Columns.Quantity, value); }
		}
		  
		[XmlAttribute("OriginalPrice")]
		[Bindable(true)]
		public decimal OriginalPrice 
		{
			get { return GetColumnValue<decimal>(Columns.OriginalPrice); }
			set { SetColumnValue(Columns.OriginalPrice, value); }
		}
		  
		[XmlAttribute("InputDate")]
		[Bindable(true)]
		public DateTime? InputDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.InputDate); }
			set { SetColumnValue(Columns.InputDate, value); }
		}
		  
		[XmlAttribute("StockCategory")]
		[Bindable(true)]
		public byte? StockCategory 
		{
			get { return GetColumnValue<byte?>(Columns.StockCategory); }
			set { SetColumnValue(Columns.StockCategory, value); }
		}
		  
		[XmlAttribute("Lot")]
		[Bindable(true)]
		public string Lot 
		{
			get { return GetColumnValue<string>(Columns.Lot); }
			set { SetColumnValue(Columns.Lot, value); }
		}
		  
		[XmlAttribute("SupplyUnitId")]
		[Bindable(true)]
		public short? SupplyUnitId 
		{
			get { return GetColumnValue<short?>(Columns.SupplyUnitId); }
			set { SetColumnValue(Columns.SupplyUnitId, value); }
		}
		  
		[XmlAttribute("GiaBan")]
		[Bindable(true)]
		public decimal? GiaBan 
		{
			get { return GetColumnValue<decimal?>(Columns.GiaBan); }
			set { SetColumnValue(Columns.GiaBan, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(short varStockId,int varDrugId,DateTime varExpireDate,DateTime varManuDate,int varQuantity,decimal varOriginalPrice,DateTime? varInputDate,byte? varStockCategory,string varLot,short? varSupplyUnitId,decimal? varGiaBan)
		{
			LDrugStockTemp item = new LDrugStockTemp();
			
			item.StockId = varStockId;
			
			item.DrugId = varDrugId;
			
			item.ExpireDate = varExpireDate;
			
			item.ManuDate = varManuDate;
			
			item.Quantity = varQuantity;
			
			item.OriginalPrice = varOriginalPrice;
			
			item.InputDate = varInputDate;
			
			item.StockCategory = varStockCategory;
			
			item.Lot = varLot;
			
			item.SupplyUnitId = varSupplyUnitId;
			
			item.GiaBan = varGiaBan;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(short varStockId,int varDrugId,DateTime varExpireDate,DateTime varManuDate,int varQuantity,decimal varOriginalPrice,DateTime? varInputDate,byte? varStockCategory,string varLot,short? varSupplyUnitId,decimal? varGiaBan)
		{
			LDrugStockTemp item = new LDrugStockTemp();
			
				item.StockId = varStockId;
			
				item.DrugId = varDrugId;
			
				item.ExpireDate = varExpireDate;
			
				item.ManuDate = varManuDate;
			
				item.Quantity = varQuantity;
			
				item.OriginalPrice = varOriginalPrice;
			
				item.InputDate = varInputDate;
			
				item.StockCategory = varStockCategory;
			
				item.Lot = varLot;
			
				item.SupplyUnitId = varSupplyUnitId;
			
				item.GiaBan = varGiaBan;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn StockIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DrugIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ExpireDateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ManuDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn QuantityColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn OriginalPriceColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn InputDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn StockCategoryColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn LotColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SupplyUnitIdColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn GiaBanColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string StockId = @"Stock_ID";
			 public static string DrugId = @"Drug_ID";
			 public static string ExpireDate = @"Expire_Date";
			 public static string ManuDate = @"Manu_Date";
			 public static string Quantity = @"Quantity";
			 public static string OriginalPrice = @"Original_Price";
			 public static string InputDate = @"Input_Date";
			 public static string StockCategory = @"Stock_category";
			 public static string Lot = @"Lot";
			 public static string SupplyUnitId = @"SupplyUnit_ID";
			 public static string GiaBan = @"GIA_BAN";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
