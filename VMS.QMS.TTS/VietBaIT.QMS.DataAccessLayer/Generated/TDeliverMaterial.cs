using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TDeliverMaterial class.
	/// </summary>
    [Serializable]
	public partial class TDeliverMaterialCollection : ActiveList<TDeliverMaterial, TDeliverMaterialCollection>
	{	   
		public TDeliverMaterialCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TDeliverMaterialCollection</returns>
		public TDeliverMaterialCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TDeliverMaterial o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_DeliverMaterial table.
	/// </summary>
	[Serializable]
	public partial class TDeliverMaterial : ActiveRecord<TDeliverMaterial>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TDeliverMaterial()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TDeliverMaterial(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TDeliverMaterial(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TDeliverMaterial(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_DeliverMaterial", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMaterialDeliverId = new TableSchema.TableColumn(schema);
				colvarMaterialDeliverId.ColumnName = "MaterialDeliver_ID";
				colvarMaterialDeliverId.DataType = DbType.Int32;
				colvarMaterialDeliverId.MaxLength = 0;
				colvarMaterialDeliverId.AutoIncrement = true;
				colvarMaterialDeliverId.IsNullable = false;
				colvarMaterialDeliverId.IsPrimaryKey = true;
				colvarMaterialDeliverId.IsForeignKey = false;
				colvarMaterialDeliverId.IsReadOnly = false;
				colvarMaterialDeliverId.DefaultSetting = @"";
				colvarMaterialDeliverId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaterialDeliverId);
				
				TableSchema.TableColumn colvarInputUserId = new TableSchema.TableColumn(schema);
				colvarInputUserId.ColumnName = "InputUser_ID";
				colvarInputUserId.DataType = DbType.Int32;
				colvarInputUserId.MaxLength = 0;
				colvarInputUserId.AutoIncrement = false;
				colvarInputUserId.IsNullable = true;
				colvarInputUserId.IsPrimaryKey = false;
				colvarInputUserId.IsForeignKey = false;
				colvarInputUserId.IsReadOnly = false;
				colvarInputUserId.DefaultSetting = @"";
				colvarInputUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInputUserId);
				
				TableSchema.TableColumn colvarDeliverUserId = new TableSchema.TableColumn(schema);
				colvarDeliverUserId.ColumnName = "DeliverUser_ID";
				colvarDeliverUserId.DataType = DbType.Int32;
				colvarDeliverUserId.MaxLength = 0;
				colvarDeliverUserId.AutoIncrement = false;
				colvarDeliverUserId.IsNullable = true;
				colvarDeliverUserId.IsPrimaryKey = false;
				colvarDeliverUserId.IsForeignKey = false;
				colvarDeliverUserId.IsReadOnly = false;
				colvarDeliverUserId.DefaultSetting = @"";
				colvarDeliverUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliverUserId);
				
				TableSchema.TableColumn colvarMaterialInfoId = new TableSchema.TableColumn(schema);
				colvarMaterialInfoId.ColumnName = "MaterialInfo_ID";
				colvarMaterialInfoId.DataType = DbType.Int32;
				colvarMaterialInfoId.MaxLength = 0;
				colvarMaterialInfoId.AutoIncrement = false;
				colvarMaterialInfoId.IsNullable = true;
				colvarMaterialInfoId.IsPrimaryKey = false;
				colvarMaterialInfoId.IsForeignKey = false;
				colvarMaterialInfoId.IsReadOnly = false;
				colvarMaterialInfoId.DefaultSetting = @"";
				colvarMaterialInfoId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaterialInfoId);
				
				TableSchema.TableColumn colvarCreateBy = new TableSchema.TableColumn(schema);
				colvarCreateBy.ColumnName = "Create_By";
				colvarCreateBy.DataType = DbType.String;
				colvarCreateBy.MaxLength = 50;
				colvarCreateBy.AutoIncrement = false;
				colvarCreateBy.IsNullable = true;
				colvarCreateBy.IsPrimaryKey = false;
				colvarCreateBy.IsForeignKey = false;
				colvarCreateBy.IsReadOnly = false;
				colvarCreateBy.DefaultSetting = @"";
				colvarCreateBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateBy);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "Create_Date";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = true;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				colvarCreateDate.DefaultSetting = @"";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				TableSchema.TableColumn colvarConfirmStatus = new TableSchema.TableColumn(schema);
				colvarConfirmStatus.ColumnName = "Confirm_Status";
				colvarConfirmStatus.DataType = DbType.Int32;
				colvarConfirmStatus.MaxLength = 0;
				colvarConfirmStatus.AutoIncrement = false;
				colvarConfirmStatus.IsNullable = true;
				colvarConfirmStatus.IsPrimaryKey = false;
				colvarConfirmStatus.IsForeignKey = false;
				colvarConfirmStatus.IsReadOnly = false;
				
						colvarConfirmStatus.DefaultSetting = @"((0))";
				colvarConfirmStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConfirmStatus);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_DeliverMaterial",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MaterialDeliverId")]
		[Bindable(true)]
		public int MaterialDeliverId 
		{
			get { return GetColumnValue<int>(Columns.MaterialDeliverId); }
			set { SetColumnValue(Columns.MaterialDeliverId, value); }
		}
		  
		[XmlAttribute("InputUserId")]
		[Bindable(true)]
		public int? InputUserId 
		{
			get { return GetColumnValue<int?>(Columns.InputUserId); }
			set { SetColumnValue(Columns.InputUserId, value); }
		}
		  
		[XmlAttribute("DeliverUserId")]
		[Bindable(true)]
		public int? DeliverUserId 
		{
			get { return GetColumnValue<int?>(Columns.DeliverUserId); }
			set { SetColumnValue(Columns.DeliverUserId, value); }
		}
		  
		[XmlAttribute("MaterialInfoId")]
		[Bindable(true)]
		public int? MaterialInfoId 
		{
			get { return GetColumnValue<int?>(Columns.MaterialInfoId); }
			set { SetColumnValue(Columns.MaterialInfoId, value); }
		}
		  
		[XmlAttribute("CreateBy")]
		[Bindable(true)]
		public string CreateBy 
		{
			get { return GetColumnValue<string>(Columns.CreateBy); }
			set { SetColumnValue(Columns.CreateBy, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime? CreateDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		  
		[XmlAttribute("ConfirmStatus")]
		[Bindable(true)]
		public int? ConfirmStatus 
		{
			get { return GetColumnValue<int?>(Columns.ConfirmStatus); }
			set { SetColumnValue(Columns.ConfirmStatus, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varInputUserId,int? varDeliverUserId,int? varMaterialInfoId,string varCreateBy,DateTime? varCreateDate,int? varConfirmStatus)
		{
			TDeliverMaterial item = new TDeliverMaterial();
			
			item.InputUserId = varInputUserId;
			
			item.DeliverUserId = varDeliverUserId;
			
			item.MaterialInfoId = varMaterialInfoId;
			
			item.CreateBy = varCreateBy;
			
			item.CreateDate = varCreateDate;
			
			item.ConfirmStatus = varConfirmStatus;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMaterialDeliverId,int? varInputUserId,int? varDeliverUserId,int? varMaterialInfoId,string varCreateBy,DateTime? varCreateDate,int? varConfirmStatus)
		{
			TDeliverMaterial item = new TDeliverMaterial();
			
				item.MaterialDeliverId = varMaterialDeliverId;
			
				item.InputUserId = varInputUserId;
			
				item.DeliverUserId = varDeliverUserId;
			
				item.MaterialInfoId = varMaterialInfoId;
			
				item.CreateBy = varCreateBy;
			
				item.CreateDate = varCreateDate;
			
				item.ConfirmStatus = varConfirmStatus;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MaterialDeliverIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn InputUserIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliverUserIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn MaterialInfoIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateByColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ConfirmStatusColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MaterialDeliverId = @"MaterialDeliver_ID";
			 public static string InputUserId = @"InputUser_ID";
			 public static string DeliverUserId = @"DeliverUser_ID";
			 public static string MaterialInfoId = @"MaterialInfo_ID";
			 public static string CreateBy = @"Create_By";
			 public static string CreateDate = @"Create_Date";
			 public static string ConfirmStatus = @"Confirm_Status";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
