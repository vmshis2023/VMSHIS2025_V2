using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the SysTieudeBaocao class.
	/// </summary>
    [Serializable]
	public partial class SysTieudeBaocaoCollection : ActiveList<SysTieudeBaocao, SysTieudeBaocaoCollection>
	{	   
		public SysTieudeBaocaoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysTieudeBaocaoCollection</returns>
		public SysTieudeBaocaoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysTieudeBaocao o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Sys_TIEUDE_BAOCAO table.
	/// </summary>
	[Serializable]
	public partial class SysTieudeBaocao : ActiveRecord<SysTieudeBaocao>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SysTieudeBaocao()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysTieudeBaocao(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysTieudeBaocao(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysTieudeBaocao(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Sys_TIEUDE_BAOCAO", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarSysId = new TableSchema.TableColumn(schema);
				colvarSysId.ColumnName = "Sys_ID";
				colvarSysId.DataType = DbType.Int32;
				colvarSysId.MaxLength = 0;
				colvarSysId.AutoIncrement = true;
				colvarSysId.IsNullable = false;
				colvarSysId.IsPrimaryKey = true;
				colvarSysId.IsForeignKey = false;
				colvarSysId.IsReadOnly = false;
				colvarSysId.DefaultSetting = @"";
				colvarSysId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSysId);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "NGUOI_TAO";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 50;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarTieuDe = new TableSchema.TableColumn(schema);
				colvarTieuDe.ColumnName = "TIEU_DE";
				colvarTieuDe.DataType = DbType.String;
				colvarTieuDe.MaxLength = 200;
				colvarTieuDe.AutoIncrement = false;
				colvarTieuDe.IsNullable = true;
				colvarTieuDe.IsPrimaryKey = false;
				colvarTieuDe.IsForeignKey = false;
				colvarTieuDe.IsReadOnly = false;
				colvarTieuDe.DefaultSetting = @"";
				colvarTieuDe.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTieuDe);
				
				TableSchema.TableColumn colvarTenBaocao = new TableSchema.TableColumn(schema);
				colvarTenBaocao.ColumnName = "TEN_BAOCAO";
				colvarTenBaocao.DataType = DbType.String;
				colvarTenBaocao.MaxLength = 300;
				colvarTenBaocao.AutoIncrement = false;
				colvarTenBaocao.IsNullable = true;
				colvarTenBaocao.IsPrimaryKey = false;
				colvarTenBaocao.IsForeignKey = false;
				colvarTenBaocao.IsReadOnly = false;
				colvarTenBaocao.DefaultSetting = @"";
				colvarTenBaocao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenBaocao);
				
				TableSchema.TableColumn colvarTenForm = new TableSchema.TableColumn(schema);
				colvarTenForm.ColumnName = "TEN_FORM";
				colvarTenForm.DataType = DbType.String;
				colvarTenForm.MaxLength = 500;
				colvarTenForm.AutoIncrement = false;
				colvarTenForm.IsNullable = true;
				colvarTenForm.IsPrimaryKey = false;
				colvarTenForm.IsForeignKey = false;
				colvarTenForm.IsReadOnly = false;
				colvarTenForm.DefaultSetting = @"";
				colvarTenForm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenForm);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("Sys_TIEUDE_BAOCAO",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("SysId")]
		[Bindable(true)]
		public int SysId 
		{
			get { return GetColumnValue<int>(Columns.SysId); }
			set { SetColumnValue(Columns.SysId, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("TieuDe")]
		[Bindable(true)]
		public string TieuDe 
		{
			get { return GetColumnValue<string>(Columns.TieuDe); }
			set { SetColumnValue(Columns.TieuDe, value); }
		}
		  
		[XmlAttribute("TenBaocao")]
		[Bindable(true)]
		public string TenBaocao 
		{
			get { return GetColumnValue<string>(Columns.TenBaocao); }
			set { SetColumnValue(Columns.TenBaocao, value); }
		}
		  
		[XmlAttribute("TenForm")]
		[Bindable(true)]
		public string TenForm 
		{
			get { return GetColumnValue<string>(Columns.TenForm); }
			set { SetColumnValue(Columns.TenForm, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varNguoiTao,string varTieuDe,string varTenBaocao,string varTenForm)
		{
			SysTieudeBaocao item = new SysTieudeBaocao();
			
			item.NguoiTao = varNguoiTao;
			
			item.TieuDe = varTieuDe;
			
			item.TenBaocao = varTenBaocao;
			
			item.TenForm = varTenForm;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varSysId,string varNguoiTao,string varTieuDe,string varTenBaocao,string varTenForm)
		{
			SysTieudeBaocao item = new SysTieudeBaocao();
			
				item.SysId = varSysId;
			
				item.NguoiTao = varNguoiTao;
			
				item.TieuDe = varTieuDe;
			
				item.TenBaocao = varTenBaocao;
			
				item.TenForm = varTenForm;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SysIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TieuDeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TenBaocaoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TenFormColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string SysId = @"Sys_ID";
			 public static string NguoiTao = @"NGUOI_TAO";
			 public static string TieuDe = @"TIEU_DE";
			 public static string TenBaocao = @"TEN_BAOCAO";
			 public static string TenForm = @"TEN_FORM";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
