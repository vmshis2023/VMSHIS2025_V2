using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TDeliveryPresDetail class.
	/// </summary>
    [Serializable]
	public partial class TDeliveryPresDetailCollection : ActiveList<TDeliveryPresDetail, TDeliveryPresDetailCollection>
	{	   
		public TDeliveryPresDetailCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TDeliveryPresDetailCollection</returns>
		public TDeliveryPresDetailCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TDeliveryPresDetail o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Delivery_PresDetail table.
	/// </summary>
	[Serializable]
	public partial class TDeliveryPresDetail : ActiveRecord<TDeliveryPresDetail>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TDeliveryPresDetail()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TDeliveryPresDetail(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TDeliveryPresDetail(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TDeliveryPresDetail(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Delivery_PresDetail", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPresId = new TableSchema.TableColumn(schema);
				colvarPresId.ColumnName = "Pres_ID";
				colvarPresId.DataType = DbType.Int64;
				colvarPresId.MaxLength = 0;
				colvarPresId.AutoIncrement = false;
				colvarPresId.IsNullable = false;
				colvarPresId.IsPrimaryKey = true;
				colvarPresId.IsForeignKey = false;
				colvarPresId.IsReadOnly = false;
				colvarPresId.DefaultSetting = @"";
				colvarPresId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPresId);
				
				TableSchema.TableColumn colvarDrugId = new TableSchema.TableColumn(schema);
				colvarDrugId.ColumnName = "Drug_ID";
				colvarDrugId.DataType = DbType.Int32;
				colvarDrugId.MaxLength = 0;
				colvarDrugId.AutoIncrement = false;
				colvarDrugId.IsNullable = false;
				colvarDrugId.IsPrimaryKey = true;
				colvarDrugId.IsForeignKey = false;
				colvarDrugId.IsReadOnly = false;
				colvarDrugId.DefaultSetting = @"";
				colvarDrugId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDrugId);
				
				TableSchema.TableColumn colvarStockId = new TableSchema.TableColumn(schema);
				colvarStockId.ColumnName = "Stock_ID";
				colvarStockId.DataType = DbType.Int16;
				colvarStockId.MaxLength = 0;
				colvarStockId.AutoIncrement = false;
				colvarStockId.IsNullable = false;
				colvarStockId.IsPrimaryKey = true;
				colvarStockId.IsForeignKey = false;
				colvarStockId.IsReadOnly = false;
				colvarStockId.DefaultSetting = @"";
				colvarStockId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStockId);
				
				TableSchema.TableColumn colvarExpireDate = new TableSchema.TableColumn(schema);
				colvarExpireDate.ColumnName = "Expire_date";
				colvarExpireDate.DataType = DbType.DateTime;
				colvarExpireDate.MaxLength = 0;
				colvarExpireDate.AutoIncrement = false;
				colvarExpireDate.IsNullable = false;
				colvarExpireDate.IsPrimaryKey = true;
				colvarExpireDate.IsForeignKey = false;
				colvarExpireDate.IsReadOnly = false;
				colvarExpireDate.DefaultSetting = @"";
				colvarExpireDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExpireDate);
				
				TableSchema.TableColumn colvarPrice = new TableSchema.TableColumn(schema);
				colvarPrice.ColumnName = "Price";
				colvarPrice.DataType = DbType.Currency;
				colvarPrice.MaxLength = 0;
				colvarPrice.AutoIncrement = false;
				colvarPrice.IsNullable = false;
				colvarPrice.IsPrimaryKey = true;
				colvarPrice.IsForeignKey = false;
				colvarPrice.IsReadOnly = false;
				colvarPrice.DefaultSetting = @"";
				colvarPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrice);
				
				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = false;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);
				
				TableSchema.TableColumn colvarNgayCapphat = new TableSchema.TableColumn(schema);
				colvarNgayCapphat.ColumnName = "NGAY_CAPPHAT";
				colvarNgayCapphat.DataType = DbType.DateTime;
				colvarNgayCapphat.MaxLength = 0;
				colvarNgayCapphat.AutoIncrement = false;
				colvarNgayCapphat.IsNullable = false;
				colvarNgayCapphat.IsPrimaryKey = false;
				colvarNgayCapphat.IsForeignKey = false;
				colvarNgayCapphat.IsReadOnly = false;
				colvarNgayCapphat.DefaultSetting = @"";
				colvarNgayCapphat.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayCapphat);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NGAY_TAO";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = false;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "NGUOI_TAO";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 20;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = false;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayChot = new TableSchema.TableColumn(schema);
				colvarNgayChot.ColumnName = "NGAY_CHOT";
				colvarNgayChot.DataType = DbType.DateTime;
				colvarNgayChot.MaxLength = 0;
				colvarNgayChot.AutoIncrement = false;
				colvarNgayChot.IsNullable = true;
				colvarNgayChot.IsPrimaryKey = false;
				colvarNgayChot.IsForeignKey = false;
				colvarNgayChot.IsReadOnly = false;
				colvarNgayChot.DefaultSetting = @"";
				colvarNgayChot.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayChot);
				
				TableSchema.TableColumn colvarIdChot = new TableSchema.TableColumn(schema);
				colvarIdChot.ColumnName = "ID_CHOT";
				colvarIdChot.DataType = DbType.Int32;
				colvarIdChot.MaxLength = 0;
				colvarIdChot.AutoIncrement = false;
				colvarIdChot.IsNullable = true;
				colvarIdChot.IsPrimaryKey = false;
				colvarIdChot.IsForeignKey = false;
				colvarIdChot.IsReadOnly = false;
				
						colvarIdChot.DefaultSetting = @"((-1))";
				colvarIdChot.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdChot);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_Delivery_PresDetail",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PresId")]
		[Bindable(true)]
		public long PresId 
		{
			get { return GetColumnValue<long>(Columns.PresId); }
			set { SetColumnValue(Columns.PresId, value); }
		}
		  
		[XmlAttribute("DrugId")]
		[Bindable(true)]
		public int DrugId 
		{
			get { return GetColumnValue<int>(Columns.DrugId); }
			set { SetColumnValue(Columns.DrugId, value); }
		}
		  
		[XmlAttribute("StockId")]
		[Bindable(true)]
		public short StockId 
		{
			get { return GetColumnValue<short>(Columns.StockId); }
			set { SetColumnValue(Columns.StockId, value); }
		}
		  
		[XmlAttribute("ExpireDate")]
		[Bindable(true)]
		public DateTime ExpireDate 
		{
			get { return GetColumnValue<DateTime>(Columns.ExpireDate); }
			set { SetColumnValue(Columns.ExpireDate, value); }
		}
		  
		[XmlAttribute("Price")]
		[Bindable(true)]
		public decimal Price 
		{
			get { return GetColumnValue<decimal>(Columns.Price); }
			set { SetColumnValue(Columns.Price, value); }
		}
		  
		[XmlAttribute("Quantity")]
		[Bindable(true)]
		public int Quantity 
		{
			get { return GetColumnValue<int>(Columns.Quantity); }
			set { SetColumnValue(Columns.Quantity, value); }
		}
		  
		[XmlAttribute("NgayCapphat")]
		[Bindable(true)]
		public DateTime NgayCapphat 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayCapphat); }
			set { SetColumnValue(Columns.NgayCapphat, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime NgayTao 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayChot")]
		[Bindable(true)]
		public DateTime? NgayChot 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayChot); }
			set { SetColumnValue(Columns.NgayChot, value); }
		}
		  
		[XmlAttribute("IdChot")]
		[Bindable(true)]
		public int? IdChot 
		{
			get { return GetColumnValue<int?>(Columns.IdChot); }
			set { SetColumnValue(Columns.IdChot, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varPresId,int varDrugId,short varStockId,DateTime varExpireDate,decimal varPrice,int varQuantity,DateTime varNgayCapphat,DateTime varNgayTao,string varNguoiTao,DateTime? varNgayChot,int? varIdChot)
		{
			TDeliveryPresDetail item = new TDeliveryPresDetail();
			
			item.PresId = varPresId;
			
			item.DrugId = varDrugId;
			
			item.StockId = varStockId;
			
			item.ExpireDate = varExpireDate;
			
			item.Price = varPrice;
			
			item.Quantity = varQuantity;
			
			item.NgayCapphat = varNgayCapphat;
			
			item.NgayTao = varNgayTao;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayChot = varNgayChot;
			
			item.IdChot = varIdChot;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varPresId,int varDrugId,short varStockId,DateTime varExpireDate,decimal varPrice,int varQuantity,DateTime varNgayCapphat,DateTime varNgayTao,string varNguoiTao,DateTime? varNgayChot,int? varIdChot)
		{
			TDeliveryPresDetail item = new TDeliveryPresDetail();
			
				item.PresId = varPresId;
			
				item.DrugId = varDrugId;
			
				item.StockId = varStockId;
			
				item.ExpireDate = varExpireDate;
			
				item.Price = varPrice;
			
				item.Quantity = varQuantity;
			
				item.NgayCapphat = varNgayCapphat;
			
				item.NgayTao = varNgayTao;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayChot = varNgayChot;
			
				item.IdChot = varIdChot;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PresIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DrugIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn StockIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ExpireDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn QuantityColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayCapphatColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayChotColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn IdChotColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PresId = @"Pres_ID";
			 public static string DrugId = @"Drug_ID";
			 public static string StockId = @"Stock_ID";
			 public static string ExpireDate = @"Expire_date";
			 public static string Price = @"Price";
			 public static string Quantity = @"Quantity";
			 public static string NgayCapphat = @"NGAY_CAPPHAT";
			 public static string NgayTao = @"NGAY_TAO";
			 public static string NguoiTao = @"NGUOI_TAO";
			 public static string NgayChot = @"NGAY_CHOT";
			 public static string IdChot = @"ID_CHOT";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
