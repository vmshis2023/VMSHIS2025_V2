using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
    /// <summary>
    /// Controller class for T_Exam_Other
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TExamOtherController
    {
        // Preload our schema..
        TExamOther thisSchemaLoad = new TExamOther();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TExamOtherCollection FetchAll()
        {
            TExamOtherCollection coll = new TExamOtherCollection();
            Query qry = new Query(TExamOther.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TExamOtherCollection FetchByID(object ExamId)
        {
            TExamOtherCollection coll = new TExamOtherCollection().Where("Exam_ID", ExamId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TExamOtherCollection FetchByQuery(Query qry)
        {
            TExamOtherCollection coll = new TExamOtherCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object ExamId)
        {
            return (TExamOther.Delete(ExamId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object ExamId)
        {
            return (TExamOther.Destroy(ExamId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(long ExamId,byte? Allergy,short? AllericDay,byte? DrugInfo,short? DrugDay,byte? WineInfo,short? WineDay,byte? TobaccoInfo,short? TobaccoDay,byte? PipeInfo,short? PipeTobaDay,string CreatedBy,DateTime? CreateDate,string ModifiedBy,DateTime? ModifiedDate)
	    {
		    TExamOther item = new TExamOther();
		    
            item.ExamId = ExamId;
            
            item.Allergy = Allergy;
            
            item.AllericDay = AllericDay;
            
            item.DrugInfo = DrugInfo;
            
            item.DrugDay = DrugDay;
            
            item.WineInfo = WineInfo;
            
            item.WineDay = WineDay;
            
            item.TobaccoInfo = TobaccoInfo;
            
            item.TobaccoDay = TobaccoDay;
            
            item.PipeInfo = PipeInfo;
            
            item.PipeTobaDay = PipeTobaDay;
            
            item.CreatedBy = CreatedBy;
            
            item.CreateDate = CreateDate;
            
            item.ModifiedBy = ModifiedBy;
            
            item.ModifiedDate = ModifiedDate;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(long ExamId,byte? Allergy,short? AllericDay,byte? DrugInfo,short? DrugDay,byte? WineInfo,short? WineDay,byte? TobaccoInfo,short? TobaccoDay,byte? PipeInfo,short? PipeTobaDay,string CreatedBy,DateTime? CreateDate,string ModifiedBy,DateTime? ModifiedDate)
	    {
		    TExamOther item = new TExamOther();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.ExamId = ExamId;
				
			item.Allergy = Allergy;
				
			item.AllericDay = AllericDay;
				
			item.DrugInfo = DrugInfo;
				
			item.DrugDay = DrugDay;
				
			item.WineInfo = WineInfo;
				
			item.WineDay = WineDay;
				
			item.TobaccoInfo = TobaccoInfo;
				
			item.TobaccoDay = TobaccoDay;
				
			item.PipeInfo = PipeInfo;
				
			item.PipeTobaDay = PipeTobaDay;
				
			item.CreatedBy = CreatedBy;
				
			item.CreateDate = CreateDate;
				
			item.ModifiedBy = ModifiedBy;
				
			item.ModifiedDate = ModifiedDate;
				
	        item.Save(UserName);
	    }
    }
}
