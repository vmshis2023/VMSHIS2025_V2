using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TDelivery class.
	/// </summary>
    [Serializable]
	public partial class TDeliveryCollection : ActiveList<TDelivery, TDeliveryCollection>
	{	   
		public TDeliveryCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TDeliveryCollection</returns>
		public TDeliveryCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TDelivery o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Delivery table.
	/// </summary>
	[Serializable]
	public partial class TDelivery : ActiveRecord<TDelivery>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TDelivery()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TDelivery(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TDelivery(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TDelivery(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Delivery", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int64;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarInputDate = new TableSchema.TableColumn(schema);
				colvarInputDate.ColumnName = "Input_Date";
				colvarInputDate.DataType = DbType.DateTime;
				colvarInputDate.MaxLength = 0;
				colvarInputDate.AutoIncrement = false;
				colvarInputDate.IsNullable = false;
				colvarInputDate.IsPrimaryKey = false;
				colvarInputDate.IsForeignKey = false;
				colvarInputDate.IsReadOnly = false;
				colvarInputDate.DefaultSetting = @"";
				colvarInputDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInputDate);
				
				TableSchema.TableColumn colvarInputUserId = new TableSchema.TableColumn(schema);
				colvarInputUserId.ColumnName = "InputUser_ID";
				colvarInputUserId.DataType = DbType.String;
				colvarInputUserId.MaxLength = 100;
				colvarInputUserId.AutoIncrement = false;
				colvarInputUserId.IsNullable = false;
				colvarInputUserId.IsPrimaryKey = false;
				colvarInputUserId.IsForeignKey = false;
				colvarInputUserId.IsReadOnly = false;
				colvarInputUserId.DefaultSetting = @"";
				colvarInputUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInputUserId);
				
				TableSchema.TableColumn colvarDeliverUserId = new TableSchema.TableColumn(schema);
				colvarDeliverUserId.ColumnName = "DeliverUser_ID";
				colvarDeliverUserId.DataType = DbType.Int32;
				colvarDeliverUserId.MaxLength = 0;
				colvarDeliverUserId.AutoIncrement = false;
				colvarDeliverUserId.IsNullable = false;
				colvarDeliverUserId.IsPrimaryKey = false;
				colvarDeliverUserId.IsForeignKey = false;
				colvarDeliverUserId.IsReadOnly = false;
				colvarDeliverUserId.DefaultSetting = @"";
				colvarDeliverUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliverUserId);
				
				TableSchema.TableColumn colvarDepartmentId = new TableSchema.TableColumn(schema);
				colvarDepartmentId.ColumnName = "Department_ID";
				colvarDepartmentId.DataType = DbType.Int32;
				colvarDepartmentId.MaxLength = 0;
				colvarDepartmentId.AutoIncrement = false;
				colvarDepartmentId.IsNullable = false;
				colvarDepartmentId.IsPrimaryKey = false;
				colvarDepartmentId.IsForeignKey = false;
				colvarDepartmentId.IsReadOnly = false;
				colvarDepartmentId.DefaultSetting = @"";
				colvarDepartmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentId);
				
				TableSchema.TableColumn colvarDepartmentName = new TableSchema.TableColumn(schema);
				colvarDepartmentName.ColumnName = "Department_Name";
				colvarDepartmentName.DataType = DbType.String;
				colvarDepartmentName.MaxLength = 100;
				colvarDepartmentName.AutoIncrement = false;
				colvarDepartmentName.IsNullable = false;
				colvarDepartmentName.IsPrimaryKey = false;
				colvarDepartmentName.IsForeignKey = false;
				colvarDepartmentName.IsReadOnly = false;
				colvarDepartmentName.DefaultSetting = @"";
				colvarDepartmentName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentName);
				
				TableSchema.TableColumn colvarStaffId = new TableSchema.TableColumn(schema);
				colvarStaffId.ColumnName = "Staff_ID";
				colvarStaffId.DataType = DbType.Int32;
				colvarStaffId.MaxLength = 0;
				colvarStaffId.AutoIncrement = false;
				colvarStaffId.IsNullable = false;
				colvarStaffId.IsPrimaryKey = false;
				colvarStaffId.IsForeignKey = false;
				colvarStaffId.IsReadOnly = false;
				colvarStaffId.DefaultSetting = @"";
				colvarStaffId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStaffId);
				
				TableSchema.TableColumn colvarStaffName = new TableSchema.TableColumn(schema);
				colvarStaffName.ColumnName = "Staff_Name";
				colvarStaffName.DataType = DbType.String;
				colvarStaffName.MaxLength = 100;
				colvarStaffName.AutoIncrement = false;
				colvarStaffName.IsNullable = false;
				colvarStaffName.IsPrimaryKey = false;
				colvarStaffName.IsForeignKey = false;
				colvarStaffName.IsReadOnly = false;
				colvarStaffName.DefaultSetting = @"";
				colvarStaffName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStaffName);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "Status";
				colvarStatus.DataType = DbType.Int32;
				colvarStatus.MaxLength = 0;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = false;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				
						colvarStatus.DefaultSetting = @"((0))";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 255;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				TableSchema.TableColumn colvarConfirmStatus = new TableSchema.TableColumn(schema);
				colvarConfirmStatus.ColumnName = "Confirm_Status";
				colvarConfirmStatus.DataType = DbType.Int32;
				colvarConfirmStatus.MaxLength = 0;
				colvarConfirmStatus.AutoIncrement = false;
				colvarConfirmStatus.IsNullable = true;
				colvarConfirmStatus.IsPrimaryKey = false;
				colvarConfirmStatus.IsForeignKey = false;
				colvarConfirmStatus.IsReadOnly = false;
				
						colvarConfirmStatus.DefaultSetting = @"((0))";
				colvarConfirmStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarConfirmStatus);
				
				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "Created_Date";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = true;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				
						colvarCreatedDate.DefaultSetting = @"(getdate())";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "Created_By";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_Delivery",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public long Id 
		{
			get { return GetColumnValue<long>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("InputDate")]
		[Bindable(true)]
		public DateTime InputDate 
		{
			get { return GetColumnValue<DateTime>(Columns.InputDate); }
			set { SetColumnValue(Columns.InputDate, value); }
		}
		  
		[XmlAttribute("InputUserId")]
		[Bindable(true)]
		public string InputUserId 
		{
			get { return GetColumnValue<string>(Columns.InputUserId); }
			set { SetColumnValue(Columns.InputUserId, value); }
		}
		  
		[XmlAttribute("DeliverUserId")]
		[Bindable(true)]
		public int DeliverUserId 
		{
			get { return GetColumnValue<int>(Columns.DeliverUserId); }
			set { SetColumnValue(Columns.DeliverUserId, value); }
		}
		  
		[XmlAttribute("DepartmentId")]
		[Bindable(true)]
		public int DepartmentId 
		{
			get { return GetColumnValue<int>(Columns.DepartmentId); }
			set { SetColumnValue(Columns.DepartmentId, value); }
		}
		  
		[XmlAttribute("DepartmentName")]
		[Bindable(true)]
		public string DepartmentName 
		{
			get { return GetColumnValue<string>(Columns.DepartmentName); }
			set { SetColumnValue(Columns.DepartmentName, value); }
		}
		  
		[XmlAttribute("StaffId")]
		[Bindable(true)]
		public int StaffId 
		{
			get { return GetColumnValue<int>(Columns.StaffId); }
			set { SetColumnValue(Columns.StaffId, value); }
		}
		  
		[XmlAttribute("StaffName")]
		[Bindable(true)]
		public string StaffName 
		{
			get { return GetColumnValue<string>(Columns.StaffName); }
			set { SetColumnValue(Columns.StaffName, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public int Status 
		{
			get { return GetColumnValue<int>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		  
		[XmlAttribute("ConfirmStatus")]
		[Bindable(true)]
		public int? ConfirmStatus 
		{
			get { return GetColumnValue<int?>(Columns.ConfirmStatus); }
			set { SetColumnValue(Columns.ConfirmStatus, value); }
		}
		  
		[XmlAttribute("CreatedDate")]
		[Bindable(true)]
		public DateTime? CreatedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreatedDate); }
			set { SetColumnValue(Columns.CreatedDate, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(DateTime varInputDate,string varInputUserId,int varDeliverUserId,int varDepartmentId,string varDepartmentName,int varStaffId,string varStaffName,int varStatus,string varSDesc,int? varConfirmStatus,DateTime? varCreatedDate,string varCreatedBy)
		{
			TDelivery item = new TDelivery();
			
			item.InputDate = varInputDate;
			
			item.InputUserId = varInputUserId;
			
			item.DeliverUserId = varDeliverUserId;
			
			item.DepartmentId = varDepartmentId;
			
			item.DepartmentName = varDepartmentName;
			
			item.StaffId = varStaffId;
			
			item.StaffName = varStaffName;
			
			item.Status = varStatus;
			
			item.SDesc = varSDesc;
			
			item.ConfirmStatus = varConfirmStatus;
			
			item.CreatedDate = varCreatedDate;
			
			item.CreatedBy = varCreatedBy;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varId,DateTime varInputDate,string varInputUserId,int varDeliverUserId,int varDepartmentId,string varDepartmentName,int varStaffId,string varStaffName,int varStatus,string varSDesc,int? varConfirmStatus,DateTime? varCreatedDate,string varCreatedBy)
		{
			TDelivery item = new TDelivery();
			
				item.Id = varId;
			
				item.InputDate = varInputDate;
			
				item.InputUserId = varInputUserId;
			
				item.DeliverUserId = varDeliverUserId;
			
				item.DepartmentId = varDepartmentId;
			
				item.DepartmentName = varDepartmentName;
			
				item.StaffId = varStaffId;
			
				item.StaffName = varStaffName;
			
				item.Status = varStatus;
			
				item.SDesc = varSDesc;
			
				item.ConfirmStatus = varConfirmStatus;
			
				item.CreatedDate = varCreatedDate;
			
				item.CreatedBy = varCreatedBy;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn InputDateColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn InputUserIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliverUserIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentNameColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn StaffIdColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn StaffNameColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ConfirmStatusColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedDateColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string InputDate = @"Input_Date";
			 public static string InputUserId = @"InputUser_ID";
			 public static string DeliverUserId = @"DeliverUser_ID";
			 public static string DepartmentId = @"Department_ID";
			 public static string DepartmentName = @"Department_Name";
			 public static string StaffId = @"Staff_ID";
			 public static string StaffName = @"Staff_Name";
			 public static string Status = @"Status";
			 public static string SDesc = @"sDesc";
			 public static string ConfirmStatus = @"Confirm_Status";
			 public static string CreatedDate = @"Created_Date";
			 public static string CreatedBy = @"Created_By";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
