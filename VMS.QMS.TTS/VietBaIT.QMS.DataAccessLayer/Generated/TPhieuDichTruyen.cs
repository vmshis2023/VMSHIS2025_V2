using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TPhieuDichTruyen class.
	/// </summary>
    [Serializable]
	public partial class TPhieuDichTruyenCollection : ActiveList<TPhieuDichTruyen, TPhieuDichTruyenCollection>
	{	   
		public TPhieuDichTruyenCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TPhieuDichTruyenCollection</returns>
		public TPhieuDichTruyenCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TPhieuDichTruyen o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_PHIEU_DICH_TRUYEN table.
	/// </summary>
	[Serializable]
	public partial class TPhieuDichTruyen : ActiveRecord<TPhieuDichTruyen>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TPhieuDichTruyen()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TPhieuDichTruyen(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TPhieuDichTruyen(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TPhieuDichTruyen(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_PHIEU_DICH_TRUYEN", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPhieuTdId = new TableSchema.TableColumn(schema);
				colvarPhieuTdId.ColumnName = "Phieu_TD_ID";
				colvarPhieuTdId.DataType = DbType.Int64;
				colvarPhieuTdId.MaxLength = 0;
				colvarPhieuTdId.AutoIncrement = true;
				colvarPhieuTdId.IsNullable = false;
				colvarPhieuTdId.IsPrimaryKey = true;
				colvarPhieuTdId.IsForeignKey = false;
				colvarPhieuTdId.IsReadOnly = false;
				colvarPhieuTdId.DefaultSetting = @"";
				colvarPhieuTdId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhieuTdId);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int64;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = false;
				colvarPatientId.IsPrimaryKey = false;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "Patient_Code";
				colvarPatientCode.DataType = DbType.String;
				colvarPatientCode.MaxLength = 50;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = false;
				colvarPatientCode.IsPrimaryKey = false;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarPatientDeptId = new TableSchema.TableColumn(schema);
				colvarPatientDeptId.ColumnName = "PatientDept_ID";
				colvarPatientDeptId.DataType = DbType.Int64;
				colvarPatientDeptId.MaxLength = 0;
				colvarPatientDeptId.AutoIncrement = false;
				colvarPatientDeptId.IsNullable = false;
				colvarPatientDeptId.IsPrimaryKey = false;
				colvarPatientDeptId.IsForeignKey = false;
				colvarPatientDeptId.IsReadOnly = false;
				colvarPatientDeptId.DefaultSetting = @"";
				colvarPatientDeptId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientDeptId);
				
				TableSchema.TableColumn colvarDepartmentId = new TableSchema.TableColumn(schema);
				colvarDepartmentId.ColumnName = "Department_ID";
				colvarDepartmentId.DataType = DbType.Int32;
				colvarDepartmentId.MaxLength = 0;
				colvarDepartmentId.AutoIncrement = false;
				colvarDepartmentId.IsNullable = true;
				colvarDepartmentId.IsPrimaryKey = false;
				colvarDepartmentId.IsForeignKey = false;
				colvarDepartmentId.IsReadOnly = false;
				colvarDepartmentId.DefaultSetting = @"";
				colvarDepartmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentId);
				
				TableSchema.TableColumn colvarBsCd = new TableSchema.TableColumn(schema);
				colvarBsCd.ColumnName = "BS_CD";
				colvarBsCd.DataType = DbType.Int32;
				colvarBsCd.MaxLength = 0;
				colvarBsCd.AutoIncrement = false;
				colvarBsCd.IsNullable = true;
				colvarBsCd.IsPrimaryKey = false;
				colvarBsCd.IsForeignKey = false;
				colvarBsCd.IsReadOnly = false;
				colvarBsCd.DefaultSetting = @"";
				colvarBsCd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBsCd);
				
				TableSchema.TableColumn colvarYTaThucHien = new TableSchema.TableColumn(schema);
				colvarYTaThucHien.ColumnName = "YTa_Thuc_Hien";
				colvarYTaThucHien.DataType = DbType.Int32;
				colvarYTaThucHien.MaxLength = 0;
				colvarYTaThucHien.AutoIncrement = false;
				colvarYTaThucHien.IsNullable = true;
				colvarYTaThucHien.IsPrimaryKey = false;
				colvarYTaThucHien.IsForeignKey = false;
				colvarYTaThucHien.IsReadOnly = false;
				colvarYTaThucHien.DefaultSetting = @"";
				colvarYTaThucHien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarYTaThucHien);
				
				TableSchema.TableColumn colvarSoLuong = new TableSchema.TableColumn(schema);
				colvarSoLuong.ColumnName = "So_Luong";
				colvarSoLuong.DataType = DbType.Int32;
				colvarSoLuong.MaxLength = 0;
				colvarSoLuong.AutoIncrement = false;
				colvarSoLuong.IsNullable = false;
				colvarSoLuong.IsPrimaryKey = false;
				colvarSoLuong.IsForeignKey = false;
				colvarSoLuong.IsReadOnly = false;
				colvarSoLuong.DefaultSetting = @"";
				colvarSoLuong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoLuong);
				
				TableSchema.TableColumn colvarDrugId = new TableSchema.TableColumn(schema);
				colvarDrugId.ColumnName = "Drug_ID";
				colvarDrugId.DataType = DbType.Int32;
				colvarDrugId.MaxLength = 0;
				colvarDrugId.AutoIncrement = false;
				colvarDrugId.IsNullable = true;
				colvarDrugId.IsPrimaryKey = false;
				colvarDrugId.IsForeignKey = false;
				colvarDrugId.IsReadOnly = false;
				colvarDrugId.DefaultSetting = @"";
				colvarDrugId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDrugId);
				
				TableSchema.TableColumn colvarTocDo = new TableSchema.TableColumn(schema);
				colvarTocDo.ColumnName = "Toc_Do";
				colvarTocDo.DataType = DbType.Int32;
				colvarTocDo.MaxLength = 0;
				colvarTocDo.AutoIncrement = false;
				colvarTocDo.IsNullable = true;
				colvarTocDo.IsPrimaryKey = false;
				colvarTocDo.IsForeignKey = false;
				colvarTocDo.IsReadOnly = false;
				colvarTocDo.DefaultSetting = @"";
				colvarTocDo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTocDo);
				
				TableSchema.TableColumn colvarTgBatDau = new TableSchema.TableColumn(schema);
				colvarTgBatDau.ColumnName = "TG_Bat_Dau";
				colvarTgBatDau.DataType = DbType.DateTime;
				colvarTgBatDau.MaxLength = 0;
				colvarTgBatDau.AutoIncrement = false;
				colvarTgBatDau.IsNullable = false;
				colvarTgBatDau.IsPrimaryKey = false;
				colvarTgBatDau.IsForeignKey = false;
				colvarTgBatDau.IsReadOnly = false;
				colvarTgBatDau.DefaultSetting = @"";
				colvarTgBatDau.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTgBatDau);
				
				TableSchema.TableColumn colvarTgKetThuc = new TableSchema.TableColumn(schema);
				colvarTgKetThuc.ColumnName = "TG_Ket_Thuc";
				colvarTgKetThuc.DataType = DbType.DateTime;
				colvarTgKetThuc.MaxLength = 0;
				colvarTgKetThuc.AutoIncrement = false;
				colvarTgKetThuc.IsNullable = false;
				colvarTgKetThuc.IsPrimaryKey = false;
				colvarTgKetThuc.IsForeignKey = false;
				colvarTgKetThuc.IsReadOnly = false;
				colvarTgKetThuc.DefaultSetting = @"";
				colvarTgKetThuc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTgKetThuc);
				
				TableSchema.TableColumn colvarNguoiThucHien = new TableSchema.TableColumn(schema);
				colvarNguoiThucHien.ColumnName = "Nguoi_Thuc_Hien";
				colvarNguoiThucHien.DataType = DbType.String;
				colvarNguoiThucHien.MaxLength = 50;
				colvarNguoiThucHien.AutoIncrement = false;
				colvarNguoiThucHien.IsNullable = true;
				colvarNguoiThucHien.IsPrimaryKey = false;
				colvarNguoiThucHien.IsForeignKey = false;
				colvarNguoiThucHien.IsReadOnly = false;
				colvarNguoiThucHien.DefaultSetting = @"";
				colvarNguoiThucHien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiThucHien);
				
				TableSchema.TableColumn colvarNgayThucHien = new TableSchema.TableColumn(schema);
				colvarNgayThucHien.ColumnName = "Ngay_Thuc_Hien";
				colvarNgayThucHien.DataType = DbType.DateTime;
				colvarNgayThucHien.MaxLength = 0;
				colvarNgayThucHien.AutoIncrement = false;
				colvarNgayThucHien.IsNullable = false;
				colvarNgayThucHien.IsPrimaryKey = false;
				colvarNgayThucHien.IsForeignKey = false;
				colvarNgayThucHien.IsReadOnly = false;
				
						colvarNgayThucHien.DefaultSetting = @"(getdate())";
				colvarNgayThucHien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayThucHien);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_PHIEU_DICH_TRUYEN",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PhieuTdId")]
		[Bindable(true)]
		public long PhieuTdId 
		{
			get { return GetColumnValue<long>(Columns.PhieuTdId); }
			set { SetColumnValue(Columns.PhieuTdId, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public long PatientId 
		{
			get { return GetColumnValue<long>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("PatientDeptId")]
		[Bindable(true)]
		public long PatientDeptId 
		{
			get { return GetColumnValue<long>(Columns.PatientDeptId); }
			set { SetColumnValue(Columns.PatientDeptId, value); }
		}
		  
		[XmlAttribute("DepartmentId")]
		[Bindable(true)]
		public int? DepartmentId 
		{
			get { return GetColumnValue<int?>(Columns.DepartmentId); }
			set { SetColumnValue(Columns.DepartmentId, value); }
		}
		  
		[XmlAttribute("BsCd")]
		[Bindable(true)]
		public int? BsCd 
		{
			get { return GetColumnValue<int?>(Columns.BsCd); }
			set { SetColumnValue(Columns.BsCd, value); }
		}
		  
		[XmlAttribute("YTaThucHien")]
		[Bindable(true)]
		public int? YTaThucHien 
		{
			get { return GetColumnValue<int?>(Columns.YTaThucHien); }
			set { SetColumnValue(Columns.YTaThucHien, value); }
		}
		  
		[XmlAttribute("SoLuong")]
		[Bindable(true)]
		public int SoLuong 
		{
			get { return GetColumnValue<int>(Columns.SoLuong); }
			set { SetColumnValue(Columns.SoLuong, value); }
		}
		  
		[XmlAttribute("DrugId")]
		[Bindable(true)]
		public int? DrugId 
		{
			get { return GetColumnValue<int?>(Columns.DrugId); }
			set { SetColumnValue(Columns.DrugId, value); }
		}
		  
		[XmlAttribute("TocDo")]
		[Bindable(true)]
		public int? TocDo 
		{
			get { return GetColumnValue<int?>(Columns.TocDo); }
			set { SetColumnValue(Columns.TocDo, value); }
		}
		  
		[XmlAttribute("TgBatDau")]
		[Bindable(true)]
		public DateTime TgBatDau 
		{
			get { return GetColumnValue<DateTime>(Columns.TgBatDau); }
			set { SetColumnValue(Columns.TgBatDau, value); }
		}
		  
		[XmlAttribute("TgKetThuc")]
		[Bindable(true)]
		public DateTime TgKetThuc 
		{
			get { return GetColumnValue<DateTime>(Columns.TgKetThuc); }
			set { SetColumnValue(Columns.TgKetThuc, value); }
		}
		  
		[XmlAttribute("NguoiThucHien")]
		[Bindable(true)]
		public string NguoiThucHien 
		{
			get { return GetColumnValue<string>(Columns.NguoiThucHien); }
			set { SetColumnValue(Columns.NguoiThucHien, value); }
		}
		  
		[XmlAttribute("NgayThucHien")]
		[Bindable(true)]
		public DateTime NgayThucHien 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayThucHien); }
			set { SetColumnValue(Columns.NgayThucHien, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varPatientId,string varPatientCode,long varPatientDeptId,int? varDepartmentId,int? varBsCd,int? varYTaThucHien,int varSoLuong,int? varDrugId,int? varTocDo,DateTime varTgBatDau,DateTime varTgKetThuc,string varNguoiThucHien,DateTime varNgayThucHien)
		{
			TPhieuDichTruyen item = new TPhieuDichTruyen();
			
			item.PatientId = varPatientId;
			
			item.PatientCode = varPatientCode;
			
			item.PatientDeptId = varPatientDeptId;
			
			item.DepartmentId = varDepartmentId;
			
			item.BsCd = varBsCd;
			
			item.YTaThucHien = varYTaThucHien;
			
			item.SoLuong = varSoLuong;
			
			item.DrugId = varDrugId;
			
			item.TocDo = varTocDo;
			
			item.TgBatDau = varTgBatDau;
			
			item.TgKetThuc = varTgKetThuc;
			
			item.NguoiThucHien = varNguoiThucHien;
			
			item.NgayThucHien = varNgayThucHien;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varPhieuTdId,long varPatientId,string varPatientCode,long varPatientDeptId,int? varDepartmentId,int? varBsCd,int? varYTaThucHien,int varSoLuong,int? varDrugId,int? varTocDo,DateTime varTgBatDau,DateTime varTgKetThuc,string varNguoiThucHien,DateTime varNgayThucHien)
		{
			TPhieuDichTruyen item = new TPhieuDichTruyen();
			
				item.PhieuTdId = varPhieuTdId;
			
				item.PatientId = varPatientId;
			
				item.PatientCode = varPatientCode;
			
				item.PatientDeptId = varPatientDeptId;
			
				item.DepartmentId = varDepartmentId;
			
				item.BsCd = varBsCd;
			
				item.YTaThucHien = varYTaThucHien;
			
				item.SoLuong = varSoLuong;
			
				item.DrugId = varDrugId;
			
				item.TocDo = varTocDo;
			
				item.TgBatDau = varTgBatDau;
			
				item.TgKetThuc = varTgKetThuc;
			
				item.NguoiThucHien = varNguoiThucHien;
			
				item.NgayThucHien = varNgayThucHien;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PhieuTdIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientDeptIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn BsCdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn YTaThucHienColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SoLuongColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DrugIdColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn TocDoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn TgBatDauColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn TgKetThucColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiThucHienColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayThucHienColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PhieuTdId = @"Phieu_TD_ID";
			 public static string PatientId = @"Patient_ID";
			 public static string PatientCode = @"Patient_Code";
			 public static string PatientDeptId = @"PatientDept_ID";
			 public static string DepartmentId = @"Department_ID";
			 public static string BsCd = @"BS_CD";
			 public static string YTaThucHien = @"YTa_Thuc_Hien";
			 public static string SoLuong = @"So_Luong";
			 public static string DrugId = @"Drug_ID";
			 public static string TocDo = @"Toc_Do";
			 public static string TgBatDau = @"TG_Bat_Dau";
			 public static string TgKetThuc = @"TG_Ket_Thuc";
			 public static string NguoiThucHien = @"Nguoi_Thuc_Hien";
			 public static string NgayThucHien = @"Ngay_Thuc_Hien";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
