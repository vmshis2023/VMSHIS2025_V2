using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TDrugReceipt class.
	/// </summary>
    [Serializable]
	public partial class TDrugReceiptCollection : ActiveList<TDrugReceipt, TDrugReceiptCollection>
	{	   
		public TDrugReceiptCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TDrugReceiptCollection</returns>
		public TDrugReceiptCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TDrugReceipt o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_DRUG_RECEIPT table.
	/// </summary>
	[Serializable]
	public partial class TDrugReceipt : ActiveRecord<TDrugReceipt>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TDrugReceipt()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TDrugReceipt(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TDrugReceipt(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TDrugReceipt(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_DRUG_RECEIPT", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarReceiptId = new TableSchema.TableColumn(schema);
				colvarReceiptId.ColumnName = "Receipt_ID";
				colvarReceiptId.DataType = DbType.Int32;
				colvarReceiptId.MaxLength = 0;
				colvarReceiptId.AutoIncrement = true;
				colvarReceiptId.IsNullable = false;
				colvarReceiptId.IsPrimaryKey = true;
				colvarReceiptId.IsForeignKey = false;
				colvarReceiptId.IsReadOnly = false;
				colvarReceiptId.DefaultSetting = @"";
				colvarReceiptId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiptId);
				
				TableSchema.TableColumn colvarFromStockId = new TableSchema.TableColumn(schema);
				colvarFromStockId.ColumnName = "FromStock_ID";
				colvarFromStockId.DataType = DbType.Int16;
				colvarFromStockId.MaxLength = 0;
				colvarFromStockId.AutoIncrement = false;
				colvarFromStockId.IsNullable = true;
				colvarFromStockId.IsPrimaryKey = false;
				colvarFromStockId.IsForeignKey = false;
				colvarFromStockId.IsReadOnly = false;
				colvarFromStockId.DefaultSetting = @"";
				colvarFromStockId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFromStockId);
				
				TableSchema.TableColumn colvarToStockId = new TableSchema.TableColumn(schema);
				colvarToStockId.ColumnName = "ToStock_ID";
				colvarToStockId.DataType = DbType.Int16;
				colvarToStockId.MaxLength = 0;
				colvarToStockId.AutoIncrement = false;
				colvarToStockId.IsNullable = false;
				colvarToStockId.IsPrimaryKey = false;
				colvarToStockId.IsForeignKey = false;
				colvarToStockId.IsReadOnly = false;
				colvarToStockId.DefaultSetting = @"";
				colvarToStockId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarToStockId);
				
				TableSchema.TableColumn colvarInputDate = new TableSchema.TableColumn(schema);
				colvarInputDate.ColumnName = "Input_Date";
				colvarInputDate.DataType = DbType.DateTime;
				colvarInputDate.MaxLength = 0;
				colvarInputDate.AutoIncrement = false;
				colvarInputDate.IsNullable = false;
				colvarInputDate.IsPrimaryKey = false;
				colvarInputDate.IsForeignKey = false;
				colvarInputDate.IsReadOnly = false;
				colvarInputDate.DefaultSetting = @"";
				colvarInputDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInputDate);
				
				TableSchema.TableColumn colvarInputUser = new TableSchema.TableColumn(schema);
				colvarInputUser.ColumnName = "Input_User";
				colvarInputUser.DataType = DbType.Int16;
				colvarInputUser.MaxLength = 0;
				colvarInputUser.AutoIncrement = false;
				colvarInputUser.IsNullable = false;
				colvarInputUser.IsPrimaryKey = false;
				colvarInputUser.IsForeignKey = false;
				colvarInputUser.IsReadOnly = false;
				colvarInputUser.DefaultSetting = @"";
				colvarInputUser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInputUser);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "Status";
				colvarStatus.DataType = DbType.Byte;
				colvarStatus.MaxLength = 0;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = false;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				colvarStatus.DefaultSetting = @"";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = true;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				colvarModifiedBy.DefaultSetting = @"";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedDate = new TableSchema.TableColumn(schema);
				colvarModifiedDate.ColumnName = "ModifiedDate";
				colvarModifiedDate.DataType = DbType.DateTime;
				colvarModifiedDate.MaxLength = 0;
				colvarModifiedDate.AutoIncrement = false;
				colvarModifiedDate.IsNullable = true;
				colvarModifiedDate.IsPrimaryKey = false;
				colvarModifiedDate.IsForeignKey = false;
				colvarModifiedDate.IsReadOnly = false;
				colvarModifiedDate.DefaultSetting = @"";
				colvarModifiedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedDate);
				
				TableSchema.TableColumn colvarLot = new TableSchema.TableColumn(schema);
				colvarLot.ColumnName = "Lot";
				colvarLot.DataType = DbType.String;
				colvarLot.MaxLength = 100;
				colvarLot.AutoIncrement = false;
				colvarLot.IsNullable = true;
				colvarLot.IsPrimaryKey = false;
				colvarLot.IsForeignKey = false;
				colvarLot.IsReadOnly = false;
				colvarLot.DefaultSetting = @"";
				colvarLot.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLot);
				
				TableSchema.TableColumn colvarSupplyUnitId = new TableSchema.TableColumn(schema);
				colvarSupplyUnitId.ColumnName = "SupplyUnit_ID";
				colvarSupplyUnitId.DataType = DbType.Int16;
				colvarSupplyUnitId.MaxLength = 0;
				colvarSupplyUnitId.AutoIncrement = false;
				colvarSupplyUnitId.IsNullable = true;
				colvarSupplyUnitId.IsPrimaryKey = false;
				colvarSupplyUnitId.IsForeignKey = false;
				colvarSupplyUnitId.IsReadOnly = false;
				
						colvarSupplyUnitId.DefaultSetting = @"((0))";
				colvarSupplyUnitId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSupplyUnitId);
				
				TableSchema.TableColumn colvarHasUpdatedPrice = new TableSchema.TableColumn(schema);
				colvarHasUpdatedPrice.ColumnName = "hasUpdatedPrice";
				colvarHasUpdatedPrice.DataType = DbType.Int16;
				colvarHasUpdatedPrice.MaxLength = 0;
				colvarHasUpdatedPrice.AutoIncrement = false;
				colvarHasUpdatedPrice.IsNullable = true;
				colvarHasUpdatedPrice.IsPrimaryKey = false;
				colvarHasUpdatedPrice.IsForeignKey = false;
				colvarHasUpdatedPrice.IsReadOnly = false;
				
						colvarHasUpdatedPrice.DefaultSetting = @"((0))";
				colvarHasUpdatedPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHasUpdatedPrice);
				
				TableSchema.TableColumn colvarReceiptType = new TableSchema.TableColumn(schema);
				colvarReceiptType.ColumnName = "Receipt_Type";
				colvarReceiptType.DataType = DbType.Int16;
				colvarReceiptType.MaxLength = 0;
				colvarReceiptType.AutoIncrement = false;
				colvarReceiptType.IsNullable = true;
				colvarReceiptType.IsPrimaryKey = false;
				colvarReceiptType.IsForeignKey = false;
				colvarReceiptType.IsReadOnly = false;
				
						colvarReceiptType.DefaultSetting = @"((0))";
				colvarReceiptType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceiptType);
				
				TableSchema.TableColumn colvarNgayChot = new TableSchema.TableColumn(schema);
				colvarNgayChot.ColumnName = "NGAY_CHOT";
				colvarNgayChot.DataType = DbType.DateTime;
				colvarNgayChot.MaxLength = 0;
				colvarNgayChot.AutoIncrement = false;
				colvarNgayChot.IsNullable = true;
				colvarNgayChot.IsPrimaryKey = false;
				colvarNgayChot.IsForeignKey = false;
				colvarNgayChot.IsReadOnly = false;
				colvarNgayChot.DefaultSetting = @"";
				colvarNgayChot.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayChot);
				
				TableSchema.TableColumn colvarNgayXacnhan = new TableSchema.TableColumn(schema);
				colvarNgayXacnhan.ColumnName = "NGAY_XACNHAN";
				colvarNgayXacnhan.DataType = DbType.DateTime;
				colvarNgayXacnhan.MaxLength = 0;
				colvarNgayXacnhan.AutoIncrement = false;
				colvarNgayXacnhan.IsNullable = true;
				colvarNgayXacnhan.IsPrimaryKey = false;
				colvarNgayXacnhan.IsForeignKey = false;
				colvarNgayXacnhan.IsReadOnly = false;
				colvarNgayXacnhan.DefaultSetting = @"";
				colvarNgayXacnhan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayXacnhan);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_DRUG_RECEIPT",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ReceiptId")]
		[Bindable(true)]
		public int ReceiptId 
		{
			get { return GetColumnValue<int>(Columns.ReceiptId); }
			set { SetColumnValue(Columns.ReceiptId, value); }
		}
		  
		[XmlAttribute("FromStockId")]
		[Bindable(true)]
		public short? FromStockId 
		{
			get { return GetColumnValue<short?>(Columns.FromStockId); }
			set { SetColumnValue(Columns.FromStockId, value); }
		}
		  
		[XmlAttribute("ToStockId")]
		[Bindable(true)]
		public short ToStockId 
		{
			get { return GetColumnValue<short>(Columns.ToStockId); }
			set { SetColumnValue(Columns.ToStockId, value); }
		}
		  
		[XmlAttribute("InputDate")]
		[Bindable(true)]
		public DateTime InputDate 
		{
			get { return GetColumnValue<DateTime>(Columns.InputDate); }
			set { SetColumnValue(Columns.InputDate, value); }
		}
		  
		[XmlAttribute("InputUser")]
		[Bindable(true)]
		public short InputUser 
		{
			get { return GetColumnValue<short>(Columns.InputUser); }
			set { SetColumnValue(Columns.InputUser, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public byte Status 
		{
			get { return GetColumnValue<byte>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedDate")]
		[Bindable(true)]
		public DateTime CreatedDate 
		{
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set { SetColumnValue(Columns.CreatedDate, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedDate")]
		[Bindable(true)]
		public DateTime? ModifiedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifiedDate); }
			set { SetColumnValue(Columns.ModifiedDate, value); }
		}
		  
		[XmlAttribute("Lot")]
		[Bindable(true)]
		public string Lot 
		{
			get { return GetColumnValue<string>(Columns.Lot); }
			set { SetColumnValue(Columns.Lot, value); }
		}
		  
		[XmlAttribute("SupplyUnitId")]
		[Bindable(true)]
		public short? SupplyUnitId 
		{
			get { return GetColumnValue<short?>(Columns.SupplyUnitId); }
			set { SetColumnValue(Columns.SupplyUnitId, value); }
		}
		  
		[XmlAttribute("HasUpdatedPrice")]
		[Bindable(true)]
		public short? HasUpdatedPrice 
		{
			get { return GetColumnValue<short?>(Columns.HasUpdatedPrice); }
			set { SetColumnValue(Columns.HasUpdatedPrice, value); }
		}
		  
		[XmlAttribute("ReceiptType")]
		[Bindable(true)]
		public short? ReceiptType 
		{
			get { return GetColumnValue<short?>(Columns.ReceiptType); }
			set { SetColumnValue(Columns.ReceiptType, value); }
		}
		  
		[XmlAttribute("NgayChot")]
		[Bindable(true)]
		public DateTime? NgayChot 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayChot); }
			set { SetColumnValue(Columns.NgayChot, value); }
		}
		  
		[XmlAttribute("NgayXacnhan")]
		[Bindable(true)]
		public DateTime? NgayXacnhan 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayXacnhan); }
			set { SetColumnValue(Columns.NgayXacnhan, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(short? varFromStockId,short varToStockId,DateTime varInputDate,short varInputUser,byte varStatus,string varCreatedBy,DateTime varCreatedDate,string varModifiedBy,DateTime? varModifiedDate,string varLot,short? varSupplyUnitId,short? varHasUpdatedPrice,short? varReceiptType,DateTime? varNgayChot,DateTime? varNgayXacnhan)
		{
			TDrugReceipt item = new TDrugReceipt();
			
			item.FromStockId = varFromStockId;
			
			item.ToStockId = varToStockId;
			
			item.InputDate = varInputDate;
			
			item.InputUser = varInputUser;
			
			item.Status = varStatus;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedDate = varCreatedDate;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedDate = varModifiedDate;
			
			item.Lot = varLot;
			
			item.SupplyUnitId = varSupplyUnitId;
			
			item.HasUpdatedPrice = varHasUpdatedPrice;
			
			item.ReceiptType = varReceiptType;
			
			item.NgayChot = varNgayChot;
			
			item.NgayXacnhan = varNgayXacnhan;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varReceiptId,short? varFromStockId,short varToStockId,DateTime varInputDate,short varInputUser,byte varStatus,string varCreatedBy,DateTime varCreatedDate,string varModifiedBy,DateTime? varModifiedDate,string varLot,short? varSupplyUnitId,short? varHasUpdatedPrice,short? varReceiptType,DateTime? varNgayChot,DateTime? varNgayXacnhan)
		{
			TDrugReceipt item = new TDrugReceipt();
			
				item.ReceiptId = varReceiptId;
			
				item.FromStockId = varFromStockId;
			
				item.ToStockId = varToStockId;
			
				item.InputDate = varInputDate;
			
				item.InputUser = varInputUser;
			
				item.Status = varStatus;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedDate = varCreatedDate;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedDate = varModifiedDate;
			
				item.Lot = varLot;
			
				item.SupplyUnitId = varSupplyUnitId;
			
				item.HasUpdatedPrice = varHasUpdatedPrice;
			
				item.ReceiptType = varReceiptType;
			
				item.NgayChot = varNgayChot;
			
				item.NgayXacnhan = varNgayXacnhan;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ReceiptIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FromStockIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ToStockIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn InputDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn InputUserColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedDateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedDateColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn LotColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn SupplyUnitIdColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn HasUpdatedPriceColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ReceiptTypeColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayChotColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayXacnhanColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ReceiptId = @"Receipt_ID";
			 public static string FromStockId = @"FromStock_ID";
			 public static string ToStockId = @"ToStock_ID";
			 public static string InputDate = @"Input_Date";
			 public static string InputUser = @"Input_User";
			 public static string Status = @"Status";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedDate = @"CreatedDate";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedDate = @"ModifiedDate";
			 public static string Lot = @"Lot";
			 public static string SupplyUnitId = @"SupplyUnit_ID";
			 public static string HasUpdatedPrice = @"hasUpdatedPrice";
			 public static string ReceiptType = @"Receipt_Type";
			 public static string NgayChot = @"NGAY_CHOT";
			 public static string NgayXacnhan = @"NGAY_XACNHAN";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
