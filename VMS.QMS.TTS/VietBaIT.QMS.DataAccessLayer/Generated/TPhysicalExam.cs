using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TPhysicalExam class.
	/// </summary>
    [Serializable]
	public partial class TPhysicalExamCollection : ActiveList<TPhysicalExam, TPhysicalExamCollection>
	{	   
		public TPhysicalExamCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TPhysicalExamCollection</returns>
		public TPhysicalExamCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TPhysicalExam o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Physical_Exam table.
	/// </summary>
	[Serializable]
	public partial class TPhysicalExam : ActiveRecord<TPhysicalExam>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TPhysicalExam()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TPhysicalExam(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TPhysicalExam(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TPhysicalExam(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Physical_Exam", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPhysicalId = new TableSchema.TableColumn(schema);
				colvarPhysicalId.ColumnName = "Physical_ID";
				colvarPhysicalId.DataType = DbType.Int32;
				colvarPhysicalId.MaxLength = 0;
				colvarPhysicalId.AutoIncrement = true;
				colvarPhysicalId.IsNullable = false;
				colvarPhysicalId.IsPrimaryKey = true;
				colvarPhysicalId.IsForeignKey = false;
				colvarPhysicalId.IsReadOnly = false;
				colvarPhysicalId.DefaultSetting = @"";
				colvarPhysicalId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhysicalId);
				
				TableSchema.TableColumn colvarPatientDeptId = new TableSchema.TableColumn(schema);
				colvarPatientDeptId.ColumnName = "PatientDept_ID";
				colvarPatientDeptId.DataType = DbType.Int32;
				colvarPatientDeptId.MaxLength = 0;
				colvarPatientDeptId.AutoIncrement = false;
				colvarPatientDeptId.IsNullable = true;
				colvarPatientDeptId.IsPrimaryKey = false;
				colvarPatientDeptId.IsForeignKey = false;
				colvarPatientDeptId.IsReadOnly = false;
				colvarPatientDeptId.DefaultSetting = @"";
				colvarPatientDeptId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientDeptId);
				
				TableSchema.TableColumn colvarTreatId = new TableSchema.TableColumn(schema);
				colvarTreatId.ColumnName = "Treat_ID";
				colvarTreatId.DataType = DbType.Int32;
				colvarTreatId.MaxLength = 0;
				colvarTreatId.AutoIncrement = false;
				colvarTreatId.IsNullable = true;
				colvarTreatId.IsPrimaryKey = false;
				colvarTreatId.IsForeignKey = false;
				colvarTreatId.IsReadOnly = false;
				colvarTreatId.DefaultSetting = @"";
				colvarTreatId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTreatId);
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "Patient_Code";
				colvarPatientCode.DataType = DbType.AnsiString;
				colvarPatientCode.MaxLength = 20;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = true;
				colvarPatientCode.IsPrimaryKey = false;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int32;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = true;
				colvarPatientId.IsPrimaryKey = false;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarBodyTemp = new TableSchema.TableColumn(schema);
				colvarBodyTemp.ColumnName = "Body_Temp";
				colvarBodyTemp.DataType = DbType.String;
				colvarBodyTemp.MaxLength = 20;
				colvarBodyTemp.AutoIncrement = false;
				colvarBodyTemp.IsNullable = true;
				colvarBodyTemp.IsPrimaryKey = false;
				colvarBodyTemp.IsForeignKey = false;
				colvarBodyTemp.IsReadOnly = false;
				colvarBodyTemp.DefaultSetting = @"";
				colvarBodyTemp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBodyTemp);
				
				TableSchema.TableColumn colvarBloodPressure = new TableSchema.TableColumn(schema);
				colvarBloodPressure.ColumnName = "BloodPressure";
				colvarBloodPressure.DataType = DbType.AnsiString;
				colvarBloodPressure.MaxLength = 50;
				colvarBloodPressure.AutoIncrement = false;
				colvarBloodPressure.IsNullable = true;
				colvarBloodPressure.IsPrimaryKey = false;
				colvarBloodPressure.IsForeignKey = false;
				colvarBloodPressure.IsReadOnly = false;
				colvarBloodPressure.DefaultSetting = @"";
				colvarBloodPressure.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBloodPressure);
				
				TableSchema.TableColumn colvarArtery = new TableSchema.TableColumn(schema);
				colvarArtery.ColumnName = "Artery";
				colvarArtery.DataType = DbType.Int32;
				colvarArtery.MaxLength = 0;
				colvarArtery.AutoIncrement = false;
				colvarArtery.IsNullable = true;
				colvarArtery.IsPrimaryKey = false;
				colvarArtery.IsForeignKey = false;
				colvarArtery.IsReadOnly = false;
				colvarArtery.DefaultSetting = @"";
				colvarArtery.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArtery);
				
				TableSchema.TableColumn colvarBreatheRate = new TableSchema.TableColumn(schema);
				colvarBreatheRate.ColumnName = "Breathe_Rate";
				colvarBreatheRate.DataType = DbType.Int32;
				colvarBreatheRate.MaxLength = 0;
				colvarBreatheRate.AutoIncrement = false;
				colvarBreatheRate.IsNullable = true;
				colvarBreatheRate.IsPrimaryKey = false;
				colvarBreatheRate.IsForeignKey = false;
				colvarBreatheRate.IsReadOnly = false;
				colvarBreatheRate.DefaultSetting = @"";
				colvarBreatheRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBreatheRate);
				
				TableSchema.TableColumn colvarHeight = new TableSchema.TableColumn(schema);
				colvarHeight.ColumnName = "Height";
				colvarHeight.DataType = DbType.AnsiString;
				colvarHeight.MaxLength = 10;
				colvarHeight.AutoIncrement = false;
				colvarHeight.IsNullable = true;
				colvarHeight.IsPrimaryKey = false;
				colvarHeight.IsForeignKey = false;
				colvarHeight.IsReadOnly = false;
				colvarHeight.DefaultSetting = @"";
				colvarHeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHeight);
				
				TableSchema.TableColumn colvarWeight = new TableSchema.TableColumn(schema);
				colvarWeight.ColumnName = "Weight";
				colvarWeight.DataType = DbType.AnsiString;
				colvarWeight.MaxLength = 10;
				colvarWeight.AutoIncrement = false;
				colvarWeight.IsNullable = true;
				colvarWeight.IsPrimaryKey = false;
				colvarWeight.IsForeignKey = false;
				colvarWeight.IsReadOnly = false;
				colvarWeight.DefaultSetting = @"";
				colvarWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeight);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 50;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				TableSchema.TableColumn colvarCreateBy = new TableSchema.TableColumn(schema);
				colvarCreateBy.ColumnName = "Create_By";
				colvarCreateBy.DataType = DbType.String;
				colvarCreateBy.MaxLength = 50;
				colvarCreateBy.AutoIncrement = false;
				colvarCreateBy.IsNullable = true;
				colvarCreateBy.IsPrimaryKey = false;
				colvarCreateBy.IsForeignKey = false;
				colvarCreateBy.IsReadOnly = false;
				colvarCreateBy.DefaultSetting = @"";
				colvarCreateBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateBy);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "Create_Date";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = true;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				colvarCreateDate.DefaultSetting = @"";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				TableSchema.TableColumn colvarModifyBy = new TableSchema.TableColumn(schema);
				colvarModifyBy.ColumnName = "Modify_By";
				colvarModifyBy.DataType = DbType.String;
				colvarModifyBy.MaxLength = 50;
				colvarModifyBy.AutoIncrement = false;
				colvarModifyBy.IsNullable = true;
				colvarModifyBy.IsPrimaryKey = false;
				colvarModifyBy.IsForeignKey = false;
				colvarModifyBy.IsReadOnly = false;
				colvarModifyBy.DefaultSetting = @"";
				colvarModifyBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifyBy);
				
				TableSchema.TableColumn colvarModifyDate = new TableSchema.TableColumn(schema);
				colvarModifyDate.ColumnName = "Modify_Date";
				colvarModifyDate.DataType = DbType.DateTime;
				colvarModifyDate.MaxLength = 0;
				colvarModifyDate.AutoIncrement = false;
				colvarModifyDate.IsNullable = true;
				colvarModifyDate.IsPrimaryKey = false;
				colvarModifyDate.IsForeignKey = false;
				colvarModifyDate.IsReadOnly = false;
				colvarModifyDate.DefaultSetting = @"";
				colvarModifyDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifyDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_Physical_Exam",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PhysicalId")]
		[Bindable(true)]
		public int PhysicalId 
		{
			get { return GetColumnValue<int>(Columns.PhysicalId); }
			set { SetColumnValue(Columns.PhysicalId, value); }
		}
		  
		[XmlAttribute("PatientDeptId")]
		[Bindable(true)]
		public int? PatientDeptId 
		{
			get { return GetColumnValue<int?>(Columns.PatientDeptId); }
			set { SetColumnValue(Columns.PatientDeptId, value); }
		}
		  
		[XmlAttribute("TreatId")]
		[Bindable(true)]
		public int? TreatId 
		{
			get { return GetColumnValue<int?>(Columns.TreatId); }
			set { SetColumnValue(Columns.TreatId, value); }
		}
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public int? PatientId 
		{
			get { return GetColumnValue<int?>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("BodyTemp")]
		[Bindable(true)]
		public string BodyTemp 
		{
			get { return GetColumnValue<string>(Columns.BodyTemp); }
			set { SetColumnValue(Columns.BodyTemp, value); }
		}
		  
		[XmlAttribute("BloodPressure")]
		[Bindable(true)]
		public string BloodPressure 
		{
			get { return GetColumnValue<string>(Columns.BloodPressure); }
			set { SetColumnValue(Columns.BloodPressure, value); }
		}
		  
		[XmlAttribute("Artery")]
		[Bindable(true)]
		public int? Artery 
		{
			get { return GetColumnValue<int?>(Columns.Artery); }
			set { SetColumnValue(Columns.Artery, value); }
		}
		  
		[XmlAttribute("BreatheRate")]
		[Bindable(true)]
		public int? BreatheRate 
		{
			get { return GetColumnValue<int?>(Columns.BreatheRate); }
			set { SetColumnValue(Columns.BreatheRate, value); }
		}
		  
		[XmlAttribute("Height")]
		[Bindable(true)]
		public string Height 
		{
			get { return GetColumnValue<string>(Columns.Height); }
			set { SetColumnValue(Columns.Height, value); }
		}
		  
		[XmlAttribute("Weight")]
		[Bindable(true)]
		public string Weight 
		{
			get { return GetColumnValue<string>(Columns.Weight); }
			set { SetColumnValue(Columns.Weight, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		  
		[XmlAttribute("CreateBy")]
		[Bindable(true)]
		public string CreateBy 
		{
			get { return GetColumnValue<string>(Columns.CreateBy); }
			set { SetColumnValue(Columns.CreateBy, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime? CreateDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		  
		[XmlAttribute("ModifyBy")]
		[Bindable(true)]
		public string ModifyBy 
		{
			get { return GetColumnValue<string>(Columns.ModifyBy); }
			set { SetColumnValue(Columns.ModifyBy, value); }
		}
		  
		[XmlAttribute("ModifyDate")]
		[Bindable(true)]
		public DateTime? ModifyDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifyDate); }
			set { SetColumnValue(Columns.ModifyDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varPatientDeptId,int? varTreatId,string varPatientCode,int? varPatientId,string varBodyTemp,string varBloodPressure,int? varArtery,int? varBreatheRate,string varHeight,string varWeight,string varSDesc,string varCreateBy,DateTime? varCreateDate,string varModifyBy,DateTime? varModifyDate)
		{
			TPhysicalExam item = new TPhysicalExam();
			
			item.PatientDeptId = varPatientDeptId;
			
			item.TreatId = varTreatId;
			
			item.PatientCode = varPatientCode;
			
			item.PatientId = varPatientId;
			
			item.BodyTemp = varBodyTemp;
			
			item.BloodPressure = varBloodPressure;
			
			item.Artery = varArtery;
			
			item.BreatheRate = varBreatheRate;
			
			item.Height = varHeight;
			
			item.Weight = varWeight;
			
			item.SDesc = varSDesc;
			
			item.CreateBy = varCreateBy;
			
			item.CreateDate = varCreateDate;
			
			item.ModifyBy = varModifyBy;
			
			item.ModifyDate = varModifyDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPhysicalId,int? varPatientDeptId,int? varTreatId,string varPatientCode,int? varPatientId,string varBodyTemp,string varBloodPressure,int? varArtery,int? varBreatheRate,string varHeight,string varWeight,string varSDesc,string varCreateBy,DateTime? varCreateDate,string varModifyBy,DateTime? varModifyDate)
		{
			TPhysicalExam item = new TPhysicalExam();
			
				item.PhysicalId = varPhysicalId;
			
				item.PatientDeptId = varPatientDeptId;
			
				item.TreatId = varTreatId;
			
				item.PatientCode = varPatientCode;
			
				item.PatientId = varPatientId;
			
				item.BodyTemp = varBodyTemp;
			
				item.BloodPressure = varBloodPressure;
			
				item.Artery = varArtery;
			
				item.BreatheRate = varBreatheRate;
			
				item.Height = varHeight;
			
				item.Weight = varWeight;
			
				item.SDesc = varSDesc;
			
				item.CreateBy = varCreateBy;
			
				item.CreateDate = varCreateDate;
			
				item.ModifyBy = varModifyBy;
			
				item.ModifyDate = varModifyDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PhysicalIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientDeptIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TreatIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn BodyTempColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn BloodPressureColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ArteryColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn BreatheRateColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn HeightColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn WeightColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateByColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifyByColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifyDateColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PhysicalId = @"Physical_ID";
			 public static string PatientDeptId = @"PatientDept_ID";
			 public static string TreatId = @"Treat_ID";
			 public static string PatientCode = @"Patient_Code";
			 public static string PatientId = @"Patient_ID";
			 public static string BodyTemp = @"Body_Temp";
			 public static string BloodPressure = @"BloodPressure";
			 public static string Artery = @"Artery";
			 public static string BreatheRate = @"Breathe_Rate";
			 public static string Height = @"Height";
			 public static string Weight = @"Weight";
			 public static string SDesc = @"sDesc";
			 public static string CreateBy = @"Create_By";
			 public static string CreateDate = @"Create_Date";
			 public static string ModifyBy = @"Modify_By";
			 public static string ModifyDate = @"Modify_Date";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
