using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
    /// <summary>
    /// Controller class for KYDONG_T_Assign_Info
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class KydongTAssignInfoController
    {
        // Preload our schema..
        KydongTAssignInfo thisSchemaLoad = new KydongTAssignInfo();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public KydongTAssignInfoCollection FetchAll()
        {
            KydongTAssignInfoCollection coll = new KydongTAssignInfoCollection();
            Query qry = new Query(KydongTAssignInfo.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public KydongTAssignInfoCollection FetchByID(object AssignId)
        {
            KydongTAssignInfoCollection coll = new KydongTAssignInfoCollection().Where("Assign_ID", AssignId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public KydongTAssignInfoCollection FetchByQuery(Query qry)
        {
            KydongTAssignInfoCollection coll = new KydongTAssignInfoCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object AssignId)
        {
            return (KydongTAssignInfo.Delete(AssignId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object AssignId)
        {
            return (KydongTAssignInfo.Destroy(AssignId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(long? ExamId,int? TreatId,int? PatientDeptId,string PatientCode,long PatientId,short ServiceId,short ServiceTypeId,DateTime RegDate,short? DiagPerson,short? DepartmentId,decimal DiscountRate,byte DiscountType,decimal OriginPrice,decimal DiscountPrice,DateTime? PaymentDate,byte PaymentStatus,byte? AssignStatus,string CreatedBy,DateTime? CreateDate,string ModifiedBy,DateTime? ModifiedDate,string AssignCode,byte? Actived,byte? PrintId,byte? SendId,string Barcode,int? ObjectTypeId,byte? NoiTru)
	    {
		    KydongTAssignInfo item = new KydongTAssignInfo();
		    
            item.ExamId = ExamId;
            
            item.TreatId = TreatId;
            
            item.PatientDeptId = PatientDeptId;
            
            item.PatientCode = PatientCode;
            
            item.PatientId = PatientId;
            
            item.ServiceId = ServiceId;
            
            item.ServiceTypeId = ServiceTypeId;
            
            item.RegDate = RegDate;
            
            item.DiagPerson = DiagPerson;
            
            item.DepartmentId = DepartmentId;
            
            item.DiscountRate = DiscountRate;
            
            item.DiscountType = DiscountType;
            
            item.OriginPrice = OriginPrice;
            
            item.DiscountPrice = DiscountPrice;
            
            item.PaymentDate = PaymentDate;
            
            item.PaymentStatus = PaymentStatus;
            
            item.AssignStatus = AssignStatus;
            
            item.CreatedBy = CreatedBy;
            
            item.CreateDate = CreateDate;
            
            item.ModifiedBy = ModifiedBy;
            
            item.ModifiedDate = ModifiedDate;
            
            item.AssignCode = AssignCode;
            
            item.Actived = Actived;
            
            item.PrintId = PrintId;
            
            item.SendId = SendId;
            
            item.Barcode = Barcode;
            
            item.ObjectTypeId = ObjectTypeId;
            
            item.NoiTru = NoiTru;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(long AssignId,long? ExamId,int? TreatId,int? PatientDeptId,string PatientCode,long PatientId,short ServiceId,short ServiceTypeId,DateTime RegDate,short? DiagPerson,short? DepartmentId,decimal DiscountRate,byte DiscountType,decimal OriginPrice,decimal DiscountPrice,DateTime? PaymentDate,byte PaymentStatus,byte? AssignStatus,string CreatedBy,DateTime? CreateDate,string ModifiedBy,DateTime? ModifiedDate,string AssignCode,byte? Actived,byte? PrintId,byte? SendId,string Barcode,int? ObjectTypeId,byte? NoiTru)
	    {
		    KydongTAssignInfo item = new KydongTAssignInfo();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.AssignId = AssignId;
				
			item.ExamId = ExamId;
				
			item.TreatId = TreatId;
				
			item.PatientDeptId = PatientDeptId;
				
			item.PatientCode = PatientCode;
				
			item.PatientId = PatientId;
				
			item.ServiceId = ServiceId;
				
			item.ServiceTypeId = ServiceTypeId;
				
			item.RegDate = RegDate;
				
			item.DiagPerson = DiagPerson;
				
			item.DepartmentId = DepartmentId;
				
			item.DiscountRate = DiscountRate;
				
			item.DiscountType = DiscountType;
				
			item.OriginPrice = OriginPrice;
				
			item.DiscountPrice = DiscountPrice;
				
			item.PaymentDate = PaymentDate;
				
			item.PaymentStatus = PaymentStatus;
				
			item.AssignStatus = AssignStatus;
				
			item.CreatedBy = CreatedBy;
				
			item.CreateDate = CreateDate;
				
			item.ModifiedBy = ModifiedBy;
				
			item.ModifiedDate = ModifiedDate;
				
			item.AssignCode = AssignCode;
				
			item.Actived = Actived;
				
			item.PrintId = PrintId;
				
			item.SendId = SendId;
				
			item.Barcode = Barcode;
				
			item.ObjectTypeId = ObjectTypeId;
				
			item.NoiTru = NoiTru;
				
	        item.Save(UserName);
	    }
    }
}
