using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TDeliverDrug class.
	/// </summary>
    [Serializable]
	public partial class TDeliverDrugCollection : ActiveList<TDeliverDrug, TDeliverDrugCollection>
	{	   
		public TDeliverDrugCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TDeliverDrugCollection</returns>
		public TDeliverDrugCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TDeliverDrug o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_DeliverDrug table.
	/// </summary>
	[Serializable]
	public partial class TDeliverDrug : ActiveRecord<TDeliverDrug>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TDeliverDrug()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TDeliverDrug(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TDeliverDrug(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TDeliverDrug(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_DeliverDrug", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int64;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarInputDate = new TableSchema.TableColumn(schema);
				colvarInputDate.ColumnName = "Input_Date";
				colvarInputDate.DataType = DbType.DateTime;
				colvarInputDate.MaxLength = 0;
				colvarInputDate.AutoIncrement = false;
				colvarInputDate.IsNullable = false;
				colvarInputDate.IsPrimaryKey = false;
				colvarInputDate.IsForeignKey = false;
				colvarInputDate.IsReadOnly = false;
				colvarInputDate.DefaultSetting = @"";
				colvarInputDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInputDate);
				
				TableSchema.TableColumn colvarInputUserId = new TableSchema.TableColumn(schema);
				colvarInputUserId.ColumnName = "InputUser_ID";
				colvarInputUserId.DataType = DbType.Int16;
				colvarInputUserId.MaxLength = 0;
				colvarInputUserId.AutoIncrement = false;
				colvarInputUserId.IsNullable = false;
				colvarInputUserId.IsPrimaryKey = false;
				colvarInputUserId.IsForeignKey = false;
				colvarInputUserId.IsReadOnly = false;
				colvarInputUserId.DefaultSetting = @"";
				colvarInputUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInputUserId);
				
				TableSchema.TableColumn colvarDeliverUserId = new TableSchema.TableColumn(schema);
				colvarDeliverUserId.ColumnName = "DeliverUser_ID";
				colvarDeliverUserId.DataType = DbType.Int16;
				colvarDeliverUserId.MaxLength = 0;
				colvarDeliverUserId.AutoIncrement = false;
				colvarDeliverUserId.IsNullable = false;
				colvarDeliverUserId.IsPrimaryKey = false;
				colvarDeliverUserId.IsForeignKey = false;
				colvarDeliverUserId.IsReadOnly = false;
				colvarDeliverUserId.DefaultSetting = @"";
				colvarDeliverUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeliverUserId);
				
				TableSchema.TableColumn colvarPresId = new TableSchema.TableColumn(schema);
				colvarPresId.ColumnName = "Pres_ID";
				colvarPresId.DataType = DbType.Int32;
				colvarPresId.MaxLength = 0;
				colvarPresId.AutoIncrement = false;
				colvarPresId.IsNullable = true;
				colvarPresId.IsPrimaryKey = false;
				colvarPresId.IsForeignKey = false;
				colvarPresId.IsReadOnly = false;
				colvarPresId.DefaultSetting = @"";
				colvarPresId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPresId);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 255;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_DeliverDrug",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public long Id 
		{
			get { return GetColumnValue<long>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("InputDate")]
		[Bindable(true)]
		public DateTime InputDate 
		{
			get { return GetColumnValue<DateTime>(Columns.InputDate); }
			set { SetColumnValue(Columns.InputDate, value); }
		}
		  
		[XmlAttribute("InputUserId")]
		[Bindable(true)]
		public short InputUserId 
		{
			get { return GetColumnValue<short>(Columns.InputUserId); }
			set { SetColumnValue(Columns.InputUserId, value); }
		}
		  
		[XmlAttribute("DeliverUserId")]
		[Bindable(true)]
		public short DeliverUserId 
		{
			get { return GetColumnValue<short>(Columns.DeliverUserId); }
			set { SetColumnValue(Columns.DeliverUserId, value); }
		}
		  
		[XmlAttribute("PresId")]
		[Bindable(true)]
		public int? PresId 
		{
			get { return GetColumnValue<int?>(Columns.PresId); }
			set { SetColumnValue(Columns.PresId, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varId,DateTime varInputDate,short varInputUserId,short varDeliverUserId,int? varPresId,string varSDesc)
		{
			TDeliverDrug item = new TDeliverDrug();
			
			item.Id = varId;
			
			item.InputDate = varInputDate;
			
			item.InputUserId = varInputUserId;
			
			item.DeliverUserId = varDeliverUserId;
			
			item.PresId = varPresId;
			
			item.SDesc = varSDesc;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varId,DateTime varInputDate,short varInputUserId,short varDeliverUserId,int? varPresId,string varSDesc)
		{
			TDeliverDrug item = new TDeliverDrug();
			
				item.Id = varId;
			
				item.InputDate = varInputDate;
			
				item.InputUserId = varInputUserId;
			
				item.DeliverUserId = varDeliverUserId;
			
				item.PresId = varPresId;
			
				item.SDesc = varSDesc;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn InputDateColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn InputUserIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DeliverUserIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PresIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string InputDate = @"Input_Date";
			 public static string InputUserId = @"InputUser_ID";
			 public static string DeliverUserId = @"DeliverUser_ID";
			 public static string PresId = @"Pres_ID";
			 public static string SDesc = @"sDesc";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
