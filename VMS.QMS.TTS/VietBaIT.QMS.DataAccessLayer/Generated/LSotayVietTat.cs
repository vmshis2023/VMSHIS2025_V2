using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LSotayVietTat class.
	/// </summary>
    [Serializable]
	public partial class LSotayVietTatCollection : ActiveList<LSotayVietTat, LSotayVietTatCollection>
	{	   
		public LSotayVietTatCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LSotayVietTatCollection</returns>
		public LSotayVietTatCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LSotayVietTat o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_SOTAY_VIET_TAT table.
	/// </summary>
	[Serializable]
	public partial class LSotayVietTat : ActiveRecord<LSotayVietTat>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LSotayVietTat()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LSotayVietTat(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LSotayVietTat(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LSotayVietTat(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_SOTAY_VIET_TAT", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarTenVietTat = new TableSchema.TableColumn(schema);
				colvarTenVietTat.ColumnName = "TEN_VIET_TAT";
				colvarTenVietTat.DataType = DbType.String;
				colvarTenVietTat.MaxLength = 200;
				colvarTenVietTat.AutoIncrement = false;
				colvarTenVietTat.IsNullable = true;
				colvarTenVietTat.IsPrimaryKey = false;
				colvarTenVietTat.IsForeignKey = false;
				colvarTenVietTat.IsReadOnly = false;
				colvarTenVietTat.DefaultSetting = @"";
				colvarTenVietTat.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenVietTat);
				
				TableSchema.TableColumn colvarTenViet = new TableSchema.TableColumn(schema);
				colvarTenViet.ColumnName = "TEN_VIET";
				colvarTenViet.DataType = DbType.String;
				colvarTenViet.MaxLength = 200;
				colvarTenViet.AutoIncrement = false;
				colvarTenViet.IsNullable = true;
				colvarTenViet.IsPrimaryKey = false;
				colvarTenViet.IsForeignKey = false;
				colvarTenViet.IsReadOnly = false;
				colvarTenViet.DefaultSetting = @"";
				colvarTenViet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenViet);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "NGUOI_TAO";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 50;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NGAY_TAO";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				
						colvarNgayTao.DefaultSetting = @"(getdate())";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarKeyCode = new TableSchema.TableColumn(schema);
				colvarKeyCode.ColumnName = "KEY_CODE";
				colvarKeyCode.DataType = DbType.String;
				colvarKeyCode.MaxLength = 50;
				colvarKeyCode.AutoIncrement = false;
				colvarKeyCode.IsNullable = true;
				colvarKeyCode.IsPrimaryKey = false;
				colvarKeyCode.IsForeignKey = false;
				colvarKeyCode.IsReadOnly = false;
				colvarKeyCode.DefaultSetting = @"";
				colvarKeyCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKeyCode);
				
				TableSchema.TableColumn colvarIcdChinh = new TableSchema.TableColumn(schema);
				colvarIcdChinh.ColumnName = "ICD_CHINH";
				colvarIcdChinh.DataType = DbType.String;
				colvarIcdChinh.MaxLength = 10;
				colvarIcdChinh.AutoIncrement = false;
				colvarIcdChinh.IsNullable = true;
				colvarIcdChinh.IsPrimaryKey = false;
				colvarIcdChinh.IsForeignKey = false;
				colvarIcdChinh.IsReadOnly = false;
				colvarIcdChinh.DefaultSetting = @"";
				colvarIcdChinh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIcdChinh);
				
				TableSchema.TableColumn colvarIcdPhu = new TableSchema.TableColumn(schema);
				colvarIcdPhu.ColumnName = "ICD_PHU";
				colvarIcdPhu.DataType = DbType.String;
				colvarIcdPhu.MaxLength = 10;
				colvarIcdPhu.AutoIncrement = false;
				colvarIcdPhu.IsNullable = true;
				colvarIcdPhu.IsPrimaryKey = false;
				colvarIcdPhu.IsForeignKey = false;
				colvarIcdPhu.IsReadOnly = false;
				colvarIcdPhu.DefaultSetting = @"";
				colvarIcdPhu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIcdPhu);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_SOTAY_VIET_TAT",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("TenVietTat")]
		[Bindable(true)]
		public string TenVietTat 
		{
			get { return GetColumnValue<string>(Columns.TenVietTat); }
			set { SetColumnValue(Columns.TenVietTat, value); }
		}
		  
		[XmlAttribute("TenViet")]
		[Bindable(true)]
		public string TenViet 
		{
			get { return GetColumnValue<string>(Columns.TenViet); }
			set { SetColumnValue(Columns.TenViet, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("KeyCode")]
		[Bindable(true)]
		public string KeyCode 
		{
			get { return GetColumnValue<string>(Columns.KeyCode); }
			set { SetColumnValue(Columns.KeyCode, value); }
		}
		  
		[XmlAttribute("IcdChinh")]
		[Bindable(true)]
		public string IcdChinh 
		{
			get { return GetColumnValue<string>(Columns.IcdChinh); }
			set { SetColumnValue(Columns.IcdChinh, value); }
		}
		  
		[XmlAttribute("IcdPhu")]
		[Bindable(true)]
		public string IcdPhu 
		{
			get { return GetColumnValue<string>(Columns.IcdPhu); }
			set { SetColumnValue(Columns.IcdPhu, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varTenVietTat,string varTenViet,string varNguoiTao,DateTime? varNgayTao,string varKeyCode,string varIcdChinh,string varIcdPhu)
		{
			LSotayVietTat item = new LSotayVietTat();
			
			item.TenVietTat = varTenVietTat;
			
			item.TenViet = varTenViet;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayTao = varNgayTao;
			
			item.KeyCode = varKeyCode;
			
			item.IcdChinh = varIcdChinh;
			
			item.IcdPhu = varIcdPhu;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varTenVietTat,string varTenViet,string varNguoiTao,DateTime? varNgayTao,string varKeyCode,string varIcdChinh,string varIcdPhu)
		{
			LSotayVietTat item = new LSotayVietTat();
			
				item.Id = varId;
			
				item.TenVietTat = varTenVietTat;
			
				item.TenViet = varTenViet;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayTao = varNgayTao;
			
				item.KeyCode = varKeyCode;
			
				item.IcdChinh = varIcdChinh;
			
				item.IcdPhu = varIcdPhu;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TenVietTatColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenVietColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn KeyCodeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IcdChinhColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IcdPhuColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string TenVietTat = @"TEN_VIET_TAT";
			 public static string TenViet = @"TEN_VIET";
			 public static string NguoiTao = @"NGUOI_TAO";
			 public static string NgayTao = @"NGAY_TAO";
			 public static string KeyCode = @"KEY_CODE";
			 public static string IcdChinh = @"ICD_CHINH";
			 public static string IcdPhu = @"ICD_PHU";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
