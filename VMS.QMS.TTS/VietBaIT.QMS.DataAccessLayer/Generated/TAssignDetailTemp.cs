using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TAssignDetailTemp class.
	/// </summary>
    [Serializable]
	public partial class TAssignDetailTempCollection : ActiveList<TAssignDetailTemp, TAssignDetailTempCollection>
	{	   
		public TAssignDetailTempCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TAssignDetailTempCollection</returns>
		public TAssignDetailTempCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TAssignDetailTemp o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Assign_Detail_Temp table.
	/// </summary>
	[Serializable]
	public partial class TAssignDetailTemp : ActiveRecord<TAssignDetailTemp>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TAssignDetailTemp()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TAssignDetailTemp(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TAssignDetailTemp(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TAssignDetailTemp(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Assign_Detail_Temp", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarAssignDetailId = new TableSchema.TableColumn(schema);
				colvarAssignDetailId.ColumnName = "AssignDetail_ID";
				colvarAssignDetailId.DataType = DbType.Int64;
				colvarAssignDetailId.MaxLength = 0;
				colvarAssignDetailId.AutoIncrement = false;
				colvarAssignDetailId.IsNullable = false;
				colvarAssignDetailId.IsPrimaryKey = true;
				colvarAssignDetailId.IsForeignKey = false;
				colvarAssignDetailId.IsReadOnly = false;
				colvarAssignDetailId.DefaultSetting = @"";
				colvarAssignDetailId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAssignDetailId);
				
				TableSchema.TableColumn colvarExamId = new TableSchema.TableColumn(schema);
				colvarExamId.ColumnName = "Exam_ID";
				colvarExamId.DataType = DbType.Int64;
				colvarExamId.MaxLength = 0;
				colvarExamId.AutoIncrement = false;
				colvarExamId.IsNullable = true;
				colvarExamId.IsPrimaryKey = false;
				colvarExamId.IsForeignKey = false;
				colvarExamId.IsReadOnly = false;
				colvarExamId.DefaultSetting = @"";
				colvarExamId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExamId);
				
				TableSchema.TableColumn colvarAssignId = new TableSchema.TableColumn(schema);
				colvarAssignId.ColumnName = "Assign_ID";
				colvarAssignId.DataType = DbType.Int64;
				colvarAssignId.MaxLength = 0;
				colvarAssignId.AutoIncrement = false;
				colvarAssignId.IsNullable = false;
				colvarAssignId.IsPrimaryKey = false;
				colvarAssignId.IsForeignKey = false;
				colvarAssignId.IsReadOnly = false;
				colvarAssignId.DefaultSetting = @"";
				colvarAssignId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAssignId);
				
				TableSchema.TableColumn colvarServiceId = new TableSchema.TableColumn(schema);
				colvarServiceId.ColumnName = "Service_ID";
				colvarServiceId.DataType = DbType.Int16;
				colvarServiceId.MaxLength = 0;
				colvarServiceId.AutoIncrement = false;
				colvarServiceId.IsNullable = true;
				colvarServiceId.IsPrimaryKey = false;
				colvarServiceId.IsForeignKey = false;
				colvarServiceId.IsReadOnly = false;
				colvarServiceId.DefaultSetting = @"";
				colvarServiceId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceId);
				
				TableSchema.TableColumn colvarServiceDetailId = new TableSchema.TableColumn(schema);
				colvarServiceDetailId.ColumnName = "ServiceDetail_ID";
				colvarServiceDetailId.DataType = DbType.Int32;
				colvarServiceDetailId.MaxLength = 0;
				colvarServiceDetailId.AutoIncrement = false;
				colvarServiceDetailId.IsNullable = false;
				colvarServiceDetailId.IsPrimaryKey = false;
				colvarServiceDetailId.IsForeignKey = false;
				colvarServiceDetailId.IsReadOnly = false;
				colvarServiceDetailId.DefaultSetting = @"";
				colvarServiceDetailId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceDetailId);
				
				TableSchema.TableColumn colvarDiagPerson = new TableSchema.TableColumn(schema);
				colvarDiagPerson.ColumnName = "Diag_Person";
				colvarDiagPerson.DataType = DbType.Int16;
				colvarDiagPerson.MaxLength = 0;
				colvarDiagPerson.AutoIncrement = false;
				colvarDiagPerson.IsNullable = true;
				colvarDiagPerson.IsPrimaryKey = false;
				colvarDiagPerson.IsForeignKey = false;
				colvarDiagPerson.IsReadOnly = false;
				colvarDiagPerson.DefaultSetting = @"";
				colvarDiagPerson.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiagPerson);
				
				TableSchema.TableColumn colvarDiscountPrice = new TableSchema.TableColumn(schema);
				colvarDiscountPrice.ColumnName = "Discount_Price";
				colvarDiscountPrice.DataType = DbType.Currency;
				colvarDiscountPrice.MaxLength = 0;
				colvarDiscountPrice.AutoIncrement = false;
				colvarDiscountPrice.IsNullable = true;
				colvarDiscountPrice.IsPrimaryKey = false;
				colvarDiscountPrice.IsForeignKey = false;
				colvarDiscountPrice.IsReadOnly = false;
				colvarDiscountPrice.DefaultSetting = @"";
				colvarDiscountPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiscountPrice);
				
				TableSchema.TableColumn colvarSurchargePrice = new TableSchema.TableColumn(schema);
				colvarSurchargePrice.ColumnName = "Surcharge_Price";
				colvarSurchargePrice.DataType = DbType.Currency;
				colvarSurchargePrice.MaxLength = 0;
				colvarSurchargePrice.AutoIncrement = false;
				colvarSurchargePrice.IsNullable = true;
				colvarSurchargePrice.IsPrimaryKey = false;
				colvarSurchargePrice.IsForeignKey = false;
				colvarSurchargePrice.IsReadOnly = false;
				colvarSurchargePrice.DefaultSetting = @"";
				colvarSurchargePrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurchargePrice);
				
				TableSchema.TableColumn colvarUserId = new TableSchema.TableColumn(schema);
				colvarUserId.ColumnName = "User_ID";
				colvarUserId.DataType = DbType.AnsiString;
				colvarUserId.MaxLength = 20;
				colvarUserId.AutoIncrement = false;
				colvarUserId.IsNullable = true;
				colvarUserId.IsPrimaryKey = false;
				colvarUserId.IsForeignKey = false;
				colvarUserId.IsReadOnly = false;
				colvarUserId.DefaultSetting = @"";
				colvarUserId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserId);
				
				TableSchema.TableColumn colvarPaymentStatus = new TableSchema.TableColumn(schema);
				colvarPaymentStatus.ColumnName = "Payment_Status";
				colvarPaymentStatus.DataType = DbType.Byte;
				colvarPaymentStatus.MaxLength = 0;
				colvarPaymentStatus.AutoIncrement = false;
				colvarPaymentStatus.IsNullable = true;
				colvarPaymentStatus.IsPrimaryKey = false;
				colvarPaymentStatus.IsForeignKey = false;
				colvarPaymentStatus.IsReadOnly = false;
				colvarPaymentStatus.DefaultSetting = @"";
				colvarPaymentStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPaymentStatus);
				
				TableSchema.TableColumn colvarIsPayment = new TableSchema.TableColumn(schema);
				colvarIsPayment.ColumnName = "IsPayment";
				colvarIsPayment.DataType = DbType.Byte;
				colvarIsPayment.MaxLength = 0;
				colvarIsPayment.AutoIncrement = false;
				colvarIsPayment.IsNullable = true;
				colvarIsPayment.IsPrimaryKey = false;
				colvarIsPayment.IsForeignKey = false;
				colvarIsPayment.IsReadOnly = false;
				colvarIsPayment.DefaultSetting = @"";
				colvarIsPayment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsPayment);
				
				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = true;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				colvarQuantity.DefaultSetting = @"";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);
				
				TableSchema.TableColumn colvarGiaBhytCt = new TableSchema.TableColumn(schema);
				colvarGiaBhytCt.ColumnName = "Gia_BHYT_CT";
				colvarGiaBhytCt.DataType = DbType.Decimal;
				colvarGiaBhytCt.MaxLength = 0;
				colvarGiaBhytCt.AutoIncrement = false;
				colvarGiaBhytCt.IsNullable = true;
				colvarGiaBhytCt.IsPrimaryKey = false;
				colvarGiaBhytCt.IsForeignKey = false;
				colvarGiaBhytCt.IsReadOnly = false;
				colvarGiaBhytCt.DefaultSetting = @"";
				colvarGiaBhytCt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGiaBhytCt);
				
				TableSchema.TableColumn colvarGiaBnct = new TableSchema.TableColumn(schema);
				colvarGiaBnct.ColumnName = "Gia_BNCT";
				colvarGiaBnct.DataType = DbType.Decimal;
				colvarGiaBnct.MaxLength = 0;
				colvarGiaBnct.AutoIncrement = false;
				colvarGiaBnct.IsNullable = true;
				colvarGiaBnct.IsPrimaryKey = false;
				colvarGiaBnct.IsForeignKey = false;
				colvarGiaBnct.IsReadOnly = false;
				colvarGiaBnct.DefaultSetting = @"";
				colvarGiaBnct.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGiaBnct);
				
				TableSchema.TableColumn colvarChoPhepIn = new TableSchema.TableColumn(schema);
				colvarChoPhepIn.ColumnName = "CHO_PHEP_IN";
				colvarChoPhepIn.DataType = DbType.Byte;
				colvarChoPhepIn.MaxLength = 0;
				colvarChoPhepIn.AutoIncrement = false;
				colvarChoPhepIn.IsNullable = true;
				colvarChoPhepIn.IsPrimaryKey = false;
				colvarChoPhepIn.IsForeignKey = false;
				colvarChoPhepIn.IsReadOnly = false;
				colvarChoPhepIn.DefaultSetting = @"";
				colvarChoPhepIn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChoPhepIn);
				
				TableSchema.TableColumn colvarStt = new TableSchema.TableColumn(schema);
				colvarStt.ColumnName = "STT";
				colvarStt.DataType = DbType.Int16;
				colvarStt.MaxLength = 0;
				colvarStt.AutoIncrement = false;
				colvarStt.IsNullable = true;
				colvarStt.IsPrimaryKey = false;
				colvarStt.IsForeignKey = false;
				colvarStt.IsReadOnly = false;
				colvarStt.DefaultSetting = @"";
				colvarStt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStt);
				
				TableSchema.TableColumn colvarIdNoiThien = new TableSchema.TableColumn(schema);
				colvarIdNoiThien.ColumnName = "ID_NOI_THIEN";
				colvarIdNoiThien.DataType = DbType.Int16;
				colvarIdNoiThien.MaxLength = 0;
				colvarIdNoiThien.AutoIncrement = false;
				colvarIdNoiThien.IsNullable = true;
				colvarIdNoiThien.IsPrimaryKey = false;
				colvarIdNoiThien.IsForeignKey = false;
				colvarIdNoiThien.IsReadOnly = false;
				colvarIdNoiThien.DefaultSetting = @"";
				colvarIdNoiThien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdNoiThien);
				
				TableSchema.TableColumn colvarDaGuiCls = new TableSchema.TableColumn(schema);
				colvarDaGuiCls.ColumnName = "DA_GUI_CLS";
				colvarDaGuiCls.DataType = DbType.Byte;
				colvarDaGuiCls.MaxLength = 0;
				colvarDaGuiCls.AutoIncrement = false;
				colvarDaGuiCls.IsNullable = true;
				colvarDaGuiCls.IsPrimaryKey = false;
				colvarDaGuiCls.IsForeignKey = false;
				colvarDaGuiCls.IsReadOnly = false;
				colvarDaGuiCls.DefaultSetting = @"";
				colvarDaGuiCls.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDaGuiCls);
				
				TableSchema.TableColumn colvarGhiChu = new TableSchema.TableColumn(schema);
				colvarGhiChu.ColumnName = "Ghi_Chu";
				colvarGhiChu.DataType = DbType.String;
				colvarGhiChu.MaxLength = 255;
				colvarGhiChu.AutoIncrement = false;
				colvarGhiChu.IsNullable = true;
				colvarGhiChu.IsPrimaryKey = false;
				colvarGhiChu.IsForeignKey = false;
				colvarGhiChu.IsReadOnly = false;
				colvarGhiChu.DefaultSetting = @"";
				colvarGhiChu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGhiChu);
				
				TableSchema.TableColumn colvarInputDate = new TableSchema.TableColumn(schema);
				colvarInputDate.ColumnName = "Input_Date";
				colvarInputDate.DataType = DbType.DateTime;
				colvarInputDate.MaxLength = 0;
				colvarInputDate.AutoIncrement = false;
				colvarInputDate.IsNullable = true;
				colvarInputDate.IsPrimaryKey = false;
				colvarInputDate.IsForeignKey = false;
				colvarInputDate.IsReadOnly = false;
				colvarInputDate.DefaultSetting = @"";
				colvarInputDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInputDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_Assign_Detail_Temp",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("AssignDetailId")]
		[Bindable(true)]
		public long AssignDetailId 
		{
			get { return GetColumnValue<long>(Columns.AssignDetailId); }
			set { SetColumnValue(Columns.AssignDetailId, value); }
		}
		  
		[XmlAttribute("ExamId")]
		[Bindable(true)]
		public long? ExamId 
		{
			get { return GetColumnValue<long?>(Columns.ExamId); }
			set { SetColumnValue(Columns.ExamId, value); }
		}
		  
		[XmlAttribute("AssignId")]
		[Bindable(true)]
		public long AssignId 
		{
			get { return GetColumnValue<long>(Columns.AssignId); }
			set { SetColumnValue(Columns.AssignId, value); }
		}
		  
		[XmlAttribute("ServiceId")]
		[Bindable(true)]
		public short? ServiceId 
		{
			get { return GetColumnValue<short?>(Columns.ServiceId); }
			set { SetColumnValue(Columns.ServiceId, value); }
		}
		  
		[XmlAttribute("ServiceDetailId")]
		[Bindable(true)]
		public int ServiceDetailId 
		{
			get { return GetColumnValue<int>(Columns.ServiceDetailId); }
			set { SetColumnValue(Columns.ServiceDetailId, value); }
		}
		  
		[XmlAttribute("DiagPerson")]
		[Bindable(true)]
		public short? DiagPerson 
		{
			get { return GetColumnValue<short?>(Columns.DiagPerson); }
			set { SetColumnValue(Columns.DiagPerson, value); }
		}
		  
		[XmlAttribute("DiscountPrice")]
		[Bindable(true)]
		public decimal? DiscountPrice 
		{
			get { return GetColumnValue<decimal?>(Columns.DiscountPrice); }
			set { SetColumnValue(Columns.DiscountPrice, value); }
		}
		  
		[XmlAttribute("SurchargePrice")]
		[Bindable(true)]
		public decimal? SurchargePrice 
		{
			get { return GetColumnValue<decimal?>(Columns.SurchargePrice); }
			set { SetColumnValue(Columns.SurchargePrice, value); }
		}
		  
		[XmlAttribute("UserId")]
		[Bindable(true)]
		public string UserId 
		{
			get { return GetColumnValue<string>(Columns.UserId); }
			set { SetColumnValue(Columns.UserId, value); }
		}
		  
		[XmlAttribute("PaymentStatus")]
		[Bindable(true)]
		public byte? PaymentStatus 
		{
			get { return GetColumnValue<byte?>(Columns.PaymentStatus); }
			set { SetColumnValue(Columns.PaymentStatus, value); }
		}
		  
		[XmlAttribute("IsPayment")]
		[Bindable(true)]
		public byte? IsPayment 
		{
			get { return GetColumnValue<byte?>(Columns.IsPayment); }
			set { SetColumnValue(Columns.IsPayment, value); }
		}
		  
		[XmlAttribute("Quantity")]
		[Bindable(true)]
		public int? Quantity 
		{
			get { return GetColumnValue<int?>(Columns.Quantity); }
			set { SetColumnValue(Columns.Quantity, value); }
		}
		  
		[XmlAttribute("GiaBhytCt")]
		[Bindable(true)]
		public decimal? GiaBhytCt 
		{
			get { return GetColumnValue<decimal?>(Columns.GiaBhytCt); }
			set { SetColumnValue(Columns.GiaBhytCt, value); }
		}
		  
		[XmlAttribute("GiaBnct")]
		[Bindable(true)]
		public decimal? GiaBnct 
		{
			get { return GetColumnValue<decimal?>(Columns.GiaBnct); }
			set { SetColumnValue(Columns.GiaBnct, value); }
		}
		  
		[XmlAttribute("ChoPhepIn")]
		[Bindable(true)]
		public byte? ChoPhepIn 
		{
			get { return GetColumnValue<byte?>(Columns.ChoPhepIn); }
			set { SetColumnValue(Columns.ChoPhepIn, value); }
		}
		  
		[XmlAttribute("Stt")]
		[Bindable(true)]
		public short? Stt 
		{
			get { return GetColumnValue<short?>(Columns.Stt); }
			set { SetColumnValue(Columns.Stt, value); }
		}
		  
		[XmlAttribute("IdNoiThien")]
		[Bindable(true)]
		public short? IdNoiThien 
		{
			get { return GetColumnValue<short?>(Columns.IdNoiThien); }
			set { SetColumnValue(Columns.IdNoiThien, value); }
		}
		  
		[XmlAttribute("DaGuiCls")]
		[Bindable(true)]
		public byte? DaGuiCls 
		{
			get { return GetColumnValue<byte?>(Columns.DaGuiCls); }
			set { SetColumnValue(Columns.DaGuiCls, value); }
		}
		  
		[XmlAttribute("GhiChu")]
		[Bindable(true)]
		public string GhiChu 
		{
			get { return GetColumnValue<string>(Columns.GhiChu); }
			set { SetColumnValue(Columns.GhiChu, value); }
		}
		  
		[XmlAttribute("InputDate")]
		[Bindable(true)]
		public DateTime? InputDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.InputDate); }
			set { SetColumnValue(Columns.InputDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varAssignDetailId,long? varExamId,long varAssignId,short? varServiceId,int varServiceDetailId,short? varDiagPerson,decimal? varDiscountPrice,decimal? varSurchargePrice,string varUserId,byte? varPaymentStatus,byte? varIsPayment,int? varQuantity,decimal? varGiaBhytCt,decimal? varGiaBnct,byte? varChoPhepIn,short? varStt,short? varIdNoiThien,byte? varDaGuiCls,string varGhiChu,DateTime? varInputDate)
		{
			TAssignDetailTemp item = new TAssignDetailTemp();
			
			item.AssignDetailId = varAssignDetailId;
			
			item.ExamId = varExamId;
			
			item.AssignId = varAssignId;
			
			item.ServiceId = varServiceId;
			
			item.ServiceDetailId = varServiceDetailId;
			
			item.DiagPerson = varDiagPerson;
			
			item.DiscountPrice = varDiscountPrice;
			
			item.SurchargePrice = varSurchargePrice;
			
			item.UserId = varUserId;
			
			item.PaymentStatus = varPaymentStatus;
			
			item.IsPayment = varIsPayment;
			
			item.Quantity = varQuantity;
			
			item.GiaBhytCt = varGiaBhytCt;
			
			item.GiaBnct = varGiaBnct;
			
			item.ChoPhepIn = varChoPhepIn;
			
			item.Stt = varStt;
			
			item.IdNoiThien = varIdNoiThien;
			
			item.DaGuiCls = varDaGuiCls;
			
			item.GhiChu = varGhiChu;
			
			item.InputDate = varInputDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varAssignDetailId,long? varExamId,long varAssignId,short? varServiceId,int varServiceDetailId,short? varDiagPerson,decimal? varDiscountPrice,decimal? varSurchargePrice,string varUserId,byte? varPaymentStatus,byte? varIsPayment,int? varQuantity,decimal? varGiaBhytCt,decimal? varGiaBnct,byte? varChoPhepIn,short? varStt,short? varIdNoiThien,byte? varDaGuiCls,string varGhiChu,DateTime? varInputDate)
		{
			TAssignDetailTemp item = new TAssignDetailTemp();
			
				item.AssignDetailId = varAssignDetailId;
			
				item.ExamId = varExamId;
			
				item.AssignId = varAssignId;
			
				item.ServiceId = varServiceId;
			
				item.ServiceDetailId = varServiceDetailId;
			
				item.DiagPerson = varDiagPerson;
			
				item.DiscountPrice = varDiscountPrice;
			
				item.SurchargePrice = varSurchargePrice;
			
				item.UserId = varUserId;
			
				item.PaymentStatus = varPaymentStatus;
			
				item.IsPayment = varIsPayment;
			
				item.Quantity = varQuantity;
			
				item.GiaBhytCt = varGiaBhytCt;
			
				item.GiaBnct = varGiaBnct;
			
				item.ChoPhepIn = varChoPhepIn;
			
				item.Stt = varStt;
			
				item.IdNoiThien = varIdNoiThien;
			
				item.DaGuiCls = varDaGuiCls;
			
				item.GhiChu = varGhiChu;
			
				item.InputDate = varInputDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn AssignDetailIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ExamIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn AssignIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceDetailIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DiagPersonColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DiscountPriceColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SurchargePriceColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn UserIdColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PaymentStatusColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn IsPaymentColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn QuantityColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn GiaBhytCtColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn GiaBnctColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ChoPhepInColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn SttColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn IdNoiThienColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn DaGuiClsColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn GhiChuColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn InputDateColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string AssignDetailId = @"AssignDetail_ID";
			 public static string ExamId = @"Exam_ID";
			 public static string AssignId = @"Assign_ID";
			 public static string ServiceId = @"Service_ID";
			 public static string ServiceDetailId = @"ServiceDetail_ID";
			 public static string DiagPerson = @"Diag_Person";
			 public static string DiscountPrice = @"Discount_Price";
			 public static string SurchargePrice = @"Surcharge_Price";
			 public static string UserId = @"User_ID";
			 public static string PaymentStatus = @"Payment_Status";
			 public static string IsPayment = @"IsPayment";
			 public static string Quantity = @"Quantity";
			 public static string GiaBhytCt = @"Gia_BHYT_CT";
			 public static string GiaBnct = @"Gia_BNCT";
			 public static string ChoPhepIn = @"CHO_PHEP_IN";
			 public static string Stt = @"STT";
			 public static string IdNoiThien = @"ID_NOI_THIEN";
			 public static string DaGuiCls = @"DA_GUI_CLS";
			 public static string GhiChu = @"Ghi_Chu";
			 public static string InputDate = @"Input_Date";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
