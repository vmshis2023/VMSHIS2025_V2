using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the QmsCanLamSang class.
	/// </summary>
    [Serializable]
	public partial class QmsCanLamSangCollection : ActiveList<QmsCanLamSang, QmsCanLamSangCollection>
	{	   
		public QmsCanLamSangCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>QmsCanLamSangCollection</returns>
		public QmsCanLamSangCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                QmsCanLamSang o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the QMS_CanLamSang table.
	/// </summary>
	[Serializable]
	public partial class QmsCanLamSang : ActiveRecord<QmsCanLamSang>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public QmsCanLamSang()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public QmsCanLamSang(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public QmsCanLamSang(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public QmsCanLamSang(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QMS_CanLamSang", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarMaPhong = new TableSchema.TableColumn(schema);
				colvarMaPhong.ColumnName = "Ma_Phong";
				colvarMaPhong.DataType = DbType.String;
				colvarMaPhong.MaxLength = 10;
				colvarMaPhong.AutoIncrement = false;
				colvarMaPhong.IsNullable = false;
				colvarMaPhong.IsPrimaryKey = false;
				colvarMaPhong.IsForeignKey = false;
				colvarMaPhong.IsReadOnly = false;
				colvarMaPhong.DefaultSetting = @"";
				colvarMaPhong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaPhong);
				
				TableSchema.TableColumn colvarSoKham = new TableSchema.TableColumn(schema);
				colvarSoKham.ColumnName = "So_Kham";
				colvarSoKham.DataType = DbType.Int32;
				colvarSoKham.MaxLength = 0;
				colvarSoKham.AutoIncrement = false;
				colvarSoKham.IsNullable = false;
				colvarSoKham.IsPrimaryKey = false;
				colvarSoKham.IsForeignKey = false;
				colvarSoKham.IsReadOnly = false;
				colvarSoKham.DefaultSetting = @"";
				colvarSoKham.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoKham);
				
				TableSchema.TableColumn colvarTenBn = new TableSchema.TableColumn(schema);
				colvarTenBn.ColumnName = "Ten_BN";
				colvarTenBn.DataType = DbType.String;
				colvarTenBn.MaxLength = 100;
				colvarTenBn.AutoIncrement = false;
				colvarTenBn.IsNullable = false;
				colvarTenBn.IsPrimaryKey = false;
				colvarTenBn.IsForeignKey = false;
				colvarTenBn.IsReadOnly = false;
				colvarTenBn.DefaultSetting = @"";
				colvarTenBn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenBn);
				
				TableSchema.TableColumn colvarDaKham = new TableSchema.TableColumn(schema);
				colvarDaKham.ColumnName = "Da_Kham";
				colvarDaKham.DataType = DbType.Boolean;
				colvarDaKham.MaxLength = 0;
				colvarDaKham.AutoIncrement = false;
				colvarDaKham.IsNullable = false;
				colvarDaKham.IsPrimaryKey = false;
				colvarDaKham.IsForeignKey = false;
				colvarDaKham.IsReadOnly = false;
				colvarDaKham.DefaultSetting = @"";
				colvarDaKham.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDaKham);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "Ngay_Tao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = false;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarMaCoSo = new TableSchema.TableColumn(schema);
				colvarMaCoSo.ColumnName = "Ma_CoSo";
				colvarMaCoSo.DataType = DbType.String;
				colvarMaCoSo.MaxLength = 10;
				colvarMaCoSo.AutoIncrement = false;
				colvarMaCoSo.IsNullable = false;
				colvarMaCoSo.IsPrimaryKey = false;
				colvarMaCoSo.IsForeignKey = false;
				colvarMaCoSo.IsReadOnly = false;
				colvarMaCoSo.DefaultSetting = @"";
				colvarMaCoSo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaCoSo);
				
				TableSchema.TableColumn colvarMaBenhVien = new TableSchema.TableColumn(schema);
				colvarMaBenhVien.ColumnName = "Ma_BenhVien";
				colvarMaBenhVien.DataType = DbType.String;
				colvarMaBenhVien.MaxLength = 10;
				colvarMaBenhVien.AutoIncrement = false;
				colvarMaBenhVien.IsNullable = false;
				colvarMaBenhVien.IsPrimaryKey = false;
				colvarMaBenhVien.IsForeignKey = false;
				colvarMaBenhVien.IsReadOnly = false;
				colvarMaBenhVien.DefaultSetting = @"";
				colvarMaBenhVien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaBenhVien);
				
				TableSchema.TableColumn colvarUuTien = new TableSchema.TableColumn(schema);
				colvarUuTien.ColumnName = "Uu_Tien";
				colvarUuTien.DataType = DbType.Boolean;
				colvarUuTien.MaxLength = 0;
				colvarUuTien.AutoIncrement = false;
				colvarUuTien.IsNullable = false;
				colvarUuTien.IsPrimaryKey = false;
				colvarUuTien.IsForeignKey = false;
				colvarUuTien.IsReadOnly = false;
				colvarUuTien.DefaultSetting = @"";
				colvarUuTien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUuTien);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("QMS_CanLamSang",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("MaPhong")]
		[Bindable(true)]
		public string MaPhong 
		{
			get { return GetColumnValue<string>(Columns.MaPhong); }
			set { SetColumnValue(Columns.MaPhong, value); }
		}
		  
		[XmlAttribute("SoKham")]
		[Bindable(true)]
		public int SoKham 
		{
			get { return GetColumnValue<int>(Columns.SoKham); }
			set { SetColumnValue(Columns.SoKham, value); }
		}
		  
		[XmlAttribute("TenBn")]
		[Bindable(true)]
		public string TenBn 
		{
			get { return GetColumnValue<string>(Columns.TenBn); }
			set { SetColumnValue(Columns.TenBn, value); }
		}
		  
		[XmlAttribute("DaKham")]
		[Bindable(true)]
		public bool DaKham 
		{
			get { return GetColumnValue<bool>(Columns.DaKham); }
			set { SetColumnValue(Columns.DaKham, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime NgayTao 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("MaCoSo")]
		[Bindable(true)]
		public string MaCoSo 
		{
			get { return GetColumnValue<string>(Columns.MaCoSo); }
			set { SetColumnValue(Columns.MaCoSo, value); }
		}
		  
		[XmlAttribute("MaBenhVien")]
		[Bindable(true)]
		public string MaBenhVien 
		{
			get { return GetColumnValue<string>(Columns.MaBenhVien); }
			set { SetColumnValue(Columns.MaBenhVien, value); }
		}
		  
		[XmlAttribute("UuTien")]
		[Bindable(true)]
		public bool UuTien 
		{
			get { return GetColumnValue<bool>(Columns.UuTien); }
			set { SetColumnValue(Columns.UuTien, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaPhong,int varSoKham,string varTenBn,bool varDaKham,DateTime varNgayTao,string varMaCoSo,string varMaBenhVien,bool varUuTien)
		{
			QmsCanLamSang item = new QmsCanLamSang();
			
			item.MaPhong = varMaPhong;
			
			item.SoKham = varSoKham;
			
			item.TenBn = varTenBn;
			
			item.DaKham = varDaKham;
			
			item.NgayTao = varNgayTao;
			
			item.MaCoSo = varMaCoSo;
			
			item.MaBenhVien = varMaBenhVien;
			
			item.UuTien = varUuTien;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varMaPhong,int varSoKham,string varTenBn,bool varDaKham,DateTime varNgayTao,string varMaCoSo,string varMaBenhVien,bool varUuTien)
		{
			QmsCanLamSang item = new QmsCanLamSang();
			
				item.Id = varId;
			
				item.MaPhong = varMaPhong;
			
				item.SoKham = varSoKham;
			
				item.TenBn = varTenBn;
			
				item.DaKham = varDaKham;
			
				item.NgayTao = varNgayTao;
			
				item.MaCoSo = varMaCoSo;
			
				item.MaBenhVien = varMaBenhVien;
			
				item.UuTien = varUuTien;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaPhongColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SoKhamColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TenBnColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DaKhamColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn MaCoSoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn MaBenhVienColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn UuTienColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string MaPhong = @"Ma_Phong";
			 public static string SoKham = @"So_Kham";
			 public static string TenBn = @"Ten_BN";
			 public static string DaKham = @"Da_Kham";
			 public static string NgayTao = @"Ngay_Tao";
			 public static string MaCoSo = @"Ma_CoSo";
			 public static string MaBenhVien = @"Ma_BenhVien";
			 public static string UuTien = @"Uu_Tien";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
