using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the QmsGoiLoa class.
	/// </summary>
    [Serializable]
	public partial class QmsGoiLoaCollection : ActiveList<QmsGoiLoa, QmsGoiLoaCollection>
	{	   
		public QmsGoiLoaCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>QmsGoiLoaCollection</returns>
		public QmsGoiLoaCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                QmsGoiLoa o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the QMS_GoiLoa table.
	/// </summary>
	[Serializable]
	public partial class QmsGoiLoa : ActiveRecord<QmsGoiLoa>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public QmsGoiLoa()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public QmsGoiLoa(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public QmsGoiLoa(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public QmsGoiLoa(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QMS_GoiLoa", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarSoKham = new TableSchema.TableColumn(schema);
				colvarSoKham.ColumnName = "So_Kham";
				colvarSoKham.DataType = DbType.String;
				colvarSoKham.MaxLength = 20;
				colvarSoKham.AutoIncrement = false;
				colvarSoKham.IsNullable = true;
				colvarSoKham.IsPrimaryKey = false;
				colvarSoKham.IsForeignKey = false;
				colvarSoKham.IsReadOnly = false;
				colvarSoKham.DefaultSetting = @"";
				colvarSoKham.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoKham);
				
				TableSchema.TableColumn colvarQuayGoi = new TableSchema.TableColumn(schema);
				colvarQuayGoi.ColumnName = "Quay_Goi";
				colvarQuayGoi.DataType = DbType.String;
				colvarQuayGoi.MaxLength = 50;
				colvarQuayGoi.AutoIncrement = false;
				colvarQuayGoi.IsNullable = true;
				colvarQuayGoi.IsPrimaryKey = false;
				colvarQuayGoi.IsForeignKey = false;
				colvarQuayGoi.IsReadOnly = false;
				colvarQuayGoi.DefaultSetting = @"";
				colvarQuayGoi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuayGoi);
				
				TableSchema.TableColumn colvarMayGoi = new TableSchema.TableColumn(schema);
				colvarMayGoi.ColumnName = "May_Goi";
				colvarMayGoi.DataType = DbType.String;
				colvarMayGoi.MaxLength = 20;
				colvarMayGoi.AutoIncrement = false;
				colvarMayGoi.IsNullable = true;
				colvarMayGoi.IsPrimaryKey = false;
				colvarMayGoi.IsForeignKey = false;
				colvarMayGoi.IsReadOnly = false;
				colvarMayGoi.DefaultSetting = @"";
				colvarMayGoi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMayGoi);
				
				TableSchema.TableColumn colvarMaKhoa = new TableSchema.TableColumn(schema);
				colvarMaKhoa.ColumnName = "Ma_Khoa";
				colvarMaKhoa.DataType = DbType.String;
				colvarMaKhoa.MaxLength = 10;
				colvarMaKhoa.AutoIncrement = false;
				colvarMaKhoa.IsNullable = true;
				colvarMaKhoa.IsPrimaryKey = false;
				colvarMaKhoa.IsForeignKey = false;
				colvarMaKhoa.IsReadOnly = false;
				colvarMaKhoa.DefaultSetting = @"";
				colvarMaKhoa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaKhoa);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "TrangThai";
				colvarTrangThai.DataType = DbType.Byte;
				colvarTrangThai.MaxLength = 0;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = true;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				
						colvarTrangThai.DefaultSetting = @"((0))";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "Nguoi_Tao";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 20;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "Ngay_Tao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarMayTao = new TableSchema.TableColumn(schema);
				colvarMayTao.ColumnName = "May_Tao";
				colvarMayTao.DataType = DbType.String;
				colvarMayTao.MaxLength = 20;
				colvarMayTao.AutoIncrement = false;
				colvarMayTao.IsNullable = true;
				colvarMayTao.IsPrimaryKey = false;
				colvarMayTao.IsForeignKey = false;
				colvarMayTao.IsReadOnly = false;
				colvarMayTao.DefaultSetting = @"";
				colvarMayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMayTao);
				
				TableSchema.TableColumn colvarLoaGoi = new TableSchema.TableColumn(schema);
				colvarLoaGoi.ColumnName = "Loa_Goi";
				colvarLoaGoi.DataType = DbType.String;
				colvarLoaGoi.MaxLength = 20;
				colvarLoaGoi.AutoIncrement = false;
				colvarLoaGoi.IsNullable = true;
				colvarLoaGoi.IsPrimaryKey = false;
				colvarLoaGoi.IsForeignKey = false;
				colvarLoaGoi.IsReadOnly = false;
				colvarLoaGoi.DefaultSetting = @"";
				colvarLoaGoi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoaGoi);
				
				TableSchema.TableColumn colvarNoiDung = new TableSchema.TableColumn(schema);
				colvarNoiDung.ColumnName = "NoiDung";
				colvarNoiDung.DataType = DbType.String;
				colvarNoiDung.MaxLength = 500;
				colvarNoiDung.AutoIncrement = false;
				colvarNoiDung.IsNullable = true;
				colvarNoiDung.IsPrimaryKey = false;
				colvarNoiDung.IsForeignKey = false;
				colvarNoiDung.IsReadOnly = false;
				colvarNoiDung.DefaultSetting = @"";
				colvarNoiDung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoiDung);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("QMS_GoiLoa",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("SoKham")]
		[Bindable(true)]
		public string SoKham 
		{
			get { return GetColumnValue<string>(Columns.SoKham); }
			set { SetColumnValue(Columns.SoKham, value); }
		}
		  
		[XmlAttribute("QuayGoi")]
		[Bindable(true)]
		public string QuayGoi 
		{
			get { return GetColumnValue<string>(Columns.QuayGoi); }
			set { SetColumnValue(Columns.QuayGoi, value); }
		}
		  
		[XmlAttribute("MayGoi")]
		[Bindable(true)]
		public string MayGoi 
		{
			get { return GetColumnValue<string>(Columns.MayGoi); }
			set { SetColumnValue(Columns.MayGoi, value); }
		}
		  
		[XmlAttribute("MaKhoa")]
		[Bindable(true)]
		public string MaKhoa 
		{
			get { return GetColumnValue<string>(Columns.MaKhoa); }
			set { SetColumnValue(Columns.MaKhoa, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public byte? TrangThai 
		{
			get { return GetColumnValue<byte?>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("MayTao")]
		[Bindable(true)]
		public string MayTao 
		{
			get { return GetColumnValue<string>(Columns.MayTao); }
			set { SetColumnValue(Columns.MayTao, value); }
		}
		  
		[XmlAttribute("LoaGoi")]
		[Bindable(true)]
		public string LoaGoi 
		{
			get { return GetColumnValue<string>(Columns.LoaGoi); }
			set { SetColumnValue(Columns.LoaGoi, value); }
		}
		  
		[XmlAttribute("NoiDung")]
		[Bindable(true)]
		public string NoiDung 
		{
			get { return GetColumnValue<string>(Columns.NoiDung); }
			set { SetColumnValue(Columns.NoiDung, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSoKham,string varQuayGoi,string varMayGoi,string varMaKhoa,byte? varTrangThai,string varNguoiTao,DateTime? varNgayTao,string varMayTao,string varLoaGoi,string varNoiDung)
		{
			QmsGoiLoa item = new QmsGoiLoa();
			
			item.SoKham = varSoKham;
			
			item.QuayGoi = varQuayGoi;
			
			item.MayGoi = varMayGoi;
			
			item.MaKhoa = varMaKhoa;
			
			item.TrangThai = varTrangThai;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayTao = varNgayTao;
			
			item.MayTao = varMayTao;
			
			item.LoaGoi = varLoaGoi;
			
			item.NoiDung = varNoiDung;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varSoKham,string varQuayGoi,string varMayGoi,string varMaKhoa,byte? varTrangThai,string varNguoiTao,DateTime? varNgayTao,string varMayTao,string varLoaGoi,string varNoiDung)
		{
			QmsGoiLoa item = new QmsGoiLoa();
			
				item.Id = varId;
			
				item.SoKham = varSoKham;
			
				item.QuayGoi = varQuayGoi;
			
				item.MayGoi = varMayGoi;
			
				item.MaKhoa = varMaKhoa;
			
				item.TrangThai = varTrangThai;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayTao = varNgayTao;
			
				item.MayTao = varMayTao;
			
				item.LoaGoi = varLoaGoi;
			
				item.NoiDung = varNoiDung;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SoKhamColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn QuayGoiColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn MayGoiColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MaKhoaColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn MayTaoColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn LoaGoiColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn NoiDungColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string SoKham = @"So_Kham";
			 public static string QuayGoi = @"Quay_Goi";
			 public static string MayGoi = @"May_Goi";
			 public static string MaKhoa = @"Ma_Khoa";
			 public static string TrangThai = @"TrangThai";
			 public static string NguoiTao = @"Nguoi_Tao";
			 public static string NgayTao = @"Ngay_Tao";
			 public static string MayTao = @"May_Tao";
			 public static string LoaGoi = @"Loa_Goi";
			 public static string NoiDung = @"NoiDung";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
