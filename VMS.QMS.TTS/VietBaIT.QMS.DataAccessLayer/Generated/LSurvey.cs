using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the LSurvey class.
	/// </summary>
    [Serializable]
	public partial class LSurveyCollection : ActiveList<LSurvey, LSurveyCollection>
	{	   
		public LSurveyCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LSurveyCollection</returns>
		public LSurveyCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LSurvey o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_Surveys table.
	/// </summary>
	[Serializable]
	public partial class LSurvey : ActiveRecord<LSurvey>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LSurvey()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LSurvey(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LSurvey(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LSurvey(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_Surveys", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarSurveyCode = new TableSchema.TableColumn(schema);
				colvarSurveyCode.ColumnName = "Survey_Code";
				colvarSurveyCode.DataType = DbType.AnsiString;
				colvarSurveyCode.MaxLength = 10;
				colvarSurveyCode.AutoIncrement = false;
				colvarSurveyCode.IsNullable = false;
				colvarSurveyCode.IsPrimaryKey = true;
				colvarSurveyCode.IsForeignKey = false;
				colvarSurveyCode.IsReadOnly = false;
				colvarSurveyCode.DefaultSetting = @"";
				colvarSurveyCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurveyCode);
				
				TableSchema.TableColumn colvarSurveyName = new TableSchema.TableColumn(schema);
				colvarSurveyName.ColumnName = "Survey_Name";
				colvarSurveyName.DataType = DbType.String;
				colvarSurveyName.MaxLength = 100;
				colvarSurveyName.AutoIncrement = false;
				colvarSurveyName.IsNullable = false;
				colvarSurveyName.IsPrimaryKey = false;
				colvarSurveyName.IsForeignKey = false;
				colvarSurveyName.IsReadOnly = false;
				colvarSurveyName.DefaultSetting = @"";
				colvarSurveyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurveyName);
				
				TableSchema.TableColumn colvarParentCode = new TableSchema.TableColumn(schema);
				colvarParentCode.ColumnName = "Parent_Code";
				colvarParentCode.DataType = DbType.AnsiString;
				colvarParentCode.MaxLength = 10;
				colvarParentCode.AutoIncrement = false;
				colvarParentCode.IsNullable = true;
				colvarParentCode.IsPrimaryKey = false;
				colvarParentCode.IsForeignKey = false;
				colvarParentCode.IsReadOnly = false;
				colvarParentCode.DefaultSetting = @"";
				colvarParentCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParentCode);
				
				TableSchema.TableColumn colvarIntOrder = new TableSchema.TableColumn(schema);
				colvarIntOrder.ColumnName = "intOrder";
				colvarIntOrder.DataType = DbType.Int16;
				colvarIntOrder.MaxLength = 0;
				colvarIntOrder.AutoIncrement = false;
				colvarIntOrder.IsNullable = true;
				colvarIntOrder.IsPrimaryKey = false;
				colvarIntOrder.IsForeignKey = false;
				colvarIntOrder.IsReadOnly = false;
				colvarIntOrder.DefaultSetting = @"";
				colvarIntOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIntOrder);
				
				TableSchema.TableColumn colvarSurveyType = new TableSchema.TableColumn(schema);
				colvarSurveyType.ColumnName = "Survey_Type";
				colvarSurveyType.DataType = DbType.Byte;
				colvarSurveyType.MaxLength = 0;
				colvarSurveyType.AutoIncrement = false;
				colvarSurveyType.IsNullable = true;
				colvarSurveyType.IsPrimaryKey = false;
				colvarSurveyType.IsForeignKey = false;
				colvarSurveyType.IsReadOnly = false;
				
						colvarSurveyType.DefaultSetting = @"((0))";
				colvarSurveyType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurveyType);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 255;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_Surveys",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("SurveyCode")]
		[Bindable(true)]
		public string SurveyCode 
		{
			get { return GetColumnValue<string>(Columns.SurveyCode); }
			set { SetColumnValue(Columns.SurveyCode, value); }
		}
		  
		[XmlAttribute("SurveyName")]
		[Bindable(true)]
		public string SurveyName 
		{
			get { return GetColumnValue<string>(Columns.SurveyName); }
			set { SetColumnValue(Columns.SurveyName, value); }
		}
		  
		[XmlAttribute("ParentCode")]
		[Bindable(true)]
		public string ParentCode 
		{
			get { return GetColumnValue<string>(Columns.ParentCode); }
			set { SetColumnValue(Columns.ParentCode, value); }
		}
		  
		[XmlAttribute("IntOrder")]
		[Bindable(true)]
		public short? IntOrder 
		{
			get { return GetColumnValue<short?>(Columns.IntOrder); }
			set { SetColumnValue(Columns.IntOrder, value); }
		}
		  
		[XmlAttribute("SurveyType")]
		[Bindable(true)]
		public byte? SurveyType 
		{
			get { return GetColumnValue<byte?>(Columns.SurveyType); }
			set { SetColumnValue(Columns.SurveyType, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSurveyCode,string varSurveyName,string varParentCode,short? varIntOrder,byte? varSurveyType,string varSDesc)
		{
			LSurvey item = new LSurvey();
			
			item.SurveyCode = varSurveyCode;
			
			item.SurveyName = varSurveyName;
			
			item.ParentCode = varParentCode;
			
			item.IntOrder = varIntOrder;
			
			item.SurveyType = varSurveyType;
			
			item.SDesc = varSDesc;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varSurveyCode,string varSurveyName,string varParentCode,short? varIntOrder,byte? varSurveyType,string varSDesc)
		{
			LSurvey item = new LSurvey();
			
				item.SurveyCode = varSurveyCode;
			
				item.SurveyName = varSurveyName;
			
				item.ParentCode = varParentCode;
			
				item.IntOrder = varIntOrder;
			
				item.SurveyType = varSurveyType;
			
				item.SDesc = varSDesc;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SurveyCodeColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SurveyNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ParentCodeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IntOrderColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SurveyTypeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string SurveyCode = @"Survey_Code";
			 public static string SurveyName = @"Survey_Name";
			 public static string ParentCode = @"Parent_Code";
			 public static string IntOrder = @"intOrder";
			 public static string SurveyType = @"Survey_Type";
			 public static string SDesc = @"sDesc";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
