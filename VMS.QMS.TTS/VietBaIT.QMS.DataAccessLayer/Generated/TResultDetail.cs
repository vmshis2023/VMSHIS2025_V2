using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VietBaIT.HISLink.DataAccessLayer
{
	/// <summary>
	/// Strongly-typed collection for the TResultDetail class.
	/// </summary>
    [Serializable]
	public partial class TResultDetailCollection : ActiveList<TResultDetail, TResultDetailCollection>
	{	   
		public TResultDetailCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TResultDetailCollection</returns>
		public TResultDetailCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TResultDetail o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_RESULT_DETAIL table.
	/// </summary>
	[Serializable]
	public partial class TResultDetail : ActiveRecord<TResultDetail>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TResultDetail()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TResultDetail(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TResultDetail(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TResultDetail(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_RESULT_DETAIL", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTestDetailId = new TableSchema.TableColumn(schema);
				colvarTestDetailId.ColumnName = "TestDetail_ID";
				colvarTestDetailId.DataType = DbType.Decimal;
				colvarTestDetailId.MaxLength = 0;
				colvarTestDetailId.AutoIncrement = false;
				colvarTestDetailId.IsNullable = false;
				colvarTestDetailId.IsPrimaryKey = true;
				colvarTestDetailId.IsForeignKey = false;
				colvarTestDetailId.IsReadOnly = false;
				colvarTestDetailId.DefaultSetting = @"";
				colvarTestDetailId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTestDetailId);
				
				TableSchema.TableColumn colvarTestId = new TableSchema.TableColumn(schema);
				colvarTestId.ColumnName = "Test_ID";
				colvarTestId.DataType = DbType.Decimal;
				colvarTestId.MaxLength = 0;
				colvarTestId.AutoIncrement = false;
				colvarTestId.IsNullable = true;
				colvarTestId.IsPrimaryKey = false;
				colvarTestId.IsForeignKey = false;
				colvarTestId.IsReadOnly = false;
				colvarTestId.DefaultSetting = @"";
				colvarTestId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTestId);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int64;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = true;
				colvarPatientId.IsPrimaryKey = false;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "Patient_Code";
				colvarPatientCode.DataType = DbType.String;
				colvarPatientCode.MaxLength = 20;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = true;
				colvarPatientCode.IsPrimaryKey = false;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarTestTypeId = new TableSchema.TableColumn(schema);
				colvarTestTypeId.ColumnName = "TestType_ID";
				colvarTestTypeId.DataType = DbType.Int32;
				colvarTestTypeId.MaxLength = 0;
				colvarTestTypeId.AutoIncrement = false;
				colvarTestTypeId.IsNullable = true;
				colvarTestTypeId.IsPrimaryKey = false;
				colvarTestTypeId.IsForeignKey = false;
				colvarTestTypeId.IsReadOnly = false;
				
						colvarTestTypeId.DefaultSetting = @"((0))";
				colvarTestTypeId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTestTypeId);
				
				TableSchema.TableColumn colvarTestDate = new TableSchema.TableColumn(schema);
				colvarTestDate.ColumnName = "Test_Date";
				colvarTestDate.DataType = DbType.DateTime;
				colvarTestDate.MaxLength = 0;
				colvarTestDate.AutoIncrement = false;
				colvarTestDate.IsNullable = true;
				colvarTestDate.IsPrimaryKey = false;
				colvarTestDate.IsForeignKey = false;
				colvarTestDate.IsReadOnly = false;
				colvarTestDate.DefaultSetting = @"";
				colvarTestDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTestDate);
				
				TableSchema.TableColumn colvarTestSequence = new TableSchema.TableColumn(schema);
				colvarTestSequence.ColumnName = "Test_Sequence";
				colvarTestSequence.DataType = DbType.String;
				colvarTestSequence.MaxLength = 50;
				colvarTestSequence.AutoIncrement = false;
				colvarTestSequence.IsNullable = true;
				colvarTestSequence.IsPrimaryKey = false;
				colvarTestSequence.IsForeignKey = false;
				colvarTestSequence.IsReadOnly = false;
				colvarTestSequence.DefaultSetting = @"";
				colvarTestSequence.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTestSequence);
				
				TableSchema.TableColumn colvarDataSequence = new TableSchema.TableColumn(schema);
				colvarDataSequence.ColumnName = "Data_Sequence";
				colvarDataSequence.DataType = DbType.Int32;
				colvarDataSequence.MaxLength = 0;
				colvarDataSequence.AutoIncrement = false;
				colvarDataSequence.IsNullable = true;
				colvarDataSequence.IsPrimaryKey = false;
				colvarDataSequence.IsForeignKey = false;
				colvarDataSequence.IsReadOnly = false;
				colvarDataSequence.DefaultSetting = @"";
				colvarDataSequence.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDataSequence);
				
				TableSchema.TableColumn colvarTestResult = new TableSchema.TableColumn(schema);
				colvarTestResult.ColumnName = "Test_Result";
				colvarTestResult.DataType = DbType.String;
				colvarTestResult.MaxLength = 100;
				colvarTestResult.AutoIncrement = false;
				colvarTestResult.IsNullable = true;
				colvarTestResult.IsPrimaryKey = false;
				colvarTestResult.IsForeignKey = false;
				colvarTestResult.IsReadOnly = false;
				colvarTestResult.DefaultSetting = @"";
				colvarTestResult.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTestResult);
				
				TableSchema.TableColumn colvarNormalLevelW = new TableSchema.TableColumn(schema);
				colvarNormalLevelW.ColumnName = "Normal_levelW";
				colvarNormalLevelW.DataType = DbType.String;
				colvarNormalLevelW.MaxLength = 100;
				colvarNormalLevelW.AutoIncrement = false;
				colvarNormalLevelW.IsNullable = true;
				colvarNormalLevelW.IsPrimaryKey = false;
				colvarNormalLevelW.IsForeignKey = false;
				colvarNormalLevelW.IsReadOnly = false;
				colvarNormalLevelW.DefaultSetting = @"";
				colvarNormalLevelW.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNormalLevelW);
				
				TableSchema.TableColumn colvarNormalLevel = new TableSchema.TableColumn(schema);
				colvarNormalLevel.ColumnName = "Normal_Level";
				colvarNormalLevel.DataType = DbType.String;
				colvarNormalLevel.MaxLength = 100;
				colvarNormalLevel.AutoIncrement = false;
				colvarNormalLevel.IsNullable = true;
				colvarNormalLevel.IsPrimaryKey = false;
				colvarNormalLevel.IsForeignKey = false;
				colvarNormalLevel.IsReadOnly = false;
				colvarNormalLevel.DefaultSetting = @"";
				colvarNormalLevel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNormalLevel);
				
				TableSchema.TableColumn colvarMeasureUnit = new TableSchema.TableColumn(schema);
				colvarMeasureUnit.ColumnName = "Measure_Unit";
				colvarMeasureUnit.DataType = DbType.String;
				colvarMeasureUnit.MaxLength = 50;
				colvarMeasureUnit.AutoIncrement = false;
				colvarMeasureUnit.IsNullable = true;
				colvarMeasureUnit.IsPrimaryKey = false;
				colvarMeasureUnit.IsForeignKey = false;
				colvarMeasureUnit.IsReadOnly = false;
				colvarMeasureUnit.DefaultSetting = @"";
				colvarMeasureUnit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMeasureUnit);
				
				TableSchema.TableColumn colvarParaName = new TableSchema.TableColumn(schema);
				colvarParaName.ColumnName = "Para_Name";
				colvarParaName.DataType = DbType.String;
				colvarParaName.MaxLength = 100;
				colvarParaName.AutoIncrement = false;
				colvarParaName.IsNullable = true;
				colvarParaName.IsPrimaryKey = false;
				colvarParaName.IsForeignKey = false;
				colvarParaName.IsReadOnly = false;
				colvarParaName.DefaultSetting = @"";
				colvarParaName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParaName);
				
				TableSchema.TableColumn colvarParaStatus = new TableSchema.TableColumn(schema);
				colvarParaStatus.ColumnName = "Para_Status";
				colvarParaStatus.DataType = DbType.Int16;
				colvarParaStatus.MaxLength = 0;
				colvarParaStatus.AutoIncrement = false;
				colvarParaStatus.IsNullable = false;
				colvarParaStatus.IsPrimaryKey = false;
				colvarParaStatus.IsForeignKey = false;
				colvarParaStatus.IsReadOnly = false;
				
						colvarParaStatus.DefaultSetting = @"((0))";
				colvarParaStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParaStatus);
				
				TableSchema.TableColumn colvarNote = new TableSchema.TableColumn(schema);
				colvarNote.ColumnName = "Note";
				colvarNote.DataType = DbType.String;
				colvarNote.MaxLength = 100;
				colvarNote.AutoIncrement = false;
				colvarNote.IsNullable = true;
				colvarNote.IsPrimaryKey = false;
				colvarNote.IsForeignKey = false;
				colvarNote.IsReadOnly = false;
				colvarNote.DefaultSetting = @"";
				colvarNote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNote);
				
				TableSchema.TableColumn colvarPrintData = new TableSchema.TableColumn(schema);
				colvarPrintData.ColumnName = "PrintData";
				colvarPrintData.DataType = DbType.Boolean;
				colvarPrintData.MaxLength = 0;
				colvarPrintData.AutoIncrement = false;
				colvarPrintData.IsNullable = true;
				colvarPrintData.IsPrimaryKey = false;
				colvarPrintData.IsForeignKey = false;
				colvarPrintData.IsReadOnly = false;
				
						colvarPrintData.DefaultSetting = @"((1))";
				colvarPrintData.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrintData);
				
				TableSchema.TableColumn colvarBarcode = new TableSchema.TableColumn(schema);
				colvarBarcode.ColumnName = "Barcode";
				colvarBarcode.DataType = DbType.String;
				colvarBarcode.MaxLength = 50;
				colvarBarcode.AutoIncrement = false;
				colvarBarcode.IsNullable = true;
				colvarBarcode.IsPrimaryKey = false;
				colvarBarcode.IsForeignKey = false;
				colvarBarcode.IsReadOnly = false;
				colvarBarcode.DefaultSetting = @"";
				colvarBarcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBarcode);
				
				TableSchema.TableColumn colvarUpdateNum = new TableSchema.TableColumn(schema);
				colvarUpdateNum.ColumnName = "UpdateNum";
				colvarUpdateNum.DataType = DbType.Int32;
				colvarUpdateNum.MaxLength = 0;
				colvarUpdateNum.AutoIncrement = false;
				colvarUpdateNum.IsNullable = true;
				colvarUpdateNum.IsPrimaryKey = false;
				colvarUpdateNum.IsForeignKey = false;
				colvarUpdateNum.IsReadOnly = false;
				
						colvarUpdateNum.DefaultSetting = @"((1))";
				colvarUpdateNum.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdateNum);
				
				TableSchema.TableColumn colvarModifyBy = new TableSchema.TableColumn(schema);
				colvarModifyBy.ColumnName = "Modify_By";
				colvarModifyBy.DataType = DbType.String;
				colvarModifyBy.MaxLength = 255;
				colvarModifyBy.AutoIncrement = false;
				colvarModifyBy.IsNullable = true;
				colvarModifyBy.IsPrimaryKey = false;
				colvarModifyBy.IsForeignKey = false;
				colvarModifyBy.IsReadOnly = false;
				colvarModifyBy.DefaultSetting = @"";
				colvarModifyBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifyBy);
				
				TableSchema.TableColumn colvarPid = new TableSchema.TableColumn(schema);
				colvarPid.ColumnName = "PID";
				colvarPid.DataType = DbType.AnsiString;
				colvarPid.MaxLength = 20;
				colvarPid.AutoIncrement = false;
				colvarPid.IsNullable = true;
				colvarPid.IsPrimaryKey = false;
				colvarPid.IsForeignKey = false;
				colvarPid.IsReadOnly = false;
				colvarPid.DefaultSetting = @"";
				colvarPid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPid);
				
				TableSchema.TableColumn colvarAssignId = new TableSchema.TableColumn(schema);
				colvarAssignId.ColumnName = "Assign_Id";
				colvarAssignId.DataType = DbType.Int32;
				colvarAssignId.MaxLength = 0;
				colvarAssignId.AutoIncrement = false;
				colvarAssignId.IsNullable = true;
				colvarAssignId.IsPrimaryKey = false;
				colvarAssignId.IsForeignKey = false;
				colvarAssignId.IsReadOnly = false;
				colvarAssignId.DefaultSetting = @"";
				colvarAssignId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAssignId);
				
				TableSchema.TableColumn colvarCreateBy = new TableSchema.TableColumn(schema);
				colvarCreateBy.ColumnName = "CreateBy";
				colvarCreateBy.DataType = DbType.String;
				colvarCreateBy.MaxLength = 50;
				colvarCreateBy.AutoIncrement = false;
				colvarCreateBy.IsNullable = true;
				colvarCreateBy.IsPrimaryKey = false;
				colvarCreateBy.IsForeignKey = false;
				colvarCreateBy.IsReadOnly = false;
				colvarCreateBy.DefaultSetting = @"";
				colvarCreateBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateBy);
				
				TableSchema.TableColumn colvarCreateDate = new TableSchema.TableColumn(schema);
				colvarCreateDate.ColumnName = "CreateDate";
				colvarCreateDate.DataType = DbType.DateTime;
				colvarCreateDate.MaxLength = 0;
				colvarCreateDate.AutoIncrement = false;
				colvarCreateDate.IsNullable = true;
				colvarCreateDate.IsPrimaryKey = false;
				colvarCreateDate.IsForeignKey = false;
				colvarCreateDate.IsReadOnly = false;
				colvarCreateDate.DefaultSetting = @"";
				colvarCreateDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreateDate);
				
				TableSchema.TableColumn colvarModifyDate = new TableSchema.TableColumn(schema);
				colvarModifyDate.ColumnName = "ModifyDate";
				colvarModifyDate.DataType = DbType.DateTime;
				colvarModifyDate.MaxLength = 0;
				colvarModifyDate.AutoIncrement = false;
				colvarModifyDate.IsNullable = true;
				colvarModifyDate.IsPrimaryKey = false;
				colvarModifyDate.IsForeignKey = false;
				colvarModifyDate.IsReadOnly = false;
				
						colvarModifyDate.DefaultSetting = @"(getdate())";
				colvarModifyDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifyDate);
				
				TableSchema.TableColumn colvarAssignCode = new TableSchema.TableColumn(schema);
				colvarAssignCode.ColumnName = "Assign_Code";
				colvarAssignCode.DataType = DbType.String;
				colvarAssignCode.MaxLength = 50;
				colvarAssignCode.AutoIncrement = false;
				colvarAssignCode.IsNullable = true;
				colvarAssignCode.IsPrimaryKey = false;
				colvarAssignCode.IsForeignKey = false;
				colvarAssignCode.IsReadOnly = false;
				colvarAssignCode.DefaultSetting = @"";
				colvarAssignCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAssignCode);
				
				TableSchema.TableColumn colvarBedName = new TableSchema.TableColumn(schema);
				colvarBedName.ColumnName = "Bed_Name";
				colvarBedName.DataType = DbType.String;
				colvarBedName.MaxLength = 50;
				colvarBedName.AutoIncrement = false;
				colvarBedName.IsNullable = true;
				colvarBedName.IsPrimaryKey = false;
				colvarBedName.IsForeignKey = false;
				colvarBedName.IsReadOnly = false;
				colvarBedName.DefaultSetting = @"";
				colvarBedName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBedName);
				
				TableSchema.TableColumn colvarDepartmentName = new TableSchema.TableColumn(schema);
				colvarDepartmentName.ColumnName = "Department_Name";
				colvarDepartmentName.DataType = DbType.String;
				colvarDepartmentName.MaxLength = 100;
				colvarDepartmentName.AutoIncrement = false;
				colvarDepartmentName.IsNullable = true;
				colvarDepartmentName.IsPrimaryKey = false;
				colvarDepartmentName.IsForeignKey = false;
				colvarDepartmentName.IsReadOnly = false;
				colvarDepartmentName.DefaultSetting = @"";
				colvarDepartmentName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentName);
				
				TableSchema.TableColumn colvarDiagnostic = new TableSchema.TableColumn(schema);
				colvarDiagnostic.ColumnName = "Diagnostic";
				colvarDiagnostic.DataType = DbType.String;
				colvarDiagnostic.MaxLength = 500;
				colvarDiagnostic.AutoIncrement = false;
				colvarDiagnostic.IsNullable = true;
				colvarDiagnostic.IsPrimaryKey = false;
				colvarDiagnostic.IsForeignKey = false;
				colvarDiagnostic.IsReadOnly = false;
				colvarDiagnostic.DefaultSetting = @"";
				colvarDiagnostic.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiagnostic);
				
				TableSchema.TableColumn colvarIntOrder = new TableSchema.TableColumn(schema);
				colvarIntOrder.ColumnName = "intOrder";
				colvarIntOrder.DataType = DbType.Int32;
				colvarIntOrder.MaxLength = 0;
				colvarIntOrder.AutoIncrement = false;
				colvarIntOrder.IsNullable = true;
				colvarIntOrder.IsPrimaryKey = false;
				colvarIntOrder.IsForeignKey = false;
				colvarIntOrder.IsReadOnly = false;
				colvarIntOrder.DefaultSetting = @"";
				colvarIntOrder.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIntOrder);
				
				TableSchema.TableColumn colvarObjectTypeName = new TableSchema.TableColumn(schema);
				colvarObjectTypeName.ColumnName = "ObjectType_Name";
				colvarObjectTypeName.DataType = DbType.String;
				colvarObjectTypeName.MaxLength = 50;
				colvarObjectTypeName.AutoIncrement = false;
				colvarObjectTypeName.IsNullable = true;
				colvarObjectTypeName.IsPrimaryKey = false;
				colvarObjectTypeName.IsForeignKey = false;
				colvarObjectTypeName.IsReadOnly = false;
				colvarObjectTypeName.DefaultSetting = @"";
				colvarObjectTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObjectTypeName);
				
				TableSchema.TableColumn colvarRoomName = new TableSchema.TableColumn(schema);
				colvarRoomName.ColumnName = "Room_Name";
				colvarRoomName.DataType = DbType.String;
				colvarRoomName.MaxLength = 50;
				colvarRoomName.AutoIncrement = false;
				colvarRoomName.IsNullable = true;
				colvarRoomName.IsPrimaryKey = false;
				colvarRoomName.IsForeignKey = false;
				colvarRoomName.IsReadOnly = false;
				colvarRoomName.DefaultSetting = @"";
				colvarRoomName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoomName);
				
				TableSchema.TableColumn colvarTestTypeName = new TableSchema.TableColumn(schema);
				colvarTestTypeName.ColumnName = "TestType_Name";
				colvarTestTypeName.DataType = DbType.String;
				colvarTestTypeName.MaxLength = 50;
				colvarTestTypeName.AutoIncrement = false;
				colvarTestTypeName.IsNullable = true;
				colvarTestTypeName.IsPrimaryKey = false;
				colvarTestTypeName.IsForeignKey = false;
				colvarTestTypeName.IsReadOnly = false;
				colvarTestTypeName.DefaultSetting = @"";
				colvarTestTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTestTypeName);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_RESULT_DETAIL",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TestDetailId")]
		[Bindable(true)]
		public decimal TestDetailId 
		{
			get { return GetColumnValue<decimal>(Columns.TestDetailId); }
			set { SetColumnValue(Columns.TestDetailId, value); }
		}
		  
		[XmlAttribute("TestId")]
		[Bindable(true)]
		public decimal? TestId 
		{
			get { return GetColumnValue<decimal?>(Columns.TestId); }
			set { SetColumnValue(Columns.TestId, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public long? PatientId 
		{
			get { return GetColumnValue<long?>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("TestTypeId")]
		[Bindable(true)]
		public int? TestTypeId 
		{
			get { return GetColumnValue<int?>(Columns.TestTypeId); }
			set { SetColumnValue(Columns.TestTypeId, value); }
		}
		  
		[XmlAttribute("TestDate")]
		[Bindable(true)]
		public DateTime? TestDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.TestDate); }
			set { SetColumnValue(Columns.TestDate, value); }
		}
		  
		[XmlAttribute("TestSequence")]
		[Bindable(true)]
		public string TestSequence 
		{
			get { return GetColumnValue<string>(Columns.TestSequence); }
			set { SetColumnValue(Columns.TestSequence, value); }
		}
		  
		[XmlAttribute("DataSequence")]
		[Bindable(true)]
		public int? DataSequence 
		{
			get { return GetColumnValue<int?>(Columns.DataSequence); }
			set { SetColumnValue(Columns.DataSequence, value); }
		}
		  
		[XmlAttribute("TestResult")]
		[Bindable(true)]
		public string TestResult 
		{
			get { return GetColumnValue<string>(Columns.TestResult); }
			set { SetColumnValue(Columns.TestResult, value); }
		}
		  
		[XmlAttribute("NormalLevelW")]
		[Bindable(true)]
		public string NormalLevelW 
		{
			get { return GetColumnValue<string>(Columns.NormalLevelW); }
			set { SetColumnValue(Columns.NormalLevelW, value); }
		}
		  
		[XmlAttribute("NormalLevel")]
		[Bindable(true)]
		public string NormalLevel 
		{
			get { return GetColumnValue<string>(Columns.NormalLevel); }
			set { SetColumnValue(Columns.NormalLevel, value); }
		}
		  
		[XmlAttribute("MeasureUnit")]
		[Bindable(true)]
		public string MeasureUnit 
		{
			get { return GetColumnValue<string>(Columns.MeasureUnit); }
			set { SetColumnValue(Columns.MeasureUnit, value); }
		}
		  
		[XmlAttribute("ParaName")]
		[Bindable(true)]
		public string ParaName 
		{
			get { return GetColumnValue<string>(Columns.ParaName); }
			set { SetColumnValue(Columns.ParaName, value); }
		}
		  
		[XmlAttribute("ParaStatus")]
		[Bindable(true)]
		public short ParaStatus 
		{
			get { return GetColumnValue<short>(Columns.ParaStatus); }
			set { SetColumnValue(Columns.ParaStatus, value); }
		}
		  
		[XmlAttribute("Note")]
		[Bindable(true)]
		public string Note 
		{
			get { return GetColumnValue<string>(Columns.Note); }
			set { SetColumnValue(Columns.Note, value); }
		}
		  
		[XmlAttribute("PrintData")]
		[Bindable(true)]
		public bool? PrintData 
		{
			get { return GetColumnValue<bool?>(Columns.PrintData); }
			set { SetColumnValue(Columns.PrintData, value); }
		}
		  
		[XmlAttribute("Barcode")]
		[Bindable(true)]
		public string Barcode 
		{
			get { return GetColumnValue<string>(Columns.Barcode); }
			set { SetColumnValue(Columns.Barcode, value); }
		}
		  
		[XmlAttribute("UpdateNum")]
		[Bindable(true)]
		public int? UpdateNum 
		{
			get { return GetColumnValue<int?>(Columns.UpdateNum); }
			set { SetColumnValue(Columns.UpdateNum, value); }
		}
		  
		[XmlAttribute("ModifyBy")]
		[Bindable(true)]
		public string ModifyBy 
		{
			get { return GetColumnValue<string>(Columns.ModifyBy); }
			set { SetColumnValue(Columns.ModifyBy, value); }
		}
		  
		[XmlAttribute("Pid")]
		[Bindable(true)]
		public string Pid 
		{
			get { return GetColumnValue<string>(Columns.Pid); }
			set { SetColumnValue(Columns.Pid, value); }
		}
		  
		[XmlAttribute("AssignId")]
		[Bindable(true)]
		public int? AssignId 
		{
			get { return GetColumnValue<int?>(Columns.AssignId); }
			set { SetColumnValue(Columns.AssignId, value); }
		}
		  
		[XmlAttribute("CreateBy")]
		[Bindable(true)]
		public string CreateBy 
		{
			get { return GetColumnValue<string>(Columns.CreateBy); }
			set { SetColumnValue(Columns.CreateBy, value); }
		}
		  
		[XmlAttribute("CreateDate")]
		[Bindable(true)]
		public DateTime? CreateDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.CreateDate); }
			set { SetColumnValue(Columns.CreateDate, value); }
		}
		  
		[XmlAttribute("ModifyDate")]
		[Bindable(true)]
		public DateTime? ModifyDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ModifyDate); }
			set { SetColumnValue(Columns.ModifyDate, value); }
		}
		  
		[XmlAttribute("AssignCode")]
		[Bindable(true)]
		public string AssignCode 
		{
			get { return GetColumnValue<string>(Columns.AssignCode); }
			set { SetColumnValue(Columns.AssignCode, value); }
		}
		  
		[XmlAttribute("BedName")]
		[Bindable(true)]
		public string BedName 
		{
			get { return GetColumnValue<string>(Columns.BedName); }
			set { SetColumnValue(Columns.BedName, value); }
		}
		  
		[XmlAttribute("DepartmentName")]
		[Bindable(true)]
		public string DepartmentName 
		{
			get { return GetColumnValue<string>(Columns.DepartmentName); }
			set { SetColumnValue(Columns.DepartmentName, value); }
		}
		  
		[XmlAttribute("Diagnostic")]
		[Bindable(true)]
		public string Diagnostic 
		{
			get { return GetColumnValue<string>(Columns.Diagnostic); }
			set { SetColumnValue(Columns.Diagnostic, value); }
		}
		  
		[XmlAttribute("IntOrder")]
		[Bindable(true)]
		public int? IntOrder 
		{
			get { return GetColumnValue<int?>(Columns.IntOrder); }
			set { SetColumnValue(Columns.IntOrder, value); }
		}
		  
		[XmlAttribute("ObjectTypeName")]
		[Bindable(true)]
		public string ObjectTypeName 
		{
			get { return GetColumnValue<string>(Columns.ObjectTypeName); }
			set { SetColumnValue(Columns.ObjectTypeName, value); }
		}
		  
		[XmlAttribute("RoomName")]
		[Bindable(true)]
		public string RoomName 
		{
			get { return GetColumnValue<string>(Columns.RoomName); }
			set { SetColumnValue(Columns.RoomName, value); }
		}
		  
		[XmlAttribute("TestTypeName")]
		[Bindable(true)]
		public string TestTypeName 
		{
			get { return GetColumnValue<string>(Columns.TestTypeName); }
			set { SetColumnValue(Columns.TestTypeName, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(decimal varTestDetailId,decimal? varTestId,long? varPatientId,string varPatientCode,int? varTestTypeId,DateTime? varTestDate,string varTestSequence,int? varDataSequence,string varTestResult,string varNormalLevelW,string varNormalLevel,string varMeasureUnit,string varParaName,short varParaStatus,string varNote,bool? varPrintData,string varBarcode,int? varUpdateNum,string varModifyBy,string varPid,int? varAssignId,string varCreateBy,DateTime? varCreateDate,DateTime? varModifyDate,string varAssignCode,string varBedName,string varDepartmentName,string varDiagnostic,int? varIntOrder,string varObjectTypeName,string varRoomName,string varTestTypeName)
		{
			TResultDetail item = new TResultDetail();
			
			item.TestDetailId = varTestDetailId;
			
			item.TestId = varTestId;
			
			item.PatientId = varPatientId;
			
			item.PatientCode = varPatientCode;
			
			item.TestTypeId = varTestTypeId;
			
			item.TestDate = varTestDate;
			
			item.TestSequence = varTestSequence;
			
			item.DataSequence = varDataSequence;
			
			item.TestResult = varTestResult;
			
			item.NormalLevelW = varNormalLevelW;
			
			item.NormalLevel = varNormalLevel;
			
			item.MeasureUnit = varMeasureUnit;
			
			item.ParaName = varParaName;
			
			item.ParaStatus = varParaStatus;
			
			item.Note = varNote;
			
			item.PrintData = varPrintData;
			
			item.Barcode = varBarcode;
			
			item.UpdateNum = varUpdateNum;
			
			item.ModifyBy = varModifyBy;
			
			item.Pid = varPid;
			
			item.AssignId = varAssignId;
			
			item.CreateBy = varCreateBy;
			
			item.CreateDate = varCreateDate;
			
			item.ModifyDate = varModifyDate;
			
			item.AssignCode = varAssignCode;
			
			item.BedName = varBedName;
			
			item.DepartmentName = varDepartmentName;
			
			item.Diagnostic = varDiagnostic;
			
			item.IntOrder = varIntOrder;
			
			item.ObjectTypeName = varObjectTypeName;
			
			item.RoomName = varRoomName;
			
			item.TestTypeName = varTestTypeName;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(decimal varTestDetailId,decimal? varTestId,long? varPatientId,string varPatientCode,int? varTestTypeId,DateTime? varTestDate,string varTestSequence,int? varDataSequence,string varTestResult,string varNormalLevelW,string varNormalLevel,string varMeasureUnit,string varParaName,short varParaStatus,string varNote,bool? varPrintData,string varBarcode,int? varUpdateNum,string varModifyBy,string varPid,int? varAssignId,string varCreateBy,DateTime? varCreateDate,DateTime? varModifyDate,string varAssignCode,string varBedName,string varDepartmentName,string varDiagnostic,int? varIntOrder,string varObjectTypeName,string varRoomName,string varTestTypeName)
		{
			TResultDetail item = new TResultDetail();
			
				item.TestDetailId = varTestDetailId;
			
				item.TestId = varTestId;
			
				item.PatientId = varPatientId;
			
				item.PatientCode = varPatientCode;
			
				item.TestTypeId = varTestTypeId;
			
				item.TestDate = varTestDate;
			
				item.TestSequence = varTestSequence;
			
				item.DataSequence = varDataSequence;
			
				item.TestResult = varTestResult;
			
				item.NormalLevelW = varNormalLevelW;
			
				item.NormalLevel = varNormalLevel;
			
				item.MeasureUnit = varMeasureUnit;
			
				item.ParaName = varParaName;
			
				item.ParaStatus = varParaStatus;
			
				item.Note = varNote;
			
				item.PrintData = varPrintData;
			
				item.Barcode = varBarcode;
			
				item.UpdateNum = varUpdateNum;
			
				item.ModifyBy = varModifyBy;
			
				item.Pid = varPid;
			
				item.AssignId = varAssignId;
			
				item.CreateBy = varCreateBy;
			
				item.CreateDate = varCreateDate;
			
				item.ModifyDate = varModifyDate;
			
				item.AssignCode = varAssignCode;
			
				item.BedName = varBedName;
			
				item.DepartmentName = varDepartmentName;
			
				item.Diagnostic = varDiagnostic;
			
				item.IntOrder = varIntOrder;
			
				item.ObjectTypeName = varObjectTypeName;
			
				item.RoomName = varRoomName;
			
				item.TestTypeName = varTestTypeName;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TestDetailIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TestIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TestTypeIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TestDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TestSequenceColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DataSequenceColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn TestResultColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NormalLevelWColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn NormalLevelColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn MeasureUnitColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ParaNameColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ParaStatusColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn NoteColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn PrintDataColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn BarcodeColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdateNumColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifyByColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn PidColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn AssignIdColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateByColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn CreateDateColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifyDateColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn AssignCodeColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn BedNameColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentNameColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn DiagnosticColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn IntOrderColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn ObjectTypeNameColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn RoomNameColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        public static TableSchema.TableColumn TestTypeNameColumn
        {
            get { return Schema.Columns[31]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TestDetailId = @"TestDetail_ID";
			 public static string TestId = @"Test_ID";
			 public static string PatientId = @"Patient_ID";
			 public static string PatientCode = @"Patient_Code";
			 public static string TestTypeId = @"TestType_ID";
			 public static string TestDate = @"Test_Date";
			 public static string TestSequence = @"Test_Sequence";
			 public static string DataSequence = @"Data_Sequence";
			 public static string TestResult = @"Test_Result";
			 public static string NormalLevelW = @"Normal_levelW";
			 public static string NormalLevel = @"Normal_Level";
			 public static string MeasureUnit = @"Measure_Unit";
			 public static string ParaName = @"Para_Name";
			 public static string ParaStatus = @"Para_Status";
			 public static string Note = @"Note";
			 public static string PrintData = @"PrintData";
			 public static string Barcode = @"Barcode";
			 public static string UpdateNum = @"UpdateNum";
			 public static string ModifyBy = @"Modify_By";
			 public static string Pid = @"PID";
			 public static string AssignId = @"Assign_Id";
			 public static string CreateBy = @"CreateBy";
			 public static string CreateDate = @"CreateDate";
			 public static string ModifyDate = @"ModifyDate";
			 public static string AssignCode = @"Assign_Code";
			 public static string BedName = @"Bed_Name";
			 public static string DepartmentName = @"Department_Name";
			 public static string Diagnostic = @"Diagnostic";
			 public static string IntOrder = @"intOrder";
			 public static string ObjectTypeName = @"ObjectType_Name";
			 public static string RoomName = @"Room_Name";
			 public static string TestTypeName = @"TestType_Name";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
