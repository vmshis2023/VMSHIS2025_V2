using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.QMS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the QmsChoKham class.
	/// </summary>
    [Serializable]
	public partial class QmsChoKhamCollection : ActiveList<QmsChoKham, QmsChoKhamCollection>
	{	   
		public QmsChoKhamCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>QmsChoKhamCollection</returns>
		public QmsChoKhamCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                QmsChoKham o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the QMS_ChoKham table.
	/// </summary>
	[Serializable]
	public partial class QmsChoKham : ActiveRecord<QmsChoKham>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public QmsChoKham()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public QmsChoKham(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public QmsChoKham(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public QmsChoKham(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QMS_ChoKham", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarRegId = new TableSchema.TableColumn(schema);
				colvarRegId.ColumnName = "Reg_ID";
				colvarRegId.DataType = DbType.Int32;
				colvarRegId.MaxLength = 0;
				colvarRegId.AutoIncrement = false;
				colvarRegId.IsNullable = false;
				colvarRegId.IsPrimaryKey = true;
				colvarRegId.IsForeignKey = false;
				colvarRegId.IsReadOnly = false;
				colvarRegId.DefaultSetting = @"";
				colvarRegId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegId);
				
				TableSchema.TableColumn colvarPatientId = new TableSchema.TableColumn(schema);
				colvarPatientId.ColumnName = "Patient_ID";
				colvarPatientId.DataType = DbType.Int32;
				colvarPatientId.MaxLength = 0;
				colvarPatientId.AutoIncrement = false;
				colvarPatientId.IsNullable = true;
				colvarPatientId.IsPrimaryKey = false;
				colvarPatientId.IsForeignKey = false;
				colvarPatientId.IsReadOnly = false;
				colvarPatientId.DefaultSetting = @"";
				colvarPatientId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientId);
				
				TableSchema.TableColumn colvarPatientCode = new TableSchema.TableColumn(schema);
				colvarPatientCode.ColumnName = "Patient_Code";
				colvarPatientCode.DataType = DbType.String;
				colvarPatientCode.MaxLength = 20;
				colvarPatientCode.AutoIncrement = false;
				colvarPatientCode.IsNullable = true;
				colvarPatientCode.IsPrimaryKey = false;
				colvarPatientCode.IsForeignKey = false;
				colvarPatientCode.IsReadOnly = false;
				colvarPatientCode.DefaultSetting = @"";
				colvarPatientCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientCode);
				
				TableSchema.TableColumn colvarPatientName = new TableSchema.TableColumn(schema);
				colvarPatientName.ColumnName = "PatientName";
				colvarPatientName.DataType = DbType.String;
				colvarPatientName.MaxLength = 100;
				colvarPatientName.AutoIncrement = false;
				colvarPatientName.IsNullable = true;
				colvarPatientName.IsPrimaryKey = false;
				colvarPatientName.IsForeignKey = false;
				colvarPatientName.IsReadOnly = false;
				colvarPatientName.DefaultSetting = @"";
				colvarPatientName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientName);
				
				TableSchema.TableColumn colvarYearOfBirth = new TableSchema.TableColumn(schema);
				colvarYearOfBirth.ColumnName = "YearOfBirth";
				colvarYearOfBirth.DataType = DbType.Int32;
				colvarYearOfBirth.MaxLength = 0;
				colvarYearOfBirth.AutoIncrement = false;
				colvarYearOfBirth.IsNullable = true;
				colvarYearOfBirth.IsPrimaryKey = false;
				colvarYearOfBirth.IsForeignKey = false;
				colvarYearOfBirth.IsReadOnly = false;
				colvarYearOfBirth.DefaultSetting = @"";
				colvarYearOfBirth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarYearOfBirth);
				
				TableSchema.TableColumn colvarPatientSex = new TableSchema.TableColumn(schema);
				colvarPatientSex.ColumnName = "PatientSex";
				colvarPatientSex.DataType = DbType.Int32;
				colvarPatientSex.MaxLength = 0;
				colvarPatientSex.AutoIncrement = false;
				colvarPatientSex.IsNullable = true;
				colvarPatientSex.IsPrimaryKey = false;
				colvarPatientSex.IsForeignKey = false;
				colvarPatientSex.IsReadOnly = false;
				colvarPatientSex.DefaultSetting = @"";
				colvarPatientSex.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPatientSex);
				
				TableSchema.TableColumn colvarRegDate = new TableSchema.TableColumn(schema);
				colvarRegDate.ColumnName = "Reg_Date";
				colvarRegDate.DataType = DbType.DateTime;
				colvarRegDate.MaxLength = 0;
				colvarRegDate.AutoIncrement = false;
				colvarRegDate.IsNullable = true;
				colvarRegDate.IsPrimaryKey = false;
				colvarRegDate.IsForeignKey = false;
				colvarRegDate.IsReadOnly = false;
				colvarRegDate.DefaultSetting = @"";
				colvarRegDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegDate);
				
				TableSchema.TableColumn colvarInputDate = new TableSchema.TableColumn(schema);
				colvarInputDate.ColumnName = "Input_Date";
				colvarInputDate.DataType = DbType.DateTime;
				colvarInputDate.MaxLength = 0;
				colvarInputDate.AutoIncrement = false;
				colvarInputDate.IsNullable = true;
				colvarInputDate.IsPrimaryKey = false;
				colvarInputDate.IsForeignKey = false;
				colvarInputDate.IsReadOnly = false;
				colvarInputDate.DefaultSetting = @"";
				colvarInputDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInputDate);
				
				TableSchema.TableColumn colvarDepartmentId = new TableSchema.TableColumn(schema);
				colvarDepartmentId.ColumnName = "Department_ID";
				colvarDepartmentId.DataType = DbType.Int16;
				colvarDepartmentId.MaxLength = 0;
				colvarDepartmentId.AutoIncrement = false;
				colvarDepartmentId.IsNullable = true;
				colvarDepartmentId.IsPrimaryKey = false;
				colvarDepartmentId.IsForeignKey = false;
				colvarDepartmentId.IsReadOnly = false;
				colvarDepartmentId.DefaultSetting = @"";
				colvarDepartmentId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmentId);
				
				TableSchema.TableColumn colvarDoctorAssignId = new TableSchema.TableColumn(schema);
				colvarDoctorAssignId.ColumnName = "DoctorAssign_ID";
				colvarDoctorAssignId.DataType = DbType.Int16;
				colvarDoctorAssignId.MaxLength = 0;
				colvarDoctorAssignId.AutoIncrement = false;
				colvarDoctorAssignId.IsNullable = true;
				colvarDoctorAssignId.IsPrimaryKey = false;
				colvarDoctorAssignId.IsForeignKey = false;
				colvarDoctorAssignId.IsReadOnly = false;
				colvarDoctorAssignId.DefaultSetting = @"";
				colvarDoctorAssignId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDoctorAssignId);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "Status";
				colvarStatus.DataType = DbType.Byte;
				colvarStatus.MaxLength = 0;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = true;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				colvarStatus.DefaultSetting = @"";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarSoKham = new TableSchema.TableColumn(schema);
				colvarSoKham.ColumnName = "So_Kham";
				colvarSoKham.DataType = DbType.Int16;
				colvarSoKham.MaxLength = 0;
				colvarSoKham.AutoIncrement = false;
				colvarSoKham.IsNullable = true;
				colvarSoKham.IsPrimaryKey = false;
				colvarSoKham.IsForeignKey = false;
				colvarSoKham.IsReadOnly = false;
				colvarSoKham.DefaultSetting = @"";
				colvarSoKham.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoKham);
				
				TableSchema.TableColumn colvarUuTien = new TableSchema.TableColumn(schema);
				colvarUuTien.ColumnName = "uu_tien";
				colvarUuTien.DataType = DbType.Int16;
				colvarUuTien.MaxLength = 0;
				colvarUuTien.AutoIncrement = false;
				colvarUuTien.IsNullable = true;
				colvarUuTien.IsPrimaryKey = false;
				colvarUuTien.IsForeignKey = false;
				colvarUuTien.IsReadOnly = false;
				colvarUuTien.DefaultSetting = @"";
				colvarUuTien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUuTien);
				
				TableSchema.TableColumn colvarMaKhoaThien = new TableSchema.TableColumn(schema);
				colvarMaKhoaThien.ColumnName = "MA_KHOA_THIEN";
				colvarMaKhoaThien.DataType = DbType.String;
				colvarMaKhoaThien.MaxLength = 10;
				colvarMaKhoaThien.AutoIncrement = false;
				colvarMaKhoaThien.IsNullable = true;
				colvarMaKhoaThien.IsPrimaryKey = false;
				colvarMaKhoaThien.IsForeignKey = false;
				colvarMaKhoaThien.IsReadOnly = false;
				colvarMaKhoaThien.DefaultSetting = @"";
				colvarMaKhoaThien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaKhoaThien);
				
				TableSchema.TableColumn colvarMaPhongStt = new TableSchema.TableColumn(schema);
				colvarMaPhongStt.ColumnName = "MA_PHONG_STT";
				colvarMaPhongStt.DataType = DbType.String;
				colvarMaPhongStt.MaxLength = 20;
				colvarMaPhongStt.AutoIncrement = false;
				colvarMaPhongStt.IsNullable = true;
				colvarMaPhongStt.IsPrimaryKey = false;
				colvarMaPhongStt.IsForeignKey = false;
				colvarMaPhongStt.IsReadOnly = false;
				colvarMaPhongStt.DefaultSetting = @"";
				colvarMaPhongStt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaPhongStt);
				
				TableSchema.TableColumn colvarMaCoSo = new TableSchema.TableColumn(schema);
				colvarMaCoSo.ColumnName = "Ma_CoSo";
				colvarMaCoSo.DataType = DbType.String;
				colvarMaCoSo.MaxLength = 10;
				colvarMaCoSo.AutoIncrement = false;
				colvarMaCoSo.IsNullable = true;
				colvarMaCoSo.IsPrimaryKey = false;
				colvarMaCoSo.IsForeignKey = false;
				colvarMaCoSo.IsReadOnly = false;
				colvarMaCoSo.DefaultSetting = @"";
				colvarMaCoSo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaCoSo);
				
				TableSchema.TableColumn colvarExamId = new TableSchema.TableColumn(schema);
				colvarExamId.ColumnName = "Exam_ID";
				colvarExamId.DataType = DbType.Int32;
				colvarExamId.MaxLength = 0;
				colvarExamId.AutoIncrement = false;
				colvarExamId.IsNullable = true;
				colvarExamId.IsPrimaryKey = false;
				colvarExamId.IsForeignKey = false;
				colvarExamId.IsReadOnly = false;
				colvarExamId.DefaultSetting = @"";
				colvarExamId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExamId);
				
				TableSchema.TableColumn colvarHienThi = new TableSchema.TableColumn(schema);
				colvarHienThi.ColumnName = "Hien_Thi";
				colvarHienThi.DataType = DbType.Byte;
				colvarHienThi.MaxLength = 0;
				colvarHienThi.AutoIncrement = false;
				colvarHienThi.IsNullable = true;
				colvarHienThi.IsPrimaryKey = false;
				colvarHienThi.IsForeignKey = false;
				colvarHienThi.IsReadOnly = false;
				
						colvarHienThi.DefaultSetting = @"((0))";
				colvarHienThi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHienThi);
				
				TableSchema.TableColumn colvarQmsHienThi = new TableSchema.TableColumn(schema);
				colvarQmsHienThi.ColumnName = "QMS_HienThi";
				colvarQmsHienThi.DataType = DbType.Boolean;
				colvarQmsHienThi.MaxLength = 0;
				colvarQmsHienThi.AutoIncrement = false;
				colvarQmsHienThi.IsNullable = true;
				colvarQmsHienThi.IsPrimaryKey = false;
				colvarQmsHienThi.IsForeignKey = false;
				colvarQmsHienThi.IsReadOnly = false;
				colvarQmsHienThi.DefaultSetting = @"";
				colvarQmsHienThi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQmsHienThi);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("QMS_ChoKham",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("RegId")]
		[Bindable(true)]
		public int RegId 
		{
			get { return GetColumnValue<int>(Columns.RegId); }
			set { SetColumnValue(Columns.RegId, value); }
		}
		  
		[XmlAttribute("PatientId")]
		[Bindable(true)]
		public int? PatientId 
		{
			get { return GetColumnValue<int?>(Columns.PatientId); }
			set { SetColumnValue(Columns.PatientId, value); }
		}
		  
		[XmlAttribute("PatientCode")]
		[Bindable(true)]
		public string PatientCode 
		{
			get { return GetColumnValue<string>(Columns.PatientCode); }
			set { SetColumnValue(Columns.PatientCode, value); }
		}
		  
		[XmlAttribute("PatientName")]
		[Bindable(true)]
		public string PatientName 
		{
			get { return GetColumnValue<string>(Columns.PatientName); }
			set { SetColumnValue(Columns.PatientName, value); }
		}
		  
		[XmlAttribute("YearOfBirth")]
		[Bindable(true)]
		public int? YearOfBirth 
		{
			get { return GetColumnValue<int?>(Columns.YearOfBirth); }
			set { SetColumnValue(Columns.YearOfBirth, value); }
		}
		  
		[XmlAttribute("PatientSex")]
		[Bindable(true)]
		public int? PatientSex 
		{
			get { return GetColumnValue<int?>(Columns.PatientSex); }
			set { SetColumnValue(Columns.PatientSex, value); }
		}
		  
		[XmlAttribute("RegDate")]
		[Bindable(true)]
		public DateTime? RegDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.RegDate); }
			set { SetColumnValue(Columns.RegDate, value); }
		}
		  
		[XmlAttribute("InputDate")]
		[Bindable(true)]
		public DateTime? InputDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.InputDate); }
			set { SetColumnValue(Columns.InputDate, value); }
		}
		  
		[XmlAttribute("DepartmentId")]
		[Bindable(true)]
		public short? DepartmentId 
		{
			get { return GetColumnValue<short?>(Columns.DepartmentId); }
			set { SetColumnValue(Columns.DepartmentId, value); }
		}
		  
		[XmlAttribute("DoctorAssignId")]
		[Bindable(true)]
		public short? DoctorAssignId 
		{
			get { return GetColumnValue<short?>(Columns.DoctorAssignId); }
			set { SetColumnValue(Columns.DoctorAssignId, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public byte? Status 
		{
			get { return GetColumnValue<byte?>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("SoKham")]
		[Bindable(true)]
		public short? SoKham 
		{
			get { return GetColumnValue<short?>(Columns.SoKham); }
			set { SetColumnValue(Columns.SoKham, value); }
		}
		  
		[XmlAttribute("UuTien")]
		[Bindable(true)]
		public short? UuTien 
		{
			get { return GetColumnValue<short?>(Columns.UuTien); }
			set { SetColumnValue(Columns.UuTien, value); }
		}
		  
		[XmlAttribute("MaKhoaThien")]
		[Bindable(true)]
		public string MaKhoaThien 
		{
			get { return GetColumnValue<string>(Columns.MaKhoaThien); }
			set { SetColumnValue(Columns.MaKhoaThien, value); }
		}
		  
		[XmlAttribute("MaPhongStt")]
		[Bindable(true)]
		public string MaPhongStt 
		{
			get { return GetColumnValue<string>(Columns.MaPhongStt); }
			set { SetColumnValue(Columns.MaPhongStt, value); }
		}
		  
		[XmlAttribute("MaCoSo")]
		[Bindable(true)]
		public string MaCoSo 
		{
			get { return GetColumnValue<string>(Columns.MaCoSo); }
			set { SetColumnValue(Columns.MaCoSo, value); }
		}
		  
		[XmlAttribute("ExamId")]
		[Bindable(true)]
		public int? ExamId 
		{
			get { return GetColumnValue<int?>(Columns.ExamId); }
			set { SetColumnValue(Columns.ExamId, value); }
		}
		  
		[XmlAttribute("HienThi")]
		[Bindable(true)]
		public byte? HienThi 
		{
			get { return GetColumnValue<byte?>(Columns.HienThi); }
			set { SetColumnValue(Columns.HienThi, value); }
		}
		  
		[XmlAttribute("QmsHienThi")]
		[Bindable(true)]
		public bool? QmsHienThi 
		{
			get { return GetColumnValue<bool?>(Columns.QmsHienThi); }
			set { SetColumnValue(Columns.QmsHienThi, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varRegId,int? varPatientId,string varPatientCode,string varPatientName,int? varYearOfBirth,int? varPatientSex,DateTime? varRegDate,DateTime? varInputDate,short? varDepartmentId,short? varDoctorAssignId,byte? varStatus,short? varSoKham,short? varUuTien,string varMaKhoaThien,string varMaPhongStt,string varMaCoSo,int? varExamId,byte? varHienThi,bool? varQmsHienThi)
		{
			QmsChoKham item = new QmsChoKham();
			
			item.RegId = varRegId;
			
			item.PatientId = varPatientId;
			
			item.PatientCode = varPatientCode;
			
			item.PatientName = varPatientName;
			
			item.YearOfBirth = varYearOfBirth;
			
			item.PatientSex = varPatientSex;
			
			item.RegDate = varRegDate;
			
			item.InputDate = varInputDate;
			
			item.DepartmentId = varDepartmentId;
			
			item.DoctorAssignId = varDoctorAssignId;
			
			item.Status = varStatus;
			
			item.SoKham = varSoKham;
			
			item.UuTien = varUuTien;
			
			item.MaKhoaThien = varMaKhoaThien;
			
			item.MaPhongStt = varMaPhongStt;
			
			item.MaCoSo = varMaCoSo;
			
			item.ExamId = varExamId;
			
			item.HienThi = varHienThi;
			
			item.QmsHienThi = varQmsHienThi;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varRegId,int? varPatientId,string varPatientCode,string varPatientName,int? varYearOfBirth,int? varPatientSex,DateTime? varRegDate,DateTime? varInputDate,short? varDepartmentId,short? varDoctorAssignId,byte? varStatus,short? varSoKham,short? varUuTien,string varMaKhoaThien,string varMaPhongStt,string varMaCoSo,int? varExamId,byte? varHienThi,bool? varQmsHienThi)
		{
			QmsChoKham item = new QmsChoKham();
			
				item.RegId = varRegId;
			
				item.PatientId = varPatientId;
			
				item.PatientCode = varPatientCode;
			
				item.PatientName = varPatientName;
			
				item.YearOfBirth = varYearOfBirth;
			
				item.PatientSex = varPatientSex;
			
				item.RegDate = varRegDate;
			
				item.InputDate = varInputDate;
			
				item.DepartmentId = varDepartmentId;
			
				item.DoctorAssignId = varDoctorAssignId;
			
				item.Status = varStatus;
			
				item.SoKham = varSoKham;
			
				item.UuTien = varUuTien;
			
				item.MaKhoaThien = varMaKhoaThien;
			
				item.MaPhongStt = varMaPhongStt;
			
				item.MaCoSo = varMaCoSo;
			
				item.ExamId = varExamId;
			
				item.HienThi = varHienThi;
			
				item.QmsHienThi = varQmsHienThi;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn RegIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientCodeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientNameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn YearOfBirthColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PatientSexColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn RegDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn InputDateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmentIdColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn DoctorAssignIdColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn SoKhamColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn UuTienColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn MaKhoaThienColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn MaPhongSttColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn MaCoSoColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn ExamIdColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn HienThiColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn QmsHienThiColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string RegId = @"Reg_ID";
			 public static string PatientId = @"Patient_ID";
			 public static string PatientCode = @"Patient_Code";
			 public static string PatientName = @"PatientName";
			 public static string YearOfBirth = @"YearOfBirth";
			 public static string PatientSex = @"PatientSex";
			 public static string RegDate = @"Reg_Date";
			 public static string InputDate = @"Input_Date";
			 public static string DepartmentId = @"Department_ID";
			 public static string DoctorAssignId = @"DoctorAssign_ID";
			 public static string Status = @"Status";
			 public static string SoKham = @"So_Kham";
			 public static string UuTien = @"uu_tien";
			 public static string MaKhoaThien = @"MA_KHOA_THIEN";
			 public static string MaPhongStt = @"MA_PHONG_STT";
			 public static string MaCoSo = @"Ma_CoSo";
			 public static string ExamId = @"Exam_ID";
			 public static string HienThi = @"Hien_Thi";
			 public static string QmsHienThi = @"QMS_HienThi";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
