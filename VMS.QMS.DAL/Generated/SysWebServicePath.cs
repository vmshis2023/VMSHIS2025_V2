using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.QMS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysWebServicePath class.
	/// </summary>
    [Serializable]
	public partial class SysWebServicePathCollection : ActiveList<SysWebServicePath, SysWebServicePathCollection>
	{	   
		public SysWebServicePathCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysWebServicePathCollection</returns>
		public SysWebServicePathCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysWebServicePath o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Sys_WebServicePath table.
	/// </summary>
	[Serializable]
	public partial class SysWebServicePath : ActiveRecord<SysWebServicePath>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SysWebServicePath()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysWebServicePath(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysWebServicePath(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysWebServicePath(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Sys_WebServicePath", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarWebPathCode = new TableSchema.TableColumn(schema);
				colvarWebPathCode.ColumnName = "WebPath_Code";
				colvarWebPathCode.DataType = DbType.AnsiString;
				colvarWebPathCode.MaxLength = 30;
				colvarWebPathCode.AutoIncrement = false;
				colvarWebPathCode.IsNullable = false;
				colvarWebPathCode.IsPrimaryKey = true;
				colvarWebPathCode.IsForeignKey = false;
				colvarWebPathCode.IsReadOnly = false;
				colvarWebPathCode.DefaultSetting = @"";
				colvarWebPathCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWebPathCode);
				
				TableSchema.TableColumn colvarMaCoSo = new TableSchema.TableColumn(schema);
				colvarMaCoSo.ColumnName = "Ma_CoSo";
				colvarMaCoSo.DataType = DbType.String;
				colvarMaCoSo.MaxLength = 10;
				colvarMaCoSo.AutoIncrement = false;
				colvarMaCoSo.IsNullable = false;
				colvarMaCoSo.IsPrimaryKey = true;
				colvarMaCoSo.IsForeignKey = false;
				colvarMaCoSo.IsReadOnly = false;
				colvarMaCoSo.DefaultSetting = @"";
				colvarMaCoSo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaCoSo);
				
				TableSchema.TableColumn colvarWebPathName = new TableSchema.TableColumn(schema);
				colvarWebPathName.ColumnName = "WebPath_Name";
				colvarWebPathName.DataType = DbType.String;
				colvarWebPathName.MaxLength = 100;
				colvarWebPathName.AutoIncrement = false;
				colvarWebPathName.IsNullable = false;
				colvarWebPathName.IsPrimaryKey = false;
				colvarWebPathName.IsForeignKey = false;
				colvarWebPathName.IsReadOnly = false;
				colvarWebPathName.DefaultSetting = @"";
				colvarWebPathName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWebPathName);
				
				TableSchema.TableColumn colvarMaKhoaThucHien = new TableSchema.TableColumn(schema);
				colvarMaKhoaThucHien.ColumnName = "Ma_KhoaThucHien";
				colvarMaKhoaThucHien.DataType = DbType.String;
				colvarMaKhoaThucHien.MaxLength = 10;
				colvarMaKhoaThucHien.AutoIncrement = false;
				colvarMaKhoaThucHien.IsNullable = true;
				colvarMaKhoaThucHien.IsPrimaryKey = false;
				colvarMaKhoaThucHien.IsForeignKey = false;
				colvarMaKhoaThucHien.IsReadOnly = false;
				colvarMaKhoaThucHien.DefaultSetting = @"";
				colvarMaKhoaThucHien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaKhoaThucHien);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("Sys_WebServicePath",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("WebPathCode")]
		[Bindable(true)]
		public string WebPathCode 
		{
			get { return GetColumnValue<string>(Columns.WebPathCode); }
			set { SetColumnValue(Columns.WebPathCode, value); }
		}
		  
		[XmlAttribute("MaCoSo")]
		[Bindable(true)]
		public string MaCoSo 
		{
			get { return GetColumnValue<string>(Columns.MaCoSo); }
			set { SetColumnValue(Columns.MaCoSo, value); }
		}
		  
		[XmlAttribute("WebPathName")]
		[Bindable(true)]
		public string WebPathName 
		{
			get { return GetColumnValue<string>(Columns.WebPathName); }
			set { SetColumnValue(Columns.WebPathName, value); }
		}
		  
		[XmlAttribute("MaKhoaThucHien")]
		[Bindable(true)]
		public string MaKhoaThucHien 
		{
			get { return GetColumnValue<string>(Columns.MaKhoaThucHien); }
			set { SetColumnValue(Columns.MaKhoaThucHien, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varWebPathCode,string varMaCoSo,string varWebPathName,string varMaKhoaThucHien)
		{
			SysWebServicePath item = new SysWebServicePath();
			
			item.WebPathCode = varWebPathCode;
			
			item.MaCoSo = varMaCoSo;
			
			item.WebPathName = varWebPathName;
			
			item.MaKhoaThucHien = varMaKhoaThucHien;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varWebPathCode,string varMaCoSo,string varWebPathName,string varMaKhoaThucHien)
		{
			SysWebServicePath item = new SysWebServicePath();
			
				item.WebPathCode = varWebPathCode;
			
				item.MaCoSo = varMaCoSo;
			
				item.WebPathName = varWebPathName;
			
				item.MaKhoaThucHien = varMaKhoaThucHien;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn WebPathCodeColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaCoSoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn WebPathNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn MaKhoaThucHienColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string WebPathCode = @"WebPath_Code";
			 public static string MaCoSo = @"Ma_CoSo";
			 public static string WebPathName = @"WebPath_Name";
			 public static string MaKhoaThucHien = @"Ma_KhoaThucHien";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
