using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.QMS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the QmsPhongBan class.
	/// </summary>
    [Serializable]
	public partial class QmsPhongBanCollection : ActiveList<QmsPhongBan, QmsPhongBanCollection>
	{	   
		public QmsPhongBanCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>QmsPhongBanCollection</returns>
		public QmsPhongBanCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                QmsPhongBan o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the QMS_PhongBan table.
	/// </summary>
	[Serializable]
	public partial class QmsPhongBan : ActiveRecord<QmsPhongBan>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public QmsPhongBan()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public QmsPhongBan(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public QmsPhongBan(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public QmsPhongBan(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("QMS_PhongBan", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdPhong = new TableSchema.TableColumn(schema);
				colvarIdPhong.ColumnName = "Id_Phong";
				colvarIdPhong.DataType = DbType.Int16;
				colvarIdPhong.MaxLength = 0;
				colvarIdPhong.AutoIncrement = true;
				colvarIdPhong.IsNullable = false;
				colvarIdPhong.IsPrimaryKey = true;
				colvarIdPhong.IsForeignKey = false;
				colvarIdPhong.IsReadOnly = false;
				colvarIdPhong.DefaultSetting = @"";
				colvarIdPhong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhong);
				
				TableSchema.TableColumn colvarMaPhong = new TableSchema.TableColumn(schema);
				colvarMaPhong.ColumnName = "Ma_Phong";
				colvarMaPhong.DataType = DbType.String;
				colvarMaPhong.MaxLength = 50;
				colvarMaPhong.AutoIncrement = false;
				colvarMaPhong.IsNullable = true;
				colvarMaPhong.IsPrimaryKey = false;
				colvarMaPhong.IsForeignKey = false;
				colvarMaPhong.IsReadOnly = false;
				colvarMaPhong.DefaultSetting = @"";
				colvarMaPhong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaPhong);
				
				TableSchema.TableColumn colvarTenPhong = new TableSchema.TableColumn(schema);
				colvarTenPhong.ColumnName = "Ten_Phong";
				colvarTenPhong.DataType = DbType.String;
				colvarTenPhong.MaxLength = 150;
				colvarTenPhong.AutoIncrement = false;
				colvarTenPhong.IsNullable = true;
				colvarTenPhong.IsPrimaryKey = false;
				colvarTenPhong.IsForeignKey = false;
				colvarTenPhong.IsReadOnly = false;
				colvarTenPhong.DefaultSetting = @"";
				colvarTenPhong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenPhong);
				
				TableSchema.TableColumn colvarStt = new TableSchema.TableColumn(schema);
				colvarStt.ColumnName = "STT";
				colvarStt.DataType = DbType.Int16;
				colvarStt.MaxLength = 0;
				colvarStt.AutoIncrement = false;
				colvarStt.IsNullable = false;
				colvarStt.IsPrimaryKey = false;
				colvarStt.IsForeignKey = false;
				colvarStt.IsReadOnly = false;
				colvarStt.DefaultSetting = @"";
				colvarStt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStt);
				
				TableSchema.TableColumn colvarHienThi = new TableSchema.TableColumn(schema);
				colvarHienThi.ColumnName = "Hien_Thi";
				colvarHienThi.DataType = DbType.Byte;
				colvarHienThi.MaxLength = 0;
				colvarHienThi.AutoIncrement = false;
				colvarHienThi.IsNullable = true;
				colvarHienThi.IsPrimaryKey = false;
				colvarHienThi.IsForeignKey = false;
				colvarHienThi.IsReadOnly = false;
				colvarHienThi.DefaultSetting = @"";
				colvarHienThi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHienThi);
				
				TableSchema.TableColumn colvarTenBs = new TableSchema.TableColumn(schema);
				colvarTenBs.ColumnName = "Ten_Bs";
				colvarTenBs.DataType = DbType.String;
				colvarTenBs.MaxLength = 100;
				colvarTenBs.AutoIncrement = false;
				colvarTenBs.IsNullable = true;
				colvarTenBs.IsPrimaryKey = false;
				colvarTenBs.IsForeignKey = false;
				colvarTenBs.IsReadOnly = false;
				colvarTenBs.DefaultSetting = @"";
				colvarTenBs.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenBs);
				
				TableSchema.TableColumn colvarUuTien = new TableSchema.TableColumn(schema);
				colvarUuTien.ColumnName = "UuTien";
				colvarUuTien.DataType = DbType.Byte;
				colvarUuTien.MaxLength = 0;
				colvarUuTien.AutoIncrement = false;
				colvarUuTien.IsNullable = true;
				colvarUuTien.IsPrimaryKey = false;
				colvarUuTien.IsForeignKey = false;
				colvarUuTien.IsReadOnly = false;
				colvarUuTien.DefaultSetting = @"";
				colvarUuTien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUuTien);
				
				TableSchema.TableColumn colvarSoPhong = new TableSchema.TableColumn(schema);
				colvarSoPhong.ColumnName = "SoPhong";
				colvarSoPhong.DataType = DbType.String;
				colvarSoPhong.MaxLength = 20;
				colvarSoPhong.AutoIncrement = false;
				colvarSoPhong.IsNullable = true;
				colvarSoPhong.IsPrimaryKey = false;
				colvarSoPhong.IsForeignKey = false;
				colvarSoPhong.IsReadOnly = false;
				colvarSoPhong.DefaultSetting = @"";
				colvarSoPhong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoPhong);
				
				TableSchema.TableColumn colvarMaKhoa = new TableSchema.TableColumn(schema);
				colvarMaKhoa.ColumnName = "MaKhoa";
				colvarMaKhoa.DataType = DbType.String;
				colvarMaKhoa.MaxLength = 10;
				colvarMaKhoa.AutoIncrement = false;
				colvarMaKhoa.IsNullable = true;
				colvarMaKhoa.IsPrimaryKey = false;
				colvarMaKhoa.IsForeignKey = false;
				colvarMaKhoa.IsReadOnly = false;
				colvarMaKhoa.DefaultSetting = @"";
				colvarMaKhoa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaKhoa);
				
				TableSchema.TableColumn colvarThoiGianCho = new TableSchema.TableColumn(schema);
				colvarThoiGianCho.ColumnName = "ThoiGianCho";
				colvarThoiGianCho.DataType = DbType.Int16;
				colvarThoiGianCho.MaxLength = 0;
				colvarThoiGianCho.AutoIncrement = false;
				colvarThoiGianCho.IsNullable = true;
				colvarThoiGianCho.IsPrimaryKey = false;
				colvarThoiGianCho.IsForeignKey = false;
				colvarThoiGianCho.IsReadOnly = false;
				colvarThoiGianCho.DefaultSetting = @"";
				colvarThoiGianCho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThoiGianCho);
				
				TableSchema.TableColumn colvarMotathem = new TableSchema.TableColumn(schema);
				colvarMotathem.ColumnName = "Motathem";
				colvarMotathem.DataType = DbType.String;
				colvarMotathem.MaxLength = 50;
				colvarMotathem.AutoIncrement = false;
				colvarMotathem.IsNullable = true;
				colvarMotathem.IsPrimaryKey = false;
				colvarMotathem.IsForeignKey = false;
				colvarMotathem.IsReadOnly = false;
				colvarMotathem.DefaultSetting = @"";
				colvarMotathem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMotathem);
				
				TableSchema.TableColumn colvarMaChucnang = new TableSchema.TableColumn(schema);
				colvarMaChucnang.ColumnName = "ma_chucnang";
				colvarMaChucnang.DataType = DbType.String;
				colvarMaChucnang.MaxLength = 50;
				colvarMaChucnang.AutoIncrement = false;
				colvarMaChucnang.IsNullable = true;
				colvarMaChucnang.IsPrimaryKey = false;
				colvarMaChucnang.IsForeignKey = false;
				colvarMaChucnang.IsReadOnly = false;
				colvarMaChucnang.DefaultSetting = @"";
				colvarMaChucnang.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaChucnang);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("QMS_PhongBan",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdPhong")]
		[Bindable(true)]
		public short IdPhong 
		{
			get { return GetColumnValue<short>(Columns.IdPhong); }
			set { SetColumnValue(Columns.IdPhong, value); }
		}
		  
		[XmlAttribute("MaPhong")]
		[Bindable(true)]
		public string MaPhong 
		{
			get { return GetColumnValue<string>(Columns.MaPhong); }
			set { SetColumnValue(Columns.MaPhong, value); }
		}
		  
		[XmlAttribute("TenPhong")]
		[Bindable(true)]
		public string TenPhong 
		{
			get { return GetColumnValue<string>(Columns.TenPhong); }
			set { SetColumnValue(Columns.TenPhong, value); }
		}
		  
		[XmlAttribute("Stt")]
		[Bindable(true)]
		public short Stt 
		{
			get { return GetColumnValue<short>(Columns.Stt); }
			set { SetColumnValue(Columns.Stt, value); }
		}
		  
		[XmlAttribute("HienThi")]
		[Bindable(true)]
		public byte? HienThi 
		{
			get { return GetColumnValue<byte?>(Columns.HienThi); }
			set { SetColumnValue(Columns.HienThi, value); }
		}
		  
		[XmlAttribute("TenBs")]
		[Bindable(true)]
		public string TenBs 
		{
			get { return GetColumnValue<string>(Columns.TenBs); }
			set { SetColumnValue(Columns.TenBs, value); }
		}
		  
		[XmlAttribute("UuTien")]
		[Bindable(true)]
		public byte? UuTien 
		{
			get { return GetColumnValue<byte?>(Columns.UuTien); }
			set { SetColumnValue(Columns.UuTien, value); }
		}
		  
		[XmlAttribute("SoPhong")]
		[Bindable(true)]
		public string SoPhong 
		{
			get { return GetColumnValue<string>(Columns.SoPhong); }
			set { SetColumnValue(Columns.SoPhong, value); }
		}
		  
		[XmlAttribute("MaKhoa")]
		[Bindable(true)]
		public string MaKhoa 
		{
			get { return GetColumnValue<string>(Columns.MaKhoa); }
			set { SetColumnValue(Columns.MaKhoa, value); }
		}
		  
		[XmlAttribute("ThoiGianCho")]
		[Bindable(true)]
		public short? ThoiGianCho 
		{
			get { return GetColumnValue<short?>(Columns.ThoiGianCho); }
			set { SetColumnValue(Columns.ThoiGianCho, value); }
		}
		  
		[XmlAttribute("Motathem")]
		[Bindable(true)]
		public string Motathem 
		{
			get { return GetColumnValue<string>(Columns.Motathem); }
			set { SetColumnValue(Columns.Motathem, value); }
		}
		  
		[XmlAttribute("MaChucnang")]
		[Bindable(true)]
		public string MaChucnang 
		{
			get { return GetColumnValue<string>(Columns.MaChucnang); }
			set { SetColumnValue(Columns.MaChucnang, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaPhong,string varTenPhong,short varStt,byte? varHienThi,string varTenBs,byte? varUuTien,string varSoPhong,string varMaKhoa,short? varThoiGianCho,string varMotathem,string varMaChucnang)
		{
			QmsPhongBan item = new QmsPhongBan();
			
			item.MaPhong = varMaPhong;
			
			item.TenPhong = varTenPhong;
			
			item.Stt = varStt;
			
			item.HienThi = varHienThi;
			
			item.TenBs = varTenBs;
			
			item.UuTien = varUuTien;
			
			item.SoPhong = varSoPhong;
			
			item.MaKhoa = varMaKhoa;
			
			item.ThoiGianCho = varThoiGianCho;
			
			item.Motathem = varMotathem;
			
			item.MaChucnang = varMaChucnang;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(short varIdPhong,string varMaPhong,string varTenPhong,short varStt,byte? varHienThi,string varTenBs,byte? varUuTien,string varSoPhong,string varMaKhoa,short? varThoiGianCho,string varMotathem,string varMaChucnang)
		{
			QmsPhongBan item = new QmsPhongBan();
			
				item.IdPhong = varIdPhong;
			
				item.MaPhong = varMaPhong;
			
				item.TenPhong = varTenPhong;
			
				item.Stt = varStt;
			
				item.HienThi = varHienThi;
			
				item.TenBs = varTenBs;
			
				item.UuTien = varUuTien;
			
				item.SoPhong = varSoPhong;
			
				item.MaKhoa = varMaKhoa;
			
				item.ThoiGianCho = varThoiGianCho;
			
				item.Motathem = varMotathem;
			
				item.MaChucnang = varMaChucnang;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdPhongColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaPhongColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenPhongColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SttColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn HienThiColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TenBsColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn UuTienColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SoPhongColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn MaKhoaColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ThoiGianChoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn MotathemColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn MaChucnangColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdPhong = @"Id_Phong";
			 public static string MaPhong = @"Ma_Phong";
			 public static string TenPhong = @"Ten_Phong";
			 public static string Stt = @"STT";
			 public static string HienThi = @"Hien_Thi";
			 public static string TenBs = @"Ten_Bs";
			 public static string UuTien = @"UuTien";
			 public static string SoPhong = @"SoPhong";
			 public static string MaKhoa = @"MaKhoa";
			 public static string ThoiGianCho = @"ThoiGianCho";
			 public static string Motathem = @"Motathem";
			 public static string MaChucnang = @"ma_chucnang";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
