<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
        <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="Janus.Windows.Common.JanusApplicationSettings.grdPresDetail" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false" />
            <section name="Janus.Windows.Common.JanusApplicationSettings.grdAssignDetail" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false" />
        </sectionGroup>
    </configSections>
    <system.serviceModel>
        <bindings>
            <basicHttpBinding>
                <binding name="BasicHttpBinding_ILichSuKCB" />
            </basicHttpBinding>
        </bindings>
        <client>
            <endpoint address="http://localhost:3764/LichSuKCB.svc" binding="basicHttpBinding"
                bindingConfiguration="BasicHttpBinding_ILichSuKCB" contract="CheckCard.ILichSuKCB"
                name="BasicHttpBinding_ILichSuKCB" />
        </client>
    </system.serviceModel>
    <userSettings>
        <Janus.Windows.Common.JanusApplicationSettings.grdPresDetail>
            <setting name="LayoutSettings" serializeAs="Xml">
                <value>
                    <base64Binary></base64Binary>
                </value>
            </setting>
        </Janus.Windows.Common.JanusApplicationSettings.grdPresDetail>
        <Janus.Windows.Common.JanusApplicationSettings.grdAssignDetail>
            <setting name="LayoutSettings" serializeAs="Xml">
                <value>
                    <base64Binary></base64Binary>
                </value>
            </setting>
        </Janus.Windows.Common.JanusApplicationSettings.grdAssignDetail>
    </userSettings>
</configuration>