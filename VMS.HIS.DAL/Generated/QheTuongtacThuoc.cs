using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the QheTuongtacThuoc class.
	/// </summary>
    [Serializable]
	public partial class QheTuongtacThuocCollection : ActiveList<QheTuongtacThuoc, QheTuongtacThuocCollection>
	{	   
		public QheTuongtacThuocCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>QheTuongtacThuocCollection</returns>
		public QheTuongtacThuocCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                QheTuongtacThuoc o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the qhe_tuongtac_thuoc table.
	/// </summary>
	[Serializable]
	public partial class QheTuongtacThuoc : ActiveRecord<QheTuongtacThuoc>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public QheTuongtacThuoc()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public QheTuongtacThuoc(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public QheTuongtacThuoc(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public QheTuongtacThuoc(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("qhe_tuongtac_thuoc", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMaHoatchat = new TableSchema.TableColumn(schema);
				colvarMaHoatchat.ColumnName = "ma_hoatchat";
				colvarMaHoatchat.DataType = DbType.String;
				colvarMaHoatchat.MaxLength = 100;
				colvarMaHoatchat.AutoIncrement = false;
				colvarMaHoatchat.IsNullable = false;
				colvarMaHoatchat.IsPrimaryKey = true;
				colvarMaHoatchat.IsForeignKey = false;
				colvarMaHoatchat.IsReadOnly = false;
				colvarMaHoatchat.DefaultSetting = @"";
				colvarMaHoatchat.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaHoatchat);
				
				TableSchema.TableColumn colvarMaTuongtac = new TableSchema.TableColumn(schema);
				colvarMaTuongtac.ColumnName = "ma_tuongtac";
				colvarMaTuongtac.DataType = DbType.String;
				colvarMaTuongtac.MaxLength = 100;
				colvarMaTuongtac.AutoIncrement = false;
				colvarMaTuongtac.IsNullable = false;
				colvarMaTuongtac.IsPrimaryKey = true;
				colvarMaTuongtac.IsForeignKey = false;
				colvarMaTuongtac.IsReadOnly = false;
				colvarMaTuongtac.DefaultSetting = @"";
				colvarMaTuongtac.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaTuongtac);
				
				TableSchema.TableColumn colvarLoai = new TableSchema.TableColumn(schema);
				colvarLoai.ColumnName = "loai";
				colvarLoai.DataType = DbType.Int16;
				colvarLoai.MaxLength = 0;
				colvarLoai.AutoIncrement = false;
				colvarLoai.IsNullable = false;
				colvarLoai.IsPrimaryKey = true;
				colvarLoai.IsForeignKey = false;
				colvarLoai.IsReadOnly = false;
				colvarLoai.DefaultSetting = @"";
				colvarLoai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoai);
				
				TableSchema.TableColumn colvarCoChe = new TableSchema.TableColumn(schema);
				colvarCoChe.ColumnName = "co_che";
				colvarCoChe.DataType = DbType.String;
				colvarCoChe.MaxLength = 255;
				colvarCoChe.AutoIncrement = false;
				colvarCoChe.IsNullable = true;
				colvarCoChe.IsPrimaryKey = false;
				colvarCoChe.IsForeignKey = false;
				colvarCoChe.IsReadOnly = false;
				colvarCoChe.DefaultSetting = @"";
				colvarCoChe.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCoChe);
				
				TableSchema.TableColumn colvarHauQua = new TableSchema.TableColumn(schema);
				colvarHauQua.ColumnName = "hau_qua";
				colvarHauQua.DataType = DbType.String;
				colvarHauQua.MaxLength = 512;
				colvarHauQua.AutoIncrement = false;
				colvarHauQua.IsNullable = true;
				colvarHauQua.IsPrimaryKey = false;
				colvarHauQua.IsForeignKey = false;
				colvarHauQua.IsReadOnly = false;
				colvarHauQua.DefaultSetting = @"";
				colvarHauQua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHauQua);
				
				TableSchema.TableColumn colvarXuTri = new TableSchema.TableColumn(schema);
				colvarXuTri.ColumnName = "xu_tri";
				colvarXuTri.DataType = DbType.String;
				colvarXuTri.MaxLength = 512;
				colvarXuTri.AutoIncrement = false;
				colvarXuTri.IsNullable = true;
				colvarXuTri.IsPrimaryKey = false;
				colvarXuTri.IsForeignKey = false;
				colvarXuTri.IsReadOnly = false;
				colvarXuTri.DefaultSetting = @"";
				colvarXuTri.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXuTri);
				
				TableSchema.TableColumn colvarMucDo = new TableSchema.TableColumn(schema);
				colvarMucDo.ColumnName = "muc_do";
				colvarMucDo.DataType = DbType.String;
				colvarMucDo.MaxLength = 50;
				colvarMucDo.AutoIncrement = false;
				colvarMucDo.IsNullable = true;
				colvarMucDo.IsPrimaryKey = false;
				colvarMucDo.IsForeignKey = false;
				colvarMucDo.IsReadOnly = false;
				colvarMucDo.DefaultSetting = @"";
				colvarMucDo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMucDo);
				
				TableSchema.TableColumn colvarNoiDung = new TableSchema.TableColumn(schema);
				colvarNoiDung.ColumnName = "noi_dung";
				colvarNoiDung.DataType = DbType.String;
				colvarNoiDung.MaxLength = 512;
				colvarNoiDung.AutoIncrement = false;
				colvarNoiDung.IsNullable = true;
				colvarNoiDung.IsPrimaryKey = false;
				colvarNoiDung.IsForeignKey = false;
				colvarNoiDung.IsReadOnly = false;
				colvarNoiDung.DefaultSetting = @"";
				colvarNoiDung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoiDung);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "nguoi_tao";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 30;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "ngay_tao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("qhe_tuongtac_thuoc",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MaHoatchat")]
		[Bindable(true)]
		public string MaHoatchat 
		{
			get { return GetColumnValue<string>(Columns.MaHoatchat); }
			set { SetColumnValue(Columns.MaHoatchat, value); }
		}
		  
		[XmlAttribute("MaTuongtac")]
		[Bindable(true)]
		public string MaTuongtac 
		{
			get { return GetColumnValue<string>(Columns.MaTuongtac); }
			set { SetColumnValue(Columns.MaTuongtac, value); }
		}
		  
		[XmlAttribute("Loai")]
		[Bindable(true)]
		public short Loai 
		{
			get { return GetColumnValue<short>(Columns.Loai); }
			set { SetColumnValue(Columns.Loai, value); }
		}
		  
		[XmlAttribute("CoChe")]
		[Bindable(true)]
		public string CoChe 
		{
			get { return GetColumnValue<string>(Columns.CoChe); }
			set { SetColumnValue(Columns.CoChe, value); }
		}
		  
		[XmlAttribute("HauQua")]
		[Bindable(true)]
		public string HauQua 
		{
			get { return GetColumnValue<string>(Columns.HauQua); }
			set { SetColumnValue(Columns.HauQua, value); }
		}
		  
		[XmlAttribute("XuTri")]
		[Bindable(true)]
		public string XuTri 
		{
			get { return GetColumnValue<string>(Columns.XuTri); }
			set { SetColumnValue(Columns.XuTri, value); }
		}
		  
		[XmlAttribute("MucDo")]
		[Bindable(true)]
		public string MucDo 
		{
			get { return GetColumnValue<string>(Columns.MucDo); }
			set { SetColumnValue(Columns.MucDo, value); }
		}
		  
		[XmlAttribute("NoiDung")]
		[Bindable(true)]
		public string NoiDung 
		{
			get { return GetColumnValue<string>(Columns.NoiDung); }
			set { SetColumnValue(Columns.NoiDung, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaHoatchat,string varMaTuongtac,short varLoai,string varCoChe,string varHauQua,string varXuTri,string varMucDo,string varNoiDung,string varNguoiTao,DateTime? varNgayTao)
		{
			QheTuongtacThuoc item = new QheTuongtacThuoc();
			
			item.MaHoatchat = varMaHoatchat;
			
			item.MaTuongtac = varMaTuongtac;
			
			item.Loai = varLoai;
			
			item.CoChe = varCoChe;
			
			item.HauQua = varHauQua;
			
			item.XuTri = varXuTri;
			
			item.MucDo = varMucDo;
			
			item.NoiDung = varNoiDung;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayTao = varNgayTao;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varMaHoatchat,string varMaTuongtac,short varLoai,string varCoChe,string varHauQua,string varXuTri,string varMucDo,string varNoiDung,string varNguoiTao,DateTime? varNgayTao)
		{
			QheTuongtacThuoc item = new QheTuongtacThuoc();
			
				item.MaHoatchat = varMaHoatchat;
			
				item.MaTuongtac = varMaTuongtac;
			
				item.Loai = varLoai;
			
				item.CoChe = varCoChe;
			
				item.HauQua = varHauQua;
			
				item.XuTri = varXuTri;
			
				item.MucDo = varMucDo;
			
				item.NoiDung = varNoiDung;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayTao = varNgayTao;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MaHoatchatColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaTuongtacColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn LoaiColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CoCheColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn HauQuaColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn XuTriColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn MucDoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NoiDungColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MaHoatchat = @"ma_hoatchat";
			 public static string MaTuongtac = @"ma_tuongtac";
			 public static string Loai = @"loai";
			 public static string CoChe = @"co_che";
			 public static string HauQua = @"hau_qua";
			 public static string XuTri = @"xu_tri";
			 public static string MucDo = @"muc_do";
			 public static string NoiDung = @"noi_dung";
			 public static string NguoiTao = @"nguoi_tao";
			 public static string NgayTao = @"ngay_tao";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
