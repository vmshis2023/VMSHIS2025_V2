using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the EmrFile class.
	/// </summary>
    [Serializable]
	public partial class EmrFileCollection : ActiveList<EmrFile, EmrFileCollection>
	{	   
		public EmrFileCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>EmrFileCollection</returns>
		public EmrFileCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                EmrFile o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the EMR_files table.
	/// </summary>
	[Serializable]
	public partial class EmrFile : ActiveRecord<EmrFile>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public EmrFile()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public EmrFile(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public EmrFile(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public EmrFile(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("EMR_files", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdFile = new TableSchema.TableColumn(schema);
				colvarIdFile.ColumnName = "id_file";
				colvarIdFile.DataType = DbType.Int64;
				colvarIdFile.MaxLength = 0;
				colvarIdFile.AutoIncrement = true;
				colvarIdFile.IsNullable = false;
				colvarIdFile.IsPrimaryKey = true;
				colvarIdFile.IsForeignKey = false;
				colvarIdFile.IsReadOnly = false;
				colvarIdFile.DefaultSetting = @"";
				colvarIdFile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdFile);
				
				TableSchema.TableColumn colvarFileData = new TableSchema.TableColumn(schema);
				colvarFileData.ColumnName = "file_data";
				colvarFileData.DataType = DbType.Binary;
				colvarFileData.MaxLength = 2147483647;
				colvarFileData.AutoIncrement = false;
				colvarFileData.IsNullable = false;
				colvarFileData.IsPrimaryKey = false;
				colvarFileData.IsForeignKey = false;
				colvarFileData.IsReadOnly = false;
				colvarFileData.DefaultSetting = @"";
				colvarFileData.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileData);
				
				TableSchema.TableColumn colvarFilePath = new TableSchema.TableColumn(schema);
				colvarFilePath.ColumnName = "file_path";
				colvarFilePath.DataType = DbType.String;
				colvarFilePath.MaxLength = 500;
				colvarFilePath.AutoIncrement = false;
				colvarFilePath.IsNullable = true;
				colvarFilePath.IsPrimaryKey = false;
				colvarFilePath.IsForeignKey = false;
				colvarFilePath.IsReadOnly = false;
				colvarFilePath.DefaultSetting = @"";
				colvarFilePath.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFilePath);
				
				TableSchema.TableColumn colvarIdBenhnhan = new TableSchema.TableColumn(schema);
				colvarIdBenhnhan.ColumnName = "id_benhnhan";
				colvarIdBenhnhan.DataType = DbType.Int64;
				colvarIdBenhnhan.MaxLength = 0;
				colvarIdBenhnhan.AutoIncrement = false;
				colvarIdBenhnhan.IsNullable = false;
				colvarIdBenhnhan.IsPrimaryKey = false;
				colvarIdBenhnhan.IsForeignKey = false;
				colvarIdBenhnhan.IsReadOnly = false;
				colvarIdBenhnhan.DefaultSetting = @"";
				colvarIdBenhnhan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdBenhnhan);
				
				TableSchema.TableColumn colvarMaLuotkham = new TableSchema.TableColumn(schema);
				colvarMaLuotkham.ColumnName = "ma_luotkham";
				colvarMaLuotkham.DataType = DbType.String;
				colvarMaLuotkham.MaxLength = 15;
				colvarMaLuotkham.AutoIncrement = false;
				colvarMaLuotkham.IsNullable = false;
				colvarMaLuotkham.IsPrimaryKey = false;
				colvarMaLuotkham.IsForeignKey = false;
				colvarMaLuotkham.IsReadOnly = false;
				colvarMaLuotkham.DefaultSetting = @"";
				colvarMaLuotkham.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaLuotkham);
				
				TableSchema.TableColumn colvarNgayPhieu = new TableSchema.TableColumn(schema);
				colvarNgayPhieu.ColumnName = "ngay_phieu";
				colvarNgayPhieu.DataType = DbType.DateTime;
				colvarNgayPhieu.MaxLength = 0;
				colvarNgayPhieu.AutoIncrement = false;
				colvarNgayPhieu.IsNullable = false;
				colvarNgayPhieu.IsPrimaryKey = false;
				colvarNgayPhieu.IsForeignKey = false;
				colvarNgayPhieu.IsReadOnly = false;
				colvarNgayPhieu.DefaultSetting = @"";
				colvarNgayPhieu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayPhieu);
				
				TableSchema.TableColumn colvarIdPhieu = new TableSchema.TableColumn(schema);
				colvarIdPhieu.ColumnName = "id_phieu";
				colvarIdPhieu.DataType = DbType.Int64;
				colvarIdPhieu.MaxLength = 0;
				colvarIdPhieu.AutoIncrement = false;
				colvarIdPhieu.IsNullable = false;
				colvarIdPhieu.IsPrimaryKey = false;
				colvarIdPhieu.IsForeignKey = false;
				colvarIdPhieu.IsReadOnly = false;
				
						colvarIdPhieu.DefaultSetting = @"((0))";
				colvarIdPhieu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhieu);
				
				TableSchema.TableColumn colvarLoaiPhieu = new TableSchema.TableColumn(schema);
				colvarLoaiPhieu.ColumnName = "loai_phieu";
				colvarLoaiPhieu.DataType = DbType.String;
				colvarLoaiPhieu.MaxLength = 30;
				colvarLoaiPhieu.AutoIncrement = false;
				colvarLoaiPhieu.IsNullable = false;
				colvarLoaiPhieu.IsPrimaryKey = false;
				colvarLoaiPhieu.IsForeignKey = false;
				colvarLoaiPhieu.IsReadOnly = false;
				
						colvarLoaiPhieu.DefaultSetting = @"((0))";
				colvarLoaiPhieu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoaiPhieu);
				
				TableSchema.TableColumn colvarMaGay = new TableSchema.TableColumn(schema);
				colvarMaGay.ColumnName = "ma_gay";
				colvarMaGay.DataType = DbType.String;
				colvarMaGay.MaxLength = 50;
				colvarMaGay.AutoIncrement = false;
				colvarMaGay.IsNullable = true;
				colvarMaGay.IsPrimaryKey = false;
				colvarMaGay.IsForeignKey = false;
				colvarMaGay.IsReadOnly = false;
				colvarMaGay.DefaultSetting = @"";
				colvarMaGay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaGay);
				
				TableSchema.TableColumn colvarMaPhieu = new TableSchema.TableColumn(schema);
				colvarMaPhieu.ColumnName = "ma_phieu";
				colvarMaPhieu.DataType = DbType.String;
				colvarMaPhieu.MaxLength = 30;
				colvarMaPhieu.AutoIncrement = false;
				colvarMaPhieu.IsNullable = true;
				colvarMaPhieu.IsPrimaryKey = false;
				colvarMaPhieu.IsForeignKey = false;
				colvarMaPhieu.IsReadOnly = false;
				colvarMaPhieu.DefaultSetting = @"";
				colvarMaPhieu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaPhieu);
				
				TableSchema.TableColumn colvarReportCode = new TableSchema.TableColumn(schema);
				colvarReportCode.ColumnName = "report_code";
				colvarReportCode.DataType = DbType.String;
				colvarReportCode.MaxLength = 255;
				colvarReportCode.AutoIncrement = false;
				colvarReportCode.IsNullable = true;
				colvarReportCode.IsPrimaryKey = false;
				colvarReportCode.IsForeignKey = false;
				colvarReportCode.IsReadOnly = false;
				colvarReportCode.DefaultSetting = @"";
				colvarReportCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportCode);
				
				TableSchema.TableColumn colvarExt = new TableSchema.TableColumn(schema);
				colvarExt.ColumnName = "ext";
				colvarExt.DataType = DbType.String;
				colvarExt.MaxLength = 5;
				colvarExt.AutoIncrement = false;
				colvarExt.IsNullable = true;
				colvarExt.IsPrimaryKey = false;
				colvarExt.IsForeignKey = false;
				colvarExt.IsReadOnly = false;
				colvarExt.DefaultSetting = @"";
				colvarExt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExt);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "trang_thai";
				colvarTrangThai.DataType = DbType.Byte;
				colvarTrangThai.MaxLength = 0;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = true;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				
						colvarTrangThai.DefaultSetting = @"((1))";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "nguoi_tao";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 30;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "ngay_tao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarKhoaTao = new TableSchema.TableColumn(schema);
				colvarKhoaTao.ColumnName = "khoa_tao";
				colvarKhoaTao.DataType = DbType.String;
				colvarKhoaTao.MaxLength = 30;
				colvarKhoaTao.AutoIncrement = false;
				colvarKhoaTao.IsNullable = true;
				colvarKhoaTao.IsPrimaryKey = false;
				colvarKhoaTao.IsForeignKey = false;
				colvarKhoaTao.IsReadOnly = false;
				colvarKhoaTao.DefaultSetting = @"";
				colvarKhoaTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKhoaTao);
				
				TableSchema.TableColumn colvarMotaThem = new TableSchema.TableColumn(schema);
				colvarMotaThem.ColumnName = "mota_them";
				colvarMotaThem.DataType = DbType.String;
				colvarMotaThem.MaxLength = 255;
				colvarMotaThem.AutoIncrement = false;
				colvarMotaThem.IsNullable = true;
				colvarMotaThem.IsPrimaryKey = false;
				colvarMotaThem.IsForeignKey = false;
				colvarMotaThem.IsReadOnly = false;
				colvarMotaThem.DefaultSetting = @"";
				colvarMotaThem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMotaThem);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("EMR_files",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdFile")]
		[Bindable(true)]
		public long IdFile 
		{
			get { return GetColumnValue<long>(Columns.IdFile); }
			set { SetColumnValue(Columns.IdFile, value); }
		}
		  
		[XmlAttribute("FileData")]
		[Bindable(true)]
		public byte[] FileData 
		{
			get { return GetColumnValue<byte[]>(Columns.FileData); }
			set { SetColumnValue(Columns.FileData, value); }
		}
		  
		[XmlAttribute("FilePath")]
		[Bindable(true)]
		public string FilePath 
		{
			get { return GetColumnValue<string>(Columns.FilePath); }
			set { SetColumnValue(Columns.FilePath, value); }
		}
		  
		[XmlAttribute("IdBenhnhan")]
		[Bindable(true)]
		public long IdBenhnhan 
		{
			get { return GetColumnValue<long>(Columns.IdBenhnhan); }
			set { SetColumnValue(Columns.IdBenhnhan, value); }
		}
		  
		[XmlAttribute("MaLuotkham")]
		[Bindable(true)]
		public string MaLuotkham 
		{
			get { return GetColumnValue<string>(Columns.MaLuotkham); }
			set { SetColumnValue(Columns.MaLuotkham, value); }
		}
		  
		[XmlAttribute("NgayPhieu")]
		[Bindable(true)]
		public DateTime NgayPhieu 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayPhieu); }
			set { SetColumnValue(Columns.NgayPhieu, value); }
		}
		  
		[XmlAttribute("IdPhieu")]
		[Bindable(true)]
		public long IdPhieu 
		{
			get { return GetColumnValue<long>(Columns.IdPhieu); }
			set { SetColumnValue(Columns.IdPhieu, value); }
		}
		  
		[XmlAttribute("LoaiPhieu")]
		[Bindable(true)]
		public string LoaiPhieu 
		{
			get { return GetColumnValue<string>(Columns.LoaiPhieu); }
			set { SetColumnValue(Columns.LoaiPhieu, value); }
		}
		  
		[XmlAttribute("MaGay")]
		[Bindable(true)]
		public string MaGay 
		{
			get { return GetColumnValue<string>(Columns.MaGay); }
			set { SetColumnValue(Columns.MaGay, value); }
		}
		  
		[XmlAttribute("MaPhieu")]
		[Bindable(true)]
		public string MaPhieu 
		{
			get { return GetColumnValue<string>(Columns.MaPhieu); }
			set { SetColumnValue(Columns.MaPhieu, value); }
		}
		  
		[XmlAttribute("ReportCode")]
		[Bindable(true)]
		public string ReportCode 
		{
			get { return GetColumnValue<string>(Columns.ReportCode); }
			set { SetColumnValue(Columns.ReportCode, value); }
		}
		  
		[XmlAttribute("Ext")]
		[Bindable(true)]
		public string Ext 
		{
			get { return GetColumnValue<string>(Columns.Ext); }
			set { SetColumnValue(Columns.Ext, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public byte? TrangThai 
		{
			get { return GetColumnValue<byte?>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("KhoaTao")]
		[Bindable(true)]
		public string KhoaTao 
		{
			get { return GetColumnValue<string>(Columns.KhoaTao); }
			set { SetColumnValue(Columns.KhoaTao, value); }
		}
		  
		[XmlAttribute("MotaThem")]
		[Bindable(true)]
		public string MotaThem 
		{
			get { return GetColumnValue<string>(Columns.MotaThem); }
			set { SetColumnValue(Columns.MotaThem, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(byte[] varFileData,string varFilePath,long varIdBenhnhan,string varMaLuotkham,DateTime varNgayPhieu,long varIdPhieu,string varLoaiPhieu,string varMaGay,string varMaPhieu,string varReportCode,string varExt,byte? varTrangThai,string varNguoiTao,DateTime? varNgayTao,string varKhoaTao,string varMotaThem)
		{
			EmrFile item = new EmrFile();
			
			item.FileData = varFileData;
			
			item.FilePath = varFilePath;
			
			item.IdBenhnhan = varIdBenhnhan;
			
			item.MaLuotkham = varMaLuotkham;
			
			item.NgayPhieu = varNgayPhieu;
			
			item.IdPhieu = varIdPhieu;
			
			item.LoaiPhieu = varLoaiPhieu;
			
			item.MaGay = varMaGay;
			
			item.MaPhieu = varMaPhieu;
			
			item.ReportCode = varReportCode;
			
			item.Ext = varExt;
			
			item.TrangThai = varTrangThai;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayTao = varNgayTao;
			
			item.KhoaTao = varKhoaTao;
			
			item.MotaThem = varMotaThem;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varIdFile,byte[] varFileData,string varFilePath,long varIdBenhnhan,string varMaLuotkham,DateTime varNgayPhieu,long varIdPhieu,string varLoaiPhieu,string varMaGay,string varMaPhieu,string varReportCode,string varExt,byte? varTrangThai,string varNguoiTao,DateTime? varNgayTao,string varKhoaTao,string varMotaThem)
		{
			EmrFile item = new EmrFile();
			
				item.IdFile = varIdFile;
			
				item.FileData = varFileData;
			
				item.FilePath = varFilePath;
			
				item.IdBenhnhan = varIdBenhnhan;
			
				item.MaLuotkham = varMaLuotkham;
			
				item.NgayPhieu = varNgayPhieu;
			
				item.IdPhieu = varIdPhieu;
			
				item.LoaiPhieu = varLoaiPhieu;
			
				item.MaGay = varMaGay;
			
				item.MaPhieu = varMaPhieu;
			
				item.ReportCode = varReportCode;
			
				item.Ext = varExt;
			
				item.TrangThai = varTrangThai;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayTao = varNgayTao;
			
				item.KhoaTao = varKhoaTao;
			
				item.MotaThem = varMotaThem;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdFileColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FileDataColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FilePathColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IdBenhnhanColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MaLuotkhamColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayPhieuColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IdPhieuColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn LoaiPhieuColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn MaGayColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn MaPhieuColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ReportCodeColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ExtColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn KhoaTaoColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn MotaThemColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdFile = @"id_file";
			 public static string FileData = @"file_data";
			 public static string FilePath = @"file_path";
			 public static string IdBenhnhan = @"id_benhnhan";
			 public static string MaLuotkham = @"ma_luotkham";
			 public static string NgayPhieu = @"ngay_phieu";
			 public static string IdPhieu = @"id_phieu";
			 public static string LoaiPhieu = @"loai_phieu";
			 public static string MaGay = @"ma_gay";
			 public static string MaPhieu = @"ma_phieu";
			 public static string ReportCode = @"report_code";
			 public static string Ext = @"ext";
			 public static string TrangThai = @"trang_thai";
			 public static string NguoiTao = @"nguoi_tao";
			 public static string NgayTao = @"ngay_tao";
			 public static string KhoaTao = @"khoa_tao";
			 public static string MotaThem = @"mota_them";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
