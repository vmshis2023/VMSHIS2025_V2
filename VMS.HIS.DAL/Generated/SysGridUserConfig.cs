using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysGridUserConfig class.
	/// </summary>
    [Serializable]
	public partial class SysGridUserConfigCollection : ActiveList<SysGridUserConfig, SysGridUserConfigCollection>
	{	   
		public SysGridUserConfigCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysGridUserConfigCollection</returns>
		public SysGridUserConfigCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysGridUserConfig o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the sys_grid_user_config table.
	/// </summary>
	[Serializable]
	public partial class SysGridUserConfig : ActiveRecord<SysGridUserConfig>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SysGridUserConfig()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysGridUserConfig(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysGridUserConfig(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysGridUserConfig(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("sys_grid_user_config", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int64;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarFormName = new TableSchema.TableColumn(schema);
				colvarFormName.ColumnName = "form_name";
				colvarFormName.DataType = DbType.String;
				colvarFormName.MaxLength = 255;
				colvarFormName.AutoIncrement = false;
				colvarFormName.IsNullable = false;
				colvarFormName.IsPrimaryKey = false;
				colvarFormName.IsForeignKey = false;
				colvarFormName.IsReadOnly = false;
				colvarFormName.DefaultSetting = @"";
				colvarFormName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFormName);
				
				TableSchema.TableColumn colvarGridName = new TableSchema.TableColumn(schema);
				colvarGridName.ColumnName = "grid_name";
				colvarGridName.DataType = DbType.String;
				colvarGridName.MaxLength = 255;
				colvarGridName.AutoIncrement = false;
				colvarGridName.IsNullable = false;
				colvarGridName.IsPrimaryKey = false;
				colvarGridName.IsForeignKey = false;
				colvarGridName.IsReadOnly = false;
				colvarGridName.DefaultSetting = @"";
				colvarGridName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGridName);
				
				TableSchema.TableColumn colvarColHeader = new TableSchema.TableColumn(schema);
				colvarColHeader.ColumnName = "col_header";
				colvarColHeader.DataType = DbType.String;
				colvarColHeader.MaxLength = 255;
				colvarColHeader.AutoIncrement = false;
				colvarColHeader.IsNullable = false;
				colvarColHeader.IsPrimaryKey = false;
				colvarColHeader.IsForeignKey = false;
				colvarColHeader.IsReadOnly = false;
				colvarColHeader.DefaultSetting = @"";
				colvarColHeader.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColHeader);
				
				TableSchema.TableColumn colvarColHeaderOrg = new TableSchema.TableColumn(schema);
				colvarColHeaderOrg.ColumnName = "col_header_org";
				colvarColHeaderOrg.DataType = DbType.String;
				colvarColHeaderOrg.MaxLength = 255;
				colvarColHeaderOrg.AutoIncrement = false;
				colvarColHeaderOrg.IsNullable = false;
				colvarColHeaderOrg.IsPrimaryKey = false;
				colvarColHeaderOrg.IsForeignKey = false;
				colvarColHeaderOrg.IsReadOnly = false;
				colvarColHeaderOrg.DefaultSetting = @"";
				colvarColHeaderOrg.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColHeaderOrg);
				
				TableSchema.TableColumn colvarColKey = new TableSchema.TableColumn(schema);
				colvarColKey.ColumnName = "col_key";
				colvarColKey.DataType = DbType.String;
				colvarColKey.MaxLength = 255;
				colvarColKey.AutoIncrement = false;
				colvarColKey.IsNullable = false;
				colvarColKey.IsPrimaryKey = false;
				colvarColKey.IsForeignKey = false;
				colvarColKey.IsReadOnly = false;
				colvarColKey.DefaultSetting = @"";
				colvarColKey.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColKey);
				
				TableSchema.TableColumn colvarIsVisible = new TableSchema.TableColumn(schema);
				colvarIsVisible.ColumnName = "isVisible";
				colvarIsVisible.DataType = DbType.Boolean;
				colvarIsVisible.MaxLength = 0;
				colvarIsVisible.AutoIncrement = false;
				colvarIsVisible.IsNullable = false;
				colvarIsVisible.IsPrimaryKey = false;
				colvarIsVisible.IsForeignKey = false;
				colvarIsVisible.IsReadOnly = false;
				colvarIsVisible.DefaultSetting = @"";
				colvarIsVisible.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsVisible);
				
				TableSchema.TableColumn colvarIsVisibleOrg = new TableSchema.TableColumn(schema);
				colvarIsVisibleOrg.ColumnName = "isVisible_org";
				colvarIsVisibleOrg.DataType = DbType.Boolean;
				colvarIsVisibleOrg.MaxLength = 0;
				colvarIsVisibleOrg.AutoIncrement = false;
				colvarIsVisibleOrg.IsNullable = false;
				colvarIsVisibleOrg.IsPrimaryKey = false;
				colvarIsVisibleOrg.IsForeignKey = false;
				colvarIsVisibleOrg.IsReadOnly = false;
				colvarIsVisibleOrg.DefaultSetting = @"";
				colvarIsVisibleOrg.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsVisibleOrg);
				
				TableSchema.TableColumn colvarWidth = new TableSchema.TableColumn(schema);
				colvarWidth.ColumnName = "width";
				colvarWidth.DataType = DbType.Int32;
				colvarWidth.MaxLength = 0;
				colvarWidth.AutoIncrement = false;
				colvarWidth.IsNullable = false;
				colvarWidth.IsPrimaryKey = false;
				colvarWidth.IsForeignKey = false;
				colvarWidth.IsReadOnly = false;
				colvarWidth.DefaultSetting = @"";
				colvarWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWidth);
				
				TableSchema.TableColumn colvarWidthOrg = new TableSchema.TableColumn(schema);
				colvarWidthOrg.ColumnName = "width_org";
				colvarWidthOrg.DataType = DbType.Int32;
				colvarWidthOrg.MaxLength = 0;
				colvarWidthOrg.AutoIncrement = false;
				colvarWidthOrg.IsNullable = false;
				colvarWidthOrg.IsPrimaryKey = false;
				colvarWidthOrg.IsForeignKey = false;
				colvarWidthOrg.IsReadOnly = false;
				colvarWidthOrg.DefaultSetting = @"";
				colvarWidthOrg.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWidthOrg);
				
				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 30;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = false;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);
				
				TableSchema.TableColumn colvarColIndex = new TableSchema.TableColumn(schema);
				colvarColIndex.ColumnName = "col_index";
				colvarColIndex.DataType = DbType.Int32;
				colvarColIndex.MaxLength = 0;
				colvarColIndex.AutoIncrement = false;
				colvarColIndex.IsNullable = false;
				colvarColIndex.IsPrimaryKey = false;
				colvarColIndex.IsForeignKey = false;
				colvarColIndex.IsReadOnly = false;
				colvarColIndex.DefaultSetting = @"";
				colvarColIndex.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColIndex);
				
				TableSchema.TableColumn colvarColIndexOrg = new TableSchema.TableColumn(schema);
				colvarColIndexOrg.ColumnName = "col_index_org";
				colvarColIndexOrg.DataType = DbType.Int32;
				colvarColIndexOrg.MaxLength = 0;
				colvarColIndexOrg.AutoIncrement = false;
				colvarColIndexOrg.IsNullable = false;
				colvarColIndexOrg.IsPrimaryKey = false;
				colvarColIndexOrg.IsForeignKey = false;
				colvarColIndexOrg.IsReadOnly = false;
				colvarColIndexOrg.DefaultSetting = @"";
				colvarColIndexOrg.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColIndexOrg);
				
				TableSchema.TableColumn colvarSource = new TableSchema.TableColumn(schema);
				colvarSource.ColumnName = "source";
				colvarSource.DataType = DbType.Byte;
				colvarSource.MaxLength = 0;
				colvarSource.AutoIncrement = false;
				colvarSource.IsNullable = true;
				colvarSource.IsPrimaryKey = false;
				colvarSource.IsForeignKey = false;
				colvarSource.IsReadOnly = false;
				
						colvarSource.DefaultSetting = @"((1))";
				colvarSource.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSource);
				
				TableSchema.TableColumn colvarFormParams = new TableSchema.TableColumn(schema);
				colvarFormParams.ColumnName = "form_params";
				colvarFormParams.DataType = DbType.String;
				colvarFormParams.MaxLength = 255;
				colvarFormParams.AutoIncrement = false;
				colvarFormParams.IsNullable = true;
				colvarFormParams.IsPrimaryKey = false;
				colvarFormParams.IsForeignKey = false;
				colvarFormParams.IsReadOnly = false;
				colvarFormParams.DefaultSetting = @"";
				colvarFormParams.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFormParams);
				
				TableSchema.TableColumn colvarApplyAll = new TableSchema.TableColumn(schema);
				colvarApplyAll.ColumnName = "apply_all";
				colvarApplyAll.DataType = DbType.Byte;
				colvarApplyAll.MaxLength = 0;
				colvarApplyAll.AutoIncrement = false;
				colvarApplyAll.IsNullable = true;
				colvarApplyAll.IsPrimaryKey = false;
				colvarApplyAll.IsForeignKey = false;
				colvarApplyAll.IsReadOnly = false;
				
						colvarApplyAll.DefaultSetting = @"((0))";
				colvarApplyAll.ForeignKeyTableName = "";
				schema.Columns.Add(colvarApplyAll);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("sys_grid_user_config",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public long Id 
		{
			get { return GetColumnValue<long>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("FormName")]
		[Bindable(true)]
		public string FormName 
		{
			get { return GetColumnValue<string>(Columns.FormName); }
			set { SetColumnValue(Columns.FormName, value); }
		}
		  
		[XmlAttribute("GridName")]
		[Bindable(true)]
		public string GridName 
		{
			get { return GetColumnValue<string>(Columns.GridName); }
			set { SetColumnValue(Columns.GridName, value); }
		}
		  
		[XmlAttribute("ColHeader")]
		[Bindable(true)]
		public string ColHeader 
		{
			get { return GetColumnValue<string>(Columns.ColHeader); }
			set { SetColumnValue(Columns.ColHeader, value); }
		}
		  
		[XmlAttribute("ColHeaderOrg")]
		[Bindable(true)]
		public string ColHeaderOrg 
		{
			get { return GetColumnValue<string>(Columns.ColHeaderOrg); }
			set { SetColumnValue(Columns.ColHeaderOrg, value); }
		}
		  
		[XmlAttribute("ColKey")]
		[Bindable(true)]
		public string ColKey 
		{
			get { return GetColumnValue<string>(Columns.ColKey); }
			set { SetColumnValue(Columns.ColKey, value); }
		}
		  
		[XmlAttribute("IsVisible")]
		[Bindable(true)]
		public bool IsVisible 
		{
			get { return GetColumnValue<bool>(Columns.IsVisible); }
			set { SetColumnValue(Columns.IsVisible, value); }
		}
		  
		[XmlAttribute("IsVisibleOrg")]
		[Bindable(true)]
		public bool IsVisibleOrg 
		{
			get { return GetColumnValue<bool>(Columns.IsVisibleOrg); }
			set { SetColumnValue(Columns.IsVisibleOrg, value); }
		}
		  
		[XmlAttribute("Width")]
		[Bindable(true)]
		public int Width 
		{
			get { return GetColumnValue<int>(Columns.Width); }
			set { SetColumnValue(Columns.Width, value); }
		}
		  
		[XmlAttribute("WidthOrg")]
		[Bindable(true)]
		public int WidthOrg 
		{
			get { return GetColumnValue<int>(Columns.WidthOrg); }
			set { SetColumnValue(Columns.WidthOrg, value); }
		}
		  
		[XmlAttribute("Username")]
		[Bindable(true)]
		public string Username 
		{
			get { return GetColumnValue<string>(Columns.Username); }
			set { SetColumnValue(Columns.Username, value); }
		}
		  
		[XmlAttribute("ColIndex")]
		[Bindable(true)]
		public int ColIndex 
		{
			get { return GetColumnValue<int>(Columns.ColIndex); }
			set { SetColumnValue(Columns.ColIndex, value); }
		}
		  
		[XmlAttribute("ColIndexOrg")]
		[Bindable(true)]
		public int ColIndexOrg 
		{
			get { return GetColumnValue<int>(Columns.ColIndexOrg); }
			set { SetColumnValue(Columns.ColIndexOrg, value); }
		}
		  
		[XmlAttribute("Source")]
		[Bindable(true)]
		public byte? Source 
		{
			get { return GetColumnValue<byte?>(Columns.Source); }
			set { SetColumnValue(Columns.Source, value); }
		}
		  
		[XmlAttribute("FormParams")]
		[Bindable(true)]
		public string FormParams 
		{
			get { return GetColumnValue<string>(Columns.FormParams); }
			set { SetColumnValue(Columns.FormParams, value); }
		}
		  
		[XmlAttribute("ApplyAll")]
		[Bindable(true)]
		public byte? ApplyAll 
		{
			get { return GetColumnValue<byte?>(Columns.ApplyAll); }
			set { SetColumnValue(Columns.ApplyAll, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varFormName,string varGridName,string varColHeader,string varColHeaderOrg,string varColKey,bool varIsVisible,bool varIsVisibleOrg,int varWidth,int varWidthOrg,string varUsername,int varColIndex,int varColIndexOrg,byte? varSource,string varFormParams,byte? varApplyAll)
		{
			SysGridUserConfig item = new SysGridUserConfig();
			
			item.FormName = varFormName;
			
			item.GridName = varGridName;
			
			item.ColHeader = varColHeader;
			
			item.ColHeaderOrg = varColHeaderOrg;
			
			item.ColKey = varColKey;
			
			item.IsVisible = varIsVisible;
			
			item.IsVisibleOrg = varIsVisibleOrg;
			
			item.Width = varWidth;
			
			item.WidthOrg = varWidthOrg;
			
			item.Username = varUsername;
			
			item.ColIndex = varColIndex;
			
			item.ColIndexOrg = varColIndexOrg;
			
			item.Source = varSource;
			
			item.FormParams = varFormParams;
			
			item.ApplyAll = varApplyAll;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varId,string varFormName,string varGridName,string varColHeader,string varColHeaderOrg,string varColKey,bool varIsVisible,bool varIsVisibleOrg,int varWidth,int varWidthOrg,string varUsername,int varColIndex,int varColIndexOrg,byte? varSource,string varFormParams,byte? varApplyAll)
		{
			SysGridUserConfig item = new SysGridUserConfig();
			
				item.Id = varId;
			
				item.FormName = varFormName;
			
				item.GridName = varGridName;
			
				item.ColHeader = varColHeader;
			
				item.ColHeaderOrg = varColHeaderOrg;
			
				item.ColKey = varColKey;
			
				item.IsVisible = varIsVisible;
			
				item.IsVisibleOrg = varIsVisibleOrg;
			
				item.Width = varWidth;
			
				item.WidthOrg = varWidthOrg;
			
				item.Username = varUsername;
			
				item.ColIndex = varColIndex;
			
				item.ColIndexOrg = varColIndexOrg;
			
				item.Source = varSource;
			
				item.FormParams = varFormParams;
			
				item.ApplyAll = varApplyAll;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FormNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn GridNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ColHeaderColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ColHeaderOrgColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ColKeyColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IsVisibleColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IsVisibleOrgColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn WidthColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn WidthOrgColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn UsernameColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ColIndexColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ColIndexOrgColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn SourceColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn FormParamsColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ApplyAllColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string FormName = @"form_name";
			 public static string GridName = @"grid_name";
			 public static string ColHeader = @"col_header";
			 public static string ColHeaderOrg = @"col_header_org";
			 public static string ColKey = @"col_key";
			 public static string IsVisible = @"isVisible";
			 public static string IsVisibleOrg = @"isVisible_org";
			 public static string Width = @"width";
			 public static string WidthOrg = @"width_org";
			 public static string Username = @"username";
			 public static string ColIndex = @"col_index";
			 public static string ColIndexOrg = @"col_index_org";
			 public static string Source = @"source";
			 public static string FormParams = @"form_params";
			 public static string ApplyAll = @"apply_all";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
