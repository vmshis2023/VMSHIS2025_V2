using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the TThauDieutietCt class.
	/// </summary>
    [Serializable]
	public partial class TThauDieutietCtCollection : ActiveList<TThauDieutietCt, TThauDieutietCtCollection>
	{	   
		public TThauDieutietCtCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TThauDieutietCtCollection</returns>
		public TThauDieutietCtCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TThauDieutietCt o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the t_thau_dieutiet_ct table.
	/// </summary>
	[Serializable]
	public partial class TThauDieutietCt : ActiveRecord<TThauDieutietCt>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TThauDieutietCt()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TThauDieutietCt(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TThauDieutietCt(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TThauDieutietCt(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("t_thau_dieutiet_ct", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdDieutietCt = new TableSchema.TableColumn(schema);
				colvarIdDieutietCt.ColumnName = "id_dieutiet_ct";
				colvarIdDieutietCt.DataType = DbType.Int64;
				colvarIdDieutietCt.MaxLength = 0;
				colvarIdDieutietCt.AutoIncrement = true;
				colvarIdDieutietCt.IsNullable = false;
				colvarIdDieutietCt.IsPrimaryKey = true;
				colvarIdDieutietCt.IsForeignKey = false;
				colvarIdDieutietCt.IsReadOnly = false;
				colvarIdDieutietCt.DefaultSetting = @"";
				colvarIdDieutietCt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdDieutietCt);
				
				TableSchema.TableColumn colvarIdDieutiet = new TableSchema.TableColumn(schema);
				colvarIdDieutiet.ColumnName = "id_dieutiet";
				colvarIdDieutiet.DataType = DbType.Int64;
				colvarIdDieutiet.MaxLength = 0;
				colvarIdDieutiet.AutoIncrement = false;
				colvarIdDieutiet.IsNullable = false;
				colvarIdDieutiet.IsPrimaryKey = false;
				colvarIdDieutiet.IsForeignKey = false;
				colvarIdDieutiet.IsReadOnly = false;
				colvarIdDieutiet.DefaultSetting = @"";
				colvarIdDieutiet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdDieutiet);
				
				TableSchema.TableColumn colvarIdThau = new TableSchema.TableColumn(schema);
				colvarIdThau.ColumnName = "id_thau";
				colvarIdThau.DataType = DbType.Int64;
				colvarIdThau.MaxLength = 0;
				colvarIdThau.AutoIncrement = false;
				colvarIdThau.IsNullable = false;
				colvarIdThau.IsPrimaryKey = false;
				colvarIdThau.IsForeignKey = false;
				colvarIdThau.IsReadOnly = false;
				colvarIdThau.DefaultSetting = @"";
				colvarIdThau.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdThau);
				
				TableSchema.TableColumn colvarIdThauCt = new TableSchema.TableColumn(schema);
				colvarIdThauCt.ColumnName = "id_thau_ct";
				colvarIdThauCt.DataType = DbType.Int64;
				colvarIdThauCt.MaxLength = 0;
				colvarIdThauCt.AutoIncrement = false;
				colvarIdThauCt.IsNullable = false;
				colvarIdThauCt.IsPrimaryKey = false;
				colvarIdThauCt.IsForeignKey = false;
				colvarIdThauCt.IsReadOnly = false;
				colvarIdThauCt.DefaultSetting = @"";
				colvarIdThauCt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdThauCt);
				
				TableSchema.TableColumn colvarIdThuoc = new TableSchema.TableColumn(schema);
				colvarIdThuoc.ColumnName = "id_thuoc";
				colvarIdThuoc.DataType = DbType.Int32;
				colvarIdThuoc.MaxLength = 0;
				colvarIdThuoc.AutoIncrement = false;
				colvarIdThuoc.IsNullable = false;
				colvarIdThuoc.IsPrimaryKey = false;
				colvarIdThuoc.IsForeignKey = false;
				colvarIdThuoc.IsReadOnly = false;
				colvarIdThuoc.DefaultSetting = @"";
				colvarIdThuoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdThuoc);
				
				TableSchema.TableColumn colvarSoLuong = new TableSchema.TableColumn(schema);
				colvarSoLuong.ColumnName = "so_luong";
				colvarSoLuong.DataType = DbType.Decimal;
				colvarSoLuong.MaxLength = 0;
				colvarSoLuong.AutoIncrement = false;
				colvarSoLuong.IsNullable = false;
				colvarSoLuong.IsPrimaryKey = false;
				colvarSoLuong.IsForeignKey = false;
				colvarSoLuong.IsReadOnly = false;
				colvarSoLuong.DefaultSetting = @"";
				colvarSoLuong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoLuong);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("t_thau_dieutiet_ct",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdDieutietCt")]
		[Bindable(true)]
		public long IdDieutietCt 
		{
			get { return GetColumnValue<long>(Columns.IdDieutietCt); }
			set { SetColumnValue(Columns.IdDieutietCt, value); }
		}
		  
		[XmlAttribute("IdDieutiet")]
		[Bindable(true)]
		public long IdDieutiet 
		{
			get { return GetColumnValue<long>(Columns.IdDieutiet); }
			set { SetColumnValue(Columns.IdDieutiet, value); }
		}
		  
		[XmlAttribute("IdThau")]
		[Bindable(true)]
		public long IdThau 
		{
			get { return GetColumnValue<long>(Columns.IdThau); }
			set { SetColumnValue(Columns.IdThau, value); }
		}
		  
		[XmlAttribute("IdThauCt")]
		[Bindable(true)]
		public long IdThauCt 
		{
			get { return GetColumnValue<long>(Columns.IdThauCt); }
			set { SetColumnValue(Columns.IdThauCt, value); }
		}
		  
		[XmlAttribute("IdThuoc")]
		[Bindable(true)]
		public int IdThuoc 
		{
			get { return GetColumnValue<int>(Columns.IdThuoc); }
			set { SetColumnValue(Columns.IdThuoc, value); }
		}
		  
		[XmlAttribute("SoLuong")]
		[Bindable(true)]
		public decimal SoLuong 
		{
			get { return GetColumnValue<decimal>(Columns.SoLuong); }
			set { SetColumnValue(Columns.SoLuong, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varIdDieutiet,long varIdThau,long varIdThauCt,int varIdThuoc,decimal varSoLuong)
		{
			TThauDieutietCt item = new TThauDieutietCt();
			
			item.IdDieutiet = varIdDieutiet;
			
			item.IdThau = varIdThau;
			
			item.IdThauCt = varIdThauCt;
			
			item.IdThuoc = varIdThuoc;
			
			item.SoLuong = varSoLuong;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varIdDieutietCt,long varIdDieutiet,long varIdThau,long varIdThauCt,int varIdThuoc,decimal varSoLuong)
		{
			TThauDieutietCt item = new TThauDieutietCt();
			
				item.IdDieutietCt = varIdDieutietCt;
			
				item.IdDieutiet = varIdDieutiet;
			
				item.IdThau = varIdThau;
			
				item.IdThauCt = varIdThauCt;
			
				item.IdThuoc = varIdThuoc;
			
				item.SoLuong = varSoLuong;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdDieutietCtColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdDieutietColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdThauColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IdThauCtColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IdThuocColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SoLuongColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdDieutietCt = @"id_dieutiet_ct";
			 public static string IdDieutiet = @"id_dieutiet";
			 public static string IdThau = @"id_thau";
			 public static string IdThauCt = @"id_thau_ct";
			 public static string IdThuoc = @"id_thuoc";
			 public static string SoLuong = @"so_luong";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
