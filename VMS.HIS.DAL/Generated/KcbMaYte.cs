using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the KcbMaYte class.
	/// </summary>
    [Serializable]
	public partial class KcbMaYteCollection : ActiveList<KcbMaYte, KcbMaYteCollection>
	{	   
		public KcbMaYteCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>KcbMaYteCollection</returns>
		public KcbMaYteCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                KcbMaYte o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the kcb_ma_yte table.
	/// </summary>
	[Serializable]
	public partial class KcbMaYte : ActiveRecord<KcbMaYte>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public KcbMaYte()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public KcbMaYte(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public KcbMaYte(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public KcbMaYte(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("kcb_ma_yte", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int64;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarMaLuotkham = new TableSchema.TableColumn(schema);
				colvarMaLuotkham.ColumnName = "ma_luotkham";
				colvarMaLuotkham.DataType = DbType.String;
				colvarMaLuotkham.MaxLength = 10;
				colvarMaLuotkham.AutoIncrement = false;
				colvarMaLuotkham.IsNullable = true;
				colvarMaLuotkham.IsPrimaryKey = false;
				colvarMaLuotkham.IsForeignKey = false;
				colvarMaLuotkham.IsReadOnly = false;
				colvarMaLuotkham.DefaultSetting = @"";
				colvarMaLuotkham.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaLuotkham);
				
				TableSchema.TableColumn colvarIdBenhnhan = new TableSchema.TableColumn(schema);
				colvarIdBenhnhan.ColumnName = "id_benhnhan";
				colvarIdBenhnhan.DataType = DbType.Int64;
				colvarIdBenhnhan.MaxLength = 0;
				colvarIdBenhnhan.AutoIncrement = false;
				colvarIdBenhnhan.IsNullable = true;
				colvarIdBenhnhan.IsPrimaryKey = false;
				colvarIdBenhnhan.IsForeignKey = false;
				colvarIdBenhnhan.IsReadOnly = false;
				colvarIdBenhnhan.DefaultSetting = @"";
				colvarIdBenhnhan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdBenhnhan);
				
				TableSchema.TableColumn colvarNam = new TableSchema.TableColumn(schema);
				colvarNam.ColumnName = "nam";
				colvarNam.DataType = DbType.Int32;
				colvarNam.MaxLength = 0;
				colvarNam.AutoIncrement = false;
				colvarNam.IsNullable = false;
				colvarNam.IsPrimaryKey = false;
				colvarNam.IsForeignKey = false;
				colvarNam.IsReadOnly = false;
				colvarNam.DefaultSetting = @"";
				colvarNam.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNam);
				
				TableSchema.TableColumn colvarMaYteHtai = new TableSchema.TableColumn(schema);
				colvarMaYteHtai.ColumnName = "ma_yte_htai";
				colvarMaYteHtai.DataType = DbType.Int32;
				colvarMaYteHtai.MaxLength = 0;
				colvarMaYteHtai.AutoIncrement = false;
				colvarMaYteHtai.IsNullable = false;
				colvarMaYteHtai.IsPrimaryKey = false;
				colvarMaYteHtai.IsForeignKey = false;
				colvarMaYteHtai.IsReadOnly = false;
				colvarMaYteHtai.DefaultSetting = @"";
				colvarMaYteHtai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaYteHtai);
				
				TableSchema.TableColumn colvarMaYteHuy = new TableSchema.TableColumn(schema);
				colvarMaYteHuy.ColumnName = "ma_yte_huy";
				colvarMaYteHuy.DataType = DbType.Int32;
				colvarMaYteHuy.MaxLength = 0;
				colvarMaYteHuy.AutoIncrement = false;
				colvarMaYteHuy.IsNullable = true;
				colvarMaYteHuy.IsPrimaryKey = false;
				colvarMaYteHuy.IsForeignKey = false;
				colvarMaYteHuy.IsReadOnly = false;
				colvarMaYteHuy.DefaultSetting = @"";
				colvarMaYteHuy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaYteHuy);
				
				TableSchema.TableColumn colvarLoai = new TableSchema.TableColumn(schema);
				colvarLoai.ColumnName = "loai";
				colvarLoai.DataType = DbType.Byte;
				colvarLoai.MaxLength = 0;
				colvarLoai.AutoIncrement = false;
				colvarLoai.IsNullable = false;
				colvarLoai.IsPrimaryKey = false;
				colvarLoai.IsForeignKey = false;
				colvarLoai.IsReadOnly = false;
				colvarLoai.DefaultSetting = @"";
				colvarLoai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoai);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("kcb_ma_yte",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public long Id 
		{
			get { return GetColumnValue<long>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("MaLuotkham")]
		[Bindable(true)]
		public string MaLuotkham 
		{
			get { return GetColumnValue<string>(Columns.MaLuotkham); }
			set { SetColumnValue(Columns.MaLuotkham, value); }
		}
		  
		[XmlAttribute("IdBenhnhan")]
		[Bindable(true)]
		public long? IdBenhnhan 
		{
			get { return GetColumnValue<long?>(Columns.IdBenhnhan); }
			set { SetColumnValue(Columns.IdBenhnhan, value); }
		}
		  
		[XmlAttribute("Nam")]
		[Bindable(true)]
		public int Nam 
		{
			get { return GetColumnValue<int>(Columns.Nam); }
			set { SetColumnValue(Columns.Nam, value); }
		}
		  
		[XmlAttribute("MaYteHtai")]
		[Bindable(true)]
		public int MaYteHtai 
		{
			get { return GetColumnValue<int>(Columns.MaYteHtai); }
			set { SetColumnValue(Columns.MaYteHtai, value); }
		}
		  
		[XmlAttribute("MaYteHuy")]
		[Bindable(true)]
		public int? MaYteHuy 
		{
			get { return GetColumnValue<int?>(Columns.MaYteHuy); }
			set { SetColumnValue(Columns.MaYteHuy, value); }
		}
		  
		[XmlAttribute("Loai")]
		[Bindable(true)]
		public byte Loai 
		{
			get { return GetColumnValue<byte>(Columns.Loai); }
			set { SetColumnValue(Columns.Loai, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaLuotkham,long? varIdBenhnhan,int varNam,int varMaYteHtai,int? varMaYteHuy,byte varLoai)
		{
			KcbMaYte item = new KcbMaYte();
			
			item.MaLuotkham = varMaLuotkham;
			
			item.IdBenhnhan = varIdBenhnhan;
			
			item.Nam = varNam;
			
			item.MaYteHtai = varMaYteHtai;
			
			item.MaYteHuy = varMaYteHuy;
			
			item.Loai = varLoai;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varId,string varMaLuotkham,long? varIdBenhnhan,int varNam,int varMaYteHtai,int? varMaYteHuy,byte varLoai)
		{
			KcbMaYte item = new KcbMaYte();
			
				item.Id = varId;
			
				item.MaLuotkham = varMaLuotkham;
			
				item.IdBenhnhan = varIdBenhnhan;
			
				item.Nam = varNam;
			
				item.MaYteHtai = varMaYteHtai;
			
				item.MaYteHuy = varMaYteHuy;
			
				item.Loai = varLoai;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaLuotkhamColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdBenhnhanColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NamColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MaYteHtaiColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MaYteHuyColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn LoaiColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string MaLuotkham = @"ma_luotkham";
			 public static string IdBenhnhan = @"id_benhnhan";
			 public static string Nam = @"nam";
			 public static string MaYteHtai = @"ma_yte_htai";
			 public static string MaYteHuy = @"ma_yte_huy";
			 public static string Loai = @"loai";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
