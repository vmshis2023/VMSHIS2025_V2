using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the DmucBenhan class.
	/// </summary>
    [Serializable]
	public partial class DmucBenhanCollection : ActiveList<DmucBenhan, DmucBenhanCollection>
	{	   
		public DmucBenhanCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DmucBenhanCollection</returns>
		public DmucBenhanCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DmucBenhan o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the dmuc_benhan table.
	/// </summary>
	[Serializable]
	public partial class DmucBenhan : ActiveRecord<DmucBenhan>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DmucBenhan()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DmucBenhan(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DmucBenhan(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DmucBenhan(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("dmuc_benhan", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int16;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarNhomBa = new TableSchema.TableColumn(schema);
				colvarNhomBa.ColumnName = "nhom_ba";
				colvarNhomBa.DataType = DbType.String;
				colvarNhomBa.MaxLength = 20;
				colvarNhomBa.AutoIncrement = false;
				colvarNhomBa.IsNullable = true;
				colvarNhomBa.IsPrimaryKey = false;
				colvarNhomBa.IsForeignKey = false;
				colvarNhomBa.IsReadOnly = false;
				colvarNhomBa.DefaultSetting = @"";
				colvarNhomBa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNhomBa);
				
				TableSchema.TableColumn colvarMaBenhan = new TableSchema.TableColumn(schema);
				colvarMaBenhan.ColumnName = "ma_benhan";
				colvarMaBenhan.DataType = DbType.String;
				colvarMaBenhan.MaxLength = 20;
				colvarMaBenhan.AutoIncrement = false;
				colvarMaBenhan.IsNullable = false;
				colvarMaBenhan.IsPrimaryKey = false;
				colvarMaBenhan.IsForeignKey = false;
				colvarMaBenhan.IsReadOnly = false;
				colvarMaBenhan.DefaultSetting = @"";
				colvarMaBenhan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaBenhan);
				
				TableSchema.TableColumn colvarTenBenhan = new TableSchema.TableColumn(schema);
				colvarTenBenhan.ColumnName = "ten_benhan";
				colvarTenBenhan.DataType = DbType.String;
				colvarTenBenhan.MaxLength = 100;
				colvarTenBenhan.AutoIncrement = false;
				colvarTenBenhan.IsNullable = true;
				colvarTenBenhan.IsPrimaryKey = false;
				colvarTenBenhan.IsForeignKey = false;
				colvarTenBenhan.IsReadOnly = false;
				colvarTenBenhan.DefaultSetting = @"";
				colvarTenBenhan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenBenhan);
				
				TableSchema.TableColumn colvarIdGioitinh = new TableSchema.TableColumn(schema);
				colvarIdGioitinh.ColumnName = "id_gioitinh";
				colvarIdGioitinh.DataType = DbType.Int16;
				colvarIdGioitinh.MaxLength = 0;
				colvarIdGioitinh.AutoIncrement = false;
				colvarIdGioitinh.IsNullable = true;
				colvarIdGioitinh.IsPrimaryKey = false;
				colvarIdGioitinh.IsForeignKey = false;
				colvarIdGioitinh.IsReadOnly = false;
				
						colvarIdGioitinh.DefaultSetting = @"((2))";
				colvarIdGioitinh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdGioitinh);
				
				TableSchema.TableColumn colvarSttHienthi = new TableSchema.TableColumn(schema);
				colvarSttHienthi.ColumnName = "stt_hienthi";
				colvarSttHienthi.DataType = DbType.Int16;
				colvarSttHienthi.MaxLength = 0;
				colvarSttHienthi.AutoIncrement = false;
				colvarSttHienthi.IsNullable = true;
				colvarSttHienthi.IsPrimaryKey = false;
				colvarSttHienthi.IsForeignKey = false;
				colvarSttHienthi.IsReadOnly = false;
				colvarSttHienthi.DefaultSetting = @"";
				colvarSttHienthi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSttHienthi);
				
				TableSchema.TableColumn colvarTrangthai = new TableSchema.TableColumn(schema);
				colvarTrangthai.ColumnName = "trangthai";
				colvarTrangthai.DataType = DbType.Byte;
				colvarTrangthai.MaxLength = 0;
				colvarTrangthai.AutoIncrement = false;
				colvarTrangthai.IsNullable = true;
				colvarTrangthai.IsPrimaryKey = false;
				colvarTrangthai.IsForeignKey = false;
				colvarTrangthai.IsReadOnly = false;
				colvarTrangthai.DefaultSetting = @"";
				colvarTrangthai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangthai);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "ngay_tao";
				colvarNgayTao.DataType = DbType.String;
				colvarNgayTao.MaxLength = 10;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("dmuc_benhan",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public short Id 
		{
			get { return GetColumnValue<short>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("NhomBa")]
		[Bindable(true)]
		public string NhomBa 
		{
			get { return GetColumnValue<string>(Columns.NhomBa); }
			set { SetColumnValue(Columns.NhomBa, value); }
		}
		  
		[XmlAttribute("MaBenhan")]
		[Bindable(true)]
		public string MaBenhan 
		{
			get { return GetColumnValue<string>(Columns.MaBenhan); }
			set { SetColumnValue(Columns.MaBenhan, value); }
		}
		  
		[XmlAttribute("TenBenhan")]
		[Bindable(true)]
		public string TenBenhan 
		{
			get { return GetColumnValue<string>(Columns.TenBenhan); }
			set { SetColumnValue(Columns.TenBenhan, value); }
		}
		  
		[XmlAttribute("IdGioitinh")]
		[Bindable(true)]
		public short? IdGioitinh 
		{
			get { return GetColumnValue<short?>(Columns.IdGioitinh); }
			set { SetColumnValue(Columns.IdGioitinh, value); }
		}
		  
		[XmlAttribute("SttHienthi")]
		[Bindable(true)]
		public short? SttHienthi 
		{
			get { return GetColumnValue<short?>(Columns.SttHienthi); }
			set { SetColumnValue(Columns.SttHienthi, value); }
		}
		  
		[XmlAttribute("Trangthai")]
		[Bindable(true)]
		public byte? Trangthai 
		{
			get { return GetColumnValue<byte?>(Columns.Trangthai); }
			set { SetColumnValue(Columns.Trangthai, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public string NgayTao 
		{
			get { return GetColumnValue<string>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varNhomBa,string varMaBenhan,string varTenBenhan,short? varIdGioitinh,short? varSttHienthi,byte? varTrangthai,string varNgayTao)
		{
			DmucBenhan item = new DmucBenhan();
			
			item.NhomBa = varNhomBa;
			
			item.MaBenhan = varMaBenhan;
			
			item.TenBenhan = varTenBenhan;
			
			item.IdGioitinh = varIdGioitinh;
			
			item.SttHienthi = varSttHienthi;
			
			item.Trangthai = varTrangthai;
			
			item.NgayTao = varNgayTao;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(short varId,string varNhomBa,string varMaBenhan,string varTenBenhan,short? varIdGioitinh,short? varSttHienthi,byte? varTrangthai,string varNgayTao)
		{
			DmucBenhan item = new DmucBenhan();
			
				item.Id = varId;
			
				item.NhomBa = varNhomBa;
			
				item.MaBenhan = varMaBenhan;
			
				item.TenBenhan = varTenBenhan;
			
				item.IdGioitinh = varIdGioitinh;
			
				item.SttHienthi = varSttHienthi;
			
				item.Trangthai = varTrangthai;
			
				item.NgayTao = varNgayTao;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NhomBaColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MaBenhanColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TenBenhanColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IdGioitinhColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SttHienthiColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangthaiColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string NhomBa = @"nhom_ba";
			 public static string MaBenhan = @"ma_benhan";
			 public static string TenBenhan = @"ten_benhan";
			 public static string IdGioitinh = @"id_gioitinh";
			 public static string SttHienthi = @"stt_hienthi";
			 public static string Trangthai = @"trangthai";
			 public static string NgayTao = @"ngay_tao";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
