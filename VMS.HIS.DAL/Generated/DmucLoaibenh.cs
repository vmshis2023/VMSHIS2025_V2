using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the DmucLoaibenh class.
	/// </summary>
    [Serializable]
	public partial class DmucLoaibenhCollection : ActiveList<DmucLoaibenh, DmucLoaibenhCollection>
	{	   
		public DmucLoaibenhCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DmucLoaibenhCollection</returns>
		public DmucLoaibenhCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DmucLoaibenh o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the dmuc_loaibenh table.
	/// </summary>
	[Serializable]
	public partial class DmucLoaibenh : ActiveRecord<DmucLoaibenh>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DmucLoaibenh()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DmucLoaibenh(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DmucLoaibenh(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DmucLoaibenh(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("dmuc_loaibenh", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarMaLoaibenh = new TableSchema.TableColumn(schema);
				colvarMaLoaibenh.ColumnName = "ma_loaibenh";
				colvarMaLoaibenh.DataType = DbType.String;
				colvarMaLoaibenh.MaxLength = 20;
				colvarMaLoaibenh.AutoIncrement = false;
				colvarMaLoaibenh.IsNullable = true;
				colvarMaLoaibenh.IsPrimaryKey = false;
				colvarMaLoaibenh.IsForeignKey = false;
				colvarMaLoaibenh.IsReadOnly = false;
				colvarMaLoaibenh.DefaultSetting = @"";
				colvarMaLoaibenh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaLoaibenh);
				
				TableSchema.TableColumn colvarTenLoaibenh = new TableSchema.TableColumn(schema);
				colvarTenLoaibenh.ColumnName = "ten_loaibenh";
				colvarTenLoaibenh.DataType = DbType.String;
				colvarTenLoaibenh.MaxLength = 500;
				colvarTenLoaibenh.AutoIncrement = false;
				colvarTenLoaibenh.IsNullable = true;
				colvarTenLoaibenh.IsPrimaryKey = false;
				colvarTenLoaibenh.IsForeignKey = false;
				colvarTenLoaibenh.IsReadOnly = false;
				colvarTenLoaibenh.DefaultSetting = @"";
				colvarTenLoaibenh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenLoaibenh);
				
				TableSchema.TableColumn colvarTenTienganh = new TableSchema.TableColumn(schema);
				colvarTenTienganh.ColumnName = "ten_tienganh";
				colvarTenTienganh.DataType = DbType.String;
				colvarTenTienganh.MaxLength = 500;
				colvarTenTienganh.AutoIncrement = false;
				colvarTenTienganh.IsNullable = true;
				colvarTenTienganh.IsPrimaryKey = false;
				colvarTenTienganh.IsForeignKey = false;
				colvarTenTienganh.IsReadOnly = false;
				colvarTenTienganh.DefaultSetting = @"";
				colvarTenTienganh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenTienganh);
				
				TableSchema.TableColumn colvarSttHienthi = new TableSchema.TableColumn(schema);
				colvarSttHienthi.ColumnName = "stt_hienthi";
				colvarSttHienthi.DataType = DbType.Int32;
				colvarSttHienthi.MaxLength = 0;
				colvarSttHienthi.AutoIncrement = false;
				colvarSttHienthi.IsNullable = true;
				colvarSttHienthi.IsPrimaryKey = false;
				colvarSttHienthi.IsForeignKey = false;
				colvarSttHienthi.IsReadOnly = false;
				colvarSttHienthi.DefaultSetting = @"";
				colvarSttHienthi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSttHienthi);
				
				TableSchema.TableColumn colvarMotaThem = new TableSchema.TableColumn(schema);
				colvarMotaThem.ColumnName = "mota_them";
				colvarMotaThem.DataType = DbType.String;
				colvarMotaThem.MaxLength = 500;
				colvarMotaThem.AutoIncrement = false;
				colvarMotaThem.IsNullable = true;
				colvarMotaThem.IsPrimaryKey = false;
				colvarMotaThem.IsForeignKey = false;
				colvarMotaThem.IsReadOnly = false;
				colvarMotaThem.DefaultSetting = @"";
				colvarMotaThem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMotaThem);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("dmuc_loaibenh",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("MaLoaibenh")]
		[Bindable(true)]
		public string MaLoaibenh 
		{
			get { return GetColumnValue<string>(Columns.MaLoaibenh); }
			set { SetColumnValue(Columns.MaLoaibenh, value); }
		}
		  
		[XmlAttribute("TenLoaibenh")]
		[Bindable(true)]
		public string TenLoaibenh 
		{
			get { return GetColumnValue<string>(Columns.TenLoaibenh); }
			set { SetColumnValue(Columns.TenLoaibenh, value); }
		}
		  
		[XmlAttribute("TenTienganh")]
		[Bindable(true)]
		public string TenTienganh 
		{
			get { return GetColumnValue<string>(Columns.TenTienganh); }
			set { SetColumnValue(Columns.TenTienganh, value); }
		}
		  
		[XmlAttribute("SttHienthi")]
		[Bindable(true)]
		public int? SttHienthi 
		{
			get { return GetColumnValue<int?>(Columns.SttHienthi); }
			set { SetColumnValue(Columns.SttHienthi, value); }
		}
		  
		[XmlAttribute("MotaThem")]
		[Bindable(true)]
		public string MotaThem 
		{
			get { return GetColumnValue<string>(Columns.MotaThem); }
			set { SetColumnValue(Columns.MotaThem, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaLoaibenh,string varTenLoaibenh,string varTenTienganh,int? varSttHienthi,string varMotaThem)
		{
			DmucLoaibenh item = new DmucLoaibenh();
			
			item.MaLoaibenh = varMaLoaibenh;
			
			item.TenLoaibenh = varTenLoaibenh;
			
			item.TenTienganh = varTenTienganh;
			
			item.SttHienthi = varSttHienthi;
			
			item.MotaThem = varMotaThem;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varMaLoaibenh,string varTenLoaibenh,string varTenTienganh,int? varSttHienthi,string varMotaThem)
		{
			DmucLoaibenh item = new DmucLoaibenh();
			
				item.Id = varId;
			
				item.MaLoaibenh = varMaLoaibenh;
			
				item.TenLoaibenh = varTenLoaibenh;
			
				item.TenTienganh = varTenTienganh;
			
				item.SttHienthi = varSttHienthi;
			
				item.MotaThem = varMotaThem;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaLoaibenhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenLoaibenhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TenTienganhColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SttHienthiColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MotaThemColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string MaLoaibenh = @"ma_loaibenh";
			 public static string TenLoaibenh = @"ten_loaibenh";
			 public static string TenTienganh = @"ten_tienganh";
			 public static string SttHienthi = @"stt_hienthi";
			 public static string MotaThem = @"mota_them";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
