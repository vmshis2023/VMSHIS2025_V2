using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
    /// <summary>
    /// Controller class for emr_documents
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class EmrDocumentController
    {
        // Preload our schema..
        EmrDocument thisSchemaLoad = new EmrDocument();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public EmrDocumentCollection FetchAll()
        {
            EmrDocumentCollection coll = new EmrDocumentCollection();
            Query qry = new Query(EmrDocument.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public EmrDocumentCollection FetchByID(object IdFile)
        {
            EmrDocumentCollection coll = new EmrDocumentCollection().Where("id_file", IdFile).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public EmrDocumentCollection FetchByQuery(Query qry)
        {
            EmrDocumentCollection coll = new EmrDocumentCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object IdFile)
        {
            return (EmrDocument.Delete(IdFile) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object IdFile)
        {
            return (EmrDocument.Destroy(IdFile) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(byte[] FileData,string FilePath,string FileName,long IdBenhnhan,string MaLuotkham,DateTime NgayPhieu,long IdPhieu,string LoaiPhieuHis,string MaGayEmr,string MaPhieuEmr,string ReportCode,string Title,string Ext,byte? TthaiDuyet,bool? TthaiHuy,bool? TthaiAn,string NguoiTao,DateTime? NgayTao,byte? NguonTao,short? IdKhoa,string TenKhoa,short? IdPhong,string TenPhong,bool? Noitru,string MotaThem)
	    {
		    EmrDocument item = new EmrDocument();
		    
            item.FileData = FileData;
            
            item.FilePath = FilePath;
            
            item.FileName = FileName;
            
            item.IdBenhnhan = IdBenhnhan;
            
            item.MaLuotkham = MaLuotkham;
            
            item.NgayPhieu = NgayPhieu;
            
            item.IdPhieu = IdPhieu;
            
            item.LoaiPhieuHis = LoaiPhieuHis;
            
            item.MaGayEmr = MaGayEmr;
            
            item.MaPhieuEmr = MaPhieuEmr;
            
            item.ReportCode = ReportCode;
            
            item.Title = Title;
            
            item.Ext = Ext;
            
            item.TthaiDuyet = TthaiDuyet;
            
            item.TthaiHuy = TthaiHuy;
            
            item.TthaiAn = TthaiAn;
            
            item.NguoiTao = NguoiTao;
            
            item.NgayTao = NgayTao;
            
            item.NguonTao = NguonTao;
            
            item.IdKhoa = IdKhoa;
            
            item.TenKhoa = TenKhoa;
            
            item.IdPhong = IdPhong;
            
            item.TenPhong = TenPhong;
            
            item.Noitru = Noitru;
            
            item.MotaThem = MotaThem;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(long IdFile,byte[] FileData,string FilePath,string FileName,long IdBenhnhan,string MaLuotkham,DateTime NgayPhieu,long IdPhieu,string LoaiPhieuHis,string MaGayEmr,string MaPhieuEmr,string ReportCode,string Title,string Ext,byte? TthaiDuyet,bool? TthaiHuy,bool? TthaiAn,string NguoiTao,DateTime? NgayTao,byte? NguonTao,short? IdKhoa,string TenKhoa,short? IdPhong,string TenPhong,bool? Noitru,string MotaThem)
	    {
		    EmrDocument item = new EmrDocument();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.IdFile = IdFile;
				
			item.FileData = FileData;
				
			item.FilePath = FilePath;
				
			item.FileName = FileName;
				
			item.IdBenhnhan = IdBenhnhan;
				
			item.MaLuotkham = MaLuotkham;
				
			item.NgayPhieu = NgayPhieu;
				
			item.IdPhieu = IdPhieu;
				
			item.LoaiPhieuHis = LoaiPhieuHis;
				
			item.MaGayEmr = MaGayEmr;
				
			item.MaPhieuEmr = MaPhieuEmr;
				
			item.ReportCode = ReportCode;
				
			item.Title = Title;
				
			item.Ext = Ext;
				
			item.TthaiDuyet = TthaiDuyet;
				
			item.TthaiHuy = TthaiHuy;
				
			item.TthaiAn = TthaiAn;
				
			item.NguoiTao = NguoiTao;
				
			item.NgayTao = NgayTao;
				
			item.NguonTao = NguonTao;
				
			item.IdKhoa = IdKhoa;
				
			item.TenKhoa = TenKhoa;
				
			item.IdPhong = IdPhong;
				
			item.TenPhong = TenPhong;
				
			item.Noitru = Noitru;
				
			item.MotaThem = MotaThem;
				
	        item.Save(UserName);
	    }
    }
}
