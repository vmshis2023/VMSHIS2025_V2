using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
    /// <summary>
    /// Controller class for t_tamke
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TTamkeController
    {
        // Preload our schema..
        TTamke thisSchemaLoad = new TTamke();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TTamkeCollection FetchAll()
        {
            TTamkeCollection coll = new TTamkeCollection();
            Query qry = new Query(TTamke.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TTamkeCollection FetchByID(object Id)
        {
            TTamkeCollection coll = new TTamkeCollection().Where("Id", Id).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TTamkeCollection FetchByQuery(Query qry)
        {
            TTamkeCollection coll = new TTamkeCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Id)
        {
            return (TTamke.Delete(Id) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Id)
        {
            return (TTamke.Destroy(Id) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(short IdKho,long IdThuockho,int IdThuoc,decimal SoLuong,long IdPhieuCtiet,long? IdPhieu,byte Loai,string GuidKey,DateTime? NgayTao,string NguoiTao,string MaLuotkham,long? IdBenhnhan,byte? Noitru,bool? TrangThai,string IpMay,string MotaThem,string PrivateGuid,DateTime? NgayNhaton)
	    {
		    TTamke item = new TTamke();
		    
            item.IdKho = IdKho;
            
            item.IdThuockho = IdThuockho;
            
            item.IdThuoc = IdThuoc;
            
            item.SoLuong = SoLuong;
            
            item.IdPhieuCtiet = IdPhieuCtiet;
            
            item.IdPhieu = IdPhieu;
            
            item.Loai = Loai;
            
            item.GuidKey = GuidKey;
            
            item.NgayTao = NgayTao;
            
            item.NguoiTao = NguoiTao;
            
            item.MaLuotkham = MaLuotkham;
            
            item.IdBenhnhan = IdBenhnhan;
            
            item.Noitru = Noitru;
            
            item.TrangThai = TrangThai;
            
            item.IpMay = IpMay;
            
            item.MotaThem = MotaThem;
            
            item.PrivateGuid = PrivateGuid;
            
            item.NgayNhaton = NgayNhaton;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(long Id,short IdKho,long IdThuockho,int IdThuoc,decimal SoLuong,long IdPhieuCtiet,long? IdPhieu,byte Loai,string GuidKey,DateTime? NgayTao,string NguoiTao,string MaLuotkham,long? IdBenhnhan,byte? Noitru,bool? TrangThai,string IpMay,string MotaThem,string PrivateGuid,DateTime? NgayNhaton)
	    {
		    TTamke item = new TTamke();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.Id = Id;
				
			item.IdKho = IdKho;
				
			item.IdThuockho = IdThuockho;
				
			item.IdThuoc = IdThuoc;
				
			item.SoLuong = SoLuong;
				
			item.IdPhieuCtiet = IdPhieuCtiet;
				
			item.IdPhieu = IdPhieu;
				
			item.Loai = Loai;
				
			item.GuidKey = GuidKey;
				
			item.NgayTao = NgayTao;
				
			item.NguoiTao = NguoiTao;
				
			item.MaLuotkham = MaLuotkham;
				
			item.IdBenhnhan = IdBenhnhan;
				
			item.Noitru = Noitru;
				
			item.TrangThai = TrangThai;
				
			item.IpMay = IpMay;
				
			item.MotaThem = MotaThem;
				
			item.PrivateGuid = PrivateGuid;
				
			item.NgayNhaton = NgayNhaton;
				
	        item.Save(UserName);
	    }
    }
}
