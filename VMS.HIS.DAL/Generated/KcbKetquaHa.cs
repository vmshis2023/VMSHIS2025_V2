using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the KcbKetquaHa class.
	/// </summary>
    [Serializable]
	public partial class KcbKetquaHaCollection : ActiveList<KcbKetquaHa, KcbKetquaHaCollection>
	{	   
		public KcbKetquaHaCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>KcbKetquaHaCollection</returns>
		public KcbKetquaHaCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                KcbKetquaHa o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the kcb_ketqua_ha table.
	/// </summary>
	[Serializable]
	public partial class KcbKetquaHa : ActiveRecord<KcbKetquaHa>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public KcbKetquaHa()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public KcbKetquaHa(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public KcbKetquaHa(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public KcbKetquaHa(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("kcb_ketqua_ha", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int64;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarDuongdanLocal = new TableSchema.TableColumn(schema);
				colvarDuongdanLocal.ColumnName = "DuongdanLocal";
				colvarDuongdanLocal.DataType = DbType.String;
				colvarDuongdanLocal.MaxLength = 255;
				colvarDuongdanLocal.AutoIncrement = false;
				colvarDuongdanLocal.IsNullable = true;
				colvarDuongdanLocal.IsPrimaryKey = false;
				colvarDuongdanLocal.IsForeignKey = false;
				colvarDuongdanLocal.IsReadOnly = false;
				colvarDuongdanLocal.DefaultSetting = @"";
				colvarDuongdanLocal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDuongdanLocal);
				
				TableSchema.TableColumn colvarIdChiTietChiDinh = new TableSchema.TableColumn(schema);
				colvarIdChiTietChiDinh.ColumnName = "IdChiTietChiDinh";
				colvarIdChiTietChiDinh.DataType = DbType.Int64;
				colvarIdChiTietChiDinh.MaxLength = 0;
				colvarIdChiTietChiDinh.AutoIncrement = false;
				colvarIdChiTietChiDinh.IsNullable = false;
				colvarIdChiTietChiDinh.IsPrimaryKey = false;
				colvarIdChiTietChiDinh.IsForeignKey = false;
				colvarIdChiTietChiDinh.IsReadOnly = false;
				colvarIdChiTietChiDinh.DefaultSetting = @"";
				colvarIdChiTietChiDinh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdChiTietChiDinh);
				
				TableSchema.TableColumn colvarTenAnh = new TableSchema.TableColumn(schema);
				colvarTenAnh.ColumnName = "TenAnh";
				colvarTenAnh.DataType = DbType.String;
				colvarTenAnh.MaxLength = 100;
				colvarTenAnh.AutoIncrement = false;
				colvarTenAnh.IsNullable = false;
				colvarTenAnh.IsPrimaryKey = false;
				colvarTenAnh.IsForeignKey = false;
				colvarTenAnh.IsReadOnly = false;
				colvarTenAnh.DefaultSetting = @"";
				colvarTenAnh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenAnh);
				
				TableSchema.TableColumn colvarMota = new TableSchema.TableColumn(schema);
				colvarMota.ColumnName = "Mota";
				colvarMota.DataType = DbType.String;
				colvarMota.MaxLength = 255;
				colvarMota.AutoIncrement = false;
				colvarMota.IsNullable = true;
				colvarMota.IsPrimaryKey = false;
				colvarMota.IsForeignKey = false;
				colvarMota.IsReadOnly = false;
				colvarMota.DefaultSetting = @"";
				colvarMota.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMota);
				
				TableSchema.TableColumn colvarSttin = new TableSchema.TableColumn(schema);
				colvarSttin.ColumnName = "Sttin";
				colvarSttin.DataType = DbType.Int16;
				colvarSttin.MaxLength = 0;
				colvarSttin.AutoIncrement = false;
				colvarSttin.IsNullable = true;
				colvarSttin.IsPrimaryKey = false;
				colvarSttin.IsForeignKey = false;
				colvarSttin.IsReadOnly = false;
				colvarSttin.DefaultSetting = @"";
				colvarSttin.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSttin);
				
				TableSchema.TableColumn colvarChonin = new TableSchema.TableColumn(schema);
				colvarChonin.ColumnName = "Chonin";
				colvarChonin.DataType = DbType.Byte;
				colvarChonin.MaxLength = 0;
				colvarChonin.AutoIncrement = false;
				colvarChonin.IsNullable = true;
				colvarChonin.IsPrimaryKey = false;
				colvarChonin.IsForeignKey = false;
				colvarChonin.IsReadOnly = false;
				colvarChonin.DefaultSetting = @"";
				colvarChonin.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChonin);
				
				TableSchema.TableColumn colvarVitri = new TableSchema.TableColumn(schema);
				colvarVitri.ColumnName = "vitri";
				colvarVitri.DataType = DbType.Byte;
				colvarVitri.MaxLength = 0;
				colvarVitri.AutoIncrement = false;
				colvarVitri.IsNullable = true;
				colvarVitri.IsPrimaryKey = false;
				colvarVitri.IsForeignKey = false;
				colvarVitri.IsReadOnly = false;
				colvarVitri.DefaultSetting = @"";
				colvarVitri.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVitri);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("kcb_ketqua_ha",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public long Id 
		{
			get { return GetColumnValue<long>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("DuongdanLocal")]
		[Bindable(true)]
		public string DuongdanLocal 
		{
			get { return GetColumnValue<string>(Columns.DuongdanLocal); }
			set { SetColumnValue(Columns.DuongdanLocal, value); }
		}
		  
		[XmlAttribute("IdChiTietChiDinh")]
		[Bindable(true)]
		public long IdChiTietChiDinh 
		{
			get { return GetColumnValue<long>(Columns.IdChiTietChiDinh); }
			set { SetColumnValue(Columns.IdChiTietChiDinh, value); }
		}
		  
		[XmlAttribute("TenAnh")]
		[Bindable(true)]
		public string TenAnh 
		{
			get { return GetColumnValue<string>(Columns.TenAnh); }
			set { SetColumnValue(Columns.TenAnh, value); }
		}
		  
		[XmlAttribute("Mota")]
		[Bindable(true)]
		public string Mota 
		{
			get { return GetColumnValue<string>(Columns.Mota); }
			set { SetColumnValue(Columns.Mota, value); }
		}
		  
		[XmlAttribute("Sttin")]
		[Bindable(true)]
		public short? Sttin 
		{
			get { return GetColumnValue<short?>(Columns.Sttin); }
			set { SetColumnValue(Columns.Sttin, value); }
		}
		  
		[XmlAttribute("Chonin")]
		[Bindable(true)]
		public byte? Chonin 
		{
			get { return GetColumnValue<byte?>(Columns.Chonin); }
			set { SetColumnValue(Columns.Chonin, value); }
		}
		  
		[XmlAttribute("Vitri")]
		[Bindable(true)]
		public byte? Vitri 
		{
			get { return GetColumnValue<byte?>(Columns.Vitri); }
			set { SetColumnValue(Columns.Vitri, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varDuongdanLocal,long varIdChiTietChiDinh,string varTenAnh,string varMota,short? varSttin,byte? varChonin,byte? varVitri)
		{
			KcbKetquaHa item = new KcbKetquaHa();
			
			item.DuongdanLocal = varDuongdanLocal;
			
			item.IdChiTietChiDinh = varIdChiTietChiDinh;
			
			item.TenAnh = varTenAnh;
			
			item.Mota = varMota;
			
			item.Sttin = varSttin;
			
			item.Chonin = varChonin;
			
			item.Vitri = varVitri;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varId,string varDuongdanLocal,long varIdChiTietChiDinh,string varTenAnh,string varMota,short? varSttin,byte? varChonin,byte? varVitri)
		{
			KcbKetquaHa item = new KcbKetquaHa();
			
				item.Id = varId;
			
				item.DuongdanLocal = varDuongdanLocal;
			
				item.IdChiTietChiDinh = varIdChiTietChiDinh;
			
				item.TenAnh = varTenAnh;
			
				item.Mota = varMota;
			
				item.Sttin = varSttin;
			
				item.Chonin = varChonin;
			
				item.Vitri = varVitri;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DuongdanLocalColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdChiTietChiDinhColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TenAnhColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MotaColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SttinColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ChoninColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn VitriColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string DuongdanLocal = @"DuongdanLocal";
			 public static string IdChiTietChiDinh = @"IdChiTietChiDinh";
			 public static string TenAnh = @"TenAnh";
			 public static string Mota = @"Mota";
			 public static string Sttin = @"Sttin";
			 public static string Chonin = @"Chonin";
			 public static string Vitri = @"vitri";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
