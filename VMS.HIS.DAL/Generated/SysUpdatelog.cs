using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysUpdatelog class.
	/// </summary>
    [Serializable]
	public partial class SysUpdatelogCollection : ActiveList<SysUpdatelog, SysUpdatelogCollection>
	{	   
		public SysUpdatelogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysUpdatelogCollection</returns>
		public SysUpdatelogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysUpdatelog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the sys_updatelog table.
	/// </summary>
	[Serializable]
	public partial class SysUpdatelog : ActiveRecord<SysUpdatelog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SysUpdatelog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysUpdatelog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysUpdatelog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysUpdatelog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("sys_updatelog", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int64;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarVersionId = new TableSchema.TableColumn(schema);
				colvarVersionId.ColumnName = "version_id";
				colvarVersionId.DataType = DbType.Int32;
				colvarVersionId.MaxLength = 0;
				colvarVersionId.AutoIncrement = false;
				colvarVersionId.IsNullable = true;
				colvarVersionId.IsPrimaryKey = false;
				colvarVersionId.IsForeignKey = false;
				colvarVersionId.IsReadOnly = false;
				colvarVersionId.DefaultSetting = @"";
				colvarVersionId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVersionId);
				
				TableSchema.TableColumn colvarIpaddress = new TableSchema.TableColumn(schema);
				colvarIpaddress.ColumnName = "ipaddress";
				colvarIpaddress.DataType = DbType.String;
				colvarIpaddress.MaxLength = 50;
				colvarIpaddress.AutoIncrement = false;
				colvarIpaddress.IsNullable = true;
				colvarIpaddress.IsPrimaryKey = false;
				colvarIpaddress.IsForeignKey = false;
				colvarIpaddress.IsReadOnly = false;
				colvarIpaddress.DefaultSetting = @"";
				colvarIpaddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpaddress);
				
				TableSchema.TableColumn colvarComputername = new TableSchema.TableColumn(schema);
				colvarComputername.ColumnName = "computername";
				colvarComputername.DataType = DbType.String;
				colvarComputername.MaxLength = 255;
				colvarComputername.AutoIncrement = false;
				colvarComputername.IsNullable = true;
				colvarComputername.IsPrimaryKey = false;
				colvarComputername.IsForeignKey = false;
				colvarComputername.IsReadOnly = false;
				colvarComputername.DefaultSetting = @"";
				colvarComputername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComputername);
				
				TableSchema.TableColumn colvarFilename = new TableSchema.TableColumn(schema);
				colvarFilename.ColumnName = "filename";
				colvarFilename.DataType = DbType.String;
				colvarFilename.MaxLength = 255;
				colvarFilename.AutoIncrement = false;
				colvarFilename.IsNullable = true;
				colvarFilename.IsPrimaryKey = false;
				colvarFilename.IsForeignKey = false;
				colvarFilename.IsReadOnly = false;
				colvarFilename.DefaultSetting = @"";
				colvarFilename.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFilename);
				
				TableSchema.TableColumn colvarDateupdate = new TableSchema.TableColumn(schema);
				colvarDateupdate.ColumnName = "dateupdate";
				colvarDateupdate.DataType = DbType.DateTime;
				colvarDateupdate.MaxLength = 0;
				colvarDateupdate.AutoIncrement = false;
				colvarDateupdate.IsNullable = true;
				colvarDateupdate.IsPrimaryKey = false;
				colvarDateupdate.IsForeignKey = false;
				colvarDateupdate.IsReadOnly = false;
				colvarDateupdate.DefaultSetting = @"";
				colvarDateupdate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateupdate);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "status";
				colvarStatus.DataType = DbType.Byte;
				colvarStatus.MaxLength = 0;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = true;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				colvarStatus.DefaultSetting = @"";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("sys_updatelog",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public long Id 
		{
			get { return GetColumnValue<long>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("VersionId")]
		[Bindable(true)]
		public int? VersionId 
		{
			get { return GetColumnValue<int?>(Columns.VersionId); }
			set { SetColumnValue(Columns.VersionId, value); }
		}
		  
		[XmlAttribute("Ipaddress")]
		[Bindable(true)]
		public string Ipaddress 
		{
			get { return GetColumnValue<string>(Columns.Ipaddress); }
			set { SetColumnValue(Columns.Ipaddress, value); }
		}
		  
		[XmlAttribute("Computername")]
		[Bindable(true)]
		public string Computername 
		{
			get { return GetColumnValue<string>(Columns.Computername); }
			set { SetColumnValue(Columns.Computername, value); }
		}
		  
		[XmlAttribute("Filename")]
		[Bindable(true)]
		public string Filename 
		{
			get { return GetColumnValue<string>(Columns.Filename); }
			set { SetColumnValue(Columns.Filename, value); }
		}
		  
		[XmlAttribute("Dateupdate")]
		[Bindable(true)]
		public DateTime? Dateupdate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Dateupdate); }
			set { SetColumnValue(Columns.Dateupdate, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public byte? Status 
		{
			get { return GetColumnValue<byte?>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varVersionId,string varIpaddress,string varComputername,string varFilename,DateTime? varDateupdate,byte? varStatus)
		{
			SysUpdatelog item = new SysUpdatelog();
			
			item.VersionId = varVersionId;
			
			item.Ipaddress = varIpaddress;
			
			item.Computername = varComputername;
			
			item.Filename = varFilename;
			
			item.Dateupdate = varDateupdate;
			
			item.Status = varStatus;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varId,int? varVersionId,string varIpaddress,string varComputername,string varFilename,DateTime? varDateupdate,byte? varStatus)
		{
			SysUpdatelog item = new SysUpdatelog();
			
				item.Id = varId;
			
				item.VersionId = varVersionId;
			
				item.Ipaddress = varIpaddress;
			
				item.Computername = varComputername;
			
				item.Filename = varFilename;
			
				item.Dateupdate = varDateupdate;
			
				item.Status = varStatus;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn VersionIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IpaddressColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ComputernameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FilenameColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DateupdateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string VersionId = @"version_id";
			 public static string Ipaddress = @"ipaddress";
			 public static string Computername = @"computername";
			 public static string Filename = @"filename";
			 public static string Dateupdate = @"dateupdate";
			 public static string Status = @"status";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
