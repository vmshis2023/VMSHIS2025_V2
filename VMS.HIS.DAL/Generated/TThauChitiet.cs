using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the TThauChitiet class.
	/// </summary>
    [Serializable]
	public partial class TThauChitietCollection : ActiveList<TThauChitiet, TThauChitietCollection>
	{	   
		public TThauChitietCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TThauChitietCollection</returns>
		public TThauChitietCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TThauChitiet o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the t_thau_chitiet table.
	/// </summary>
	[Serializable]
	public partial class TThauChitiet : ActiveRecord<TThauChitiet>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TThauChitiet()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TThauChitiet(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TThauChitiet(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TThauChitiet(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("t_thau_chitiet", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdThauCt = new TableSchema.TableColumn(schema);
				colvarIdThauCt.ColumnName = "id_thau_ct";
				colvarIdThauCt.DataType = DbType.Int64;
				colvarIdThauCt.MaxLength = 0;
				colvarIdThauCt.AutoIncrement = true;
				colvarIdThauCt.IsNullable = false;
				colvarIdThauCt.IsPrimaryKey = true;
				colvarIdThauCt.IsForeignKey = false;
				colvarIdThauCt.IsReadOnly = false;
				colvarIdThauCt.DefaultSetting = @"";
				colvarIdThauCt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdThauCt);
				
				TableSchema.TableColumn colvarIdThau = new TableSchema.TableColumn(schema);
				colvarIdThau.ColumnName = "id_thau";
				colvarIdThau.DataType = DbType.Int64;
				colvarIdThau.MaxLength = 0;
				colvarIdThau.AutoIncrement = false;
				colvarIdThau.IsNullable = false;
				colvarIdThau.IsPrimaryKey = false;
				colvarIdThau.IsForeignKey = false;
				colvarIdThau.IsReadOnly = false;
				colvarIdThau.DefaultSetting = @"";
				colvarIdThau.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdThau);
				
				TableSchema.TableColumn colvarIdThuoc = new TableSchema.TableColumn(schema);
				colvarIdThuoc.ColumnName = "id_thuoc";
				colvarIdThuoc.DataType = DbType.Int32;
				colvarIdThuoc.MaxLength = 0;
				colvarIdThuoc.AutoIncrement = false;
				colvarIdThuoc.IsNullable = false;
				colvarIdThuoc.IsPrimaryKey = false;
				colvarIdThuoc.IsForeignKey = false;
				colvarIdThuoc.IsReadOnly = false;
				colvarIdThuoc.DefaultSetting = @"";
				colvarIdThuoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdThuoc);
				
				TableSchema.TableColumn colvarMaDvt = new TableSchema.TableColumn(schema);
				colvarMaDvt.ColumnName = "ma_dvt";
				colvarMaDvt.DataType = DbType.String;
				colvarMaDvt.MaxLength = 30;
				colvarMaDvt.AutoIncrement = false;
				colvarMaDvt.IsNullable = false;
				colvarMaDvt.IsPrimaryKey = false;
				colvarMaDvt.IsForeignKey = false;
				colvarMaDvt.IsReadOnly = false;
				colvarMaDvt.DefaultSetting = @"";
				colvarMaDvt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaDvt);
				
				TableSchema.TableColumn colvarSoLuong = new TableSchema.TableColumn(schema);
				colvarSoLuong.ColumnName = "so_luong";
				colvarSoLuong.DataType = DbType.Decimal;
				colvarSoLuong.MaxLength = 0;
				colvarSoLuong.AutoIncrement = false;
				colvarSoLuong.IsNullable = false;
				colvarSoLuong.IsPrimaryKey = false;
				colvarSoLuong.IsForeignKey = false;
				colvarSoLuong.IsReadOnly = false;
				colvarSoLuong.DefaultSetting = @"";
				colvarSoLuong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoLuong);
				
				TableSchema.TableColumn colvarDonGia = new TableSchema.TableColumn(schema);
				colvarDonGia.ColumnName = "don_gia";
				colvarDonGia.DataType = DbType.Decimal;
				colvarDonGia.MaxLength = 0;
				colvarDonGia.AutoIncrement = false;
				colvarDonGia.IsNullable = false;
				colvarDonGia.IsPrimaryKey = false;
				colvarDonGia.IsForeignKey = false;
				colvarDonGia.IsReadOnly = false;
				colvarDonGia.DefaultSetting = @"";
				colvarDonGia.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDonGia);
				
				TableSchema.TableColumn colvarSlNhap = new TableSchema.TableColumn(schema);
				colvarSlNhap.ColumnName = "sl_nhap";
				colvarSlNhap.DataType = DbType.Int32;
				colvarSlNhap.MaxLength = 0;
				colvarSlNhap.AutoIncrement = false;
				colvarSlNhap.IsNullable = true;
				colvarSlNhap.IsPrimaryKey = false;
				colvarSlNhap.IsForeignKey = false;
				colvarSlNhap.IsReadOnly = false;
				
						colvarSlNhap.DefaultSetting = @"((0))";
				colvarSlNhap.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSlNhap);
				
				TableSchema.TableColumn colvarSlDieutietDi = new TableSchema.TableColumn(schema);
				colvarSlDieutietDi.ColumnName = "sl_dieutiet_di";
				colvarSlDieutietDi.DataType = DbType.Int32;
				colvarSlDieutietDi.MaxLength = 0;
				colvarSlDieutietDi.AutoIncrement = false;
				colvarSlDieutietDi.IsNullable = true;
				colvarSlDieutietDi.IsPrimaryKey = false;
				colvarSlDieutietDi.IsForeignKey = false;
				colvarSlDieutietDi.IsReadOnly = false;
				
						colvarSlDieutietDi.DefaultSetting = @"((0))";
				colvarSlDieutietDi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSlDieutietDi);
				
				TableSchema.TableColumn colvarSlDieutietDen = new TableSchema.TableColumn(schema);
				colvarSlDieutietDen.ColumnName = "sl_dieutiet_den";
				colvarSlDieutietDen.DataType = DbType.Int32;
				colvarSlDieutietDen.MaxLength = 0;
				colvarSlDieutietDen.AutoIncrement = false;
				colvarSlDieutietDen.IsNullable = true;
				colvarSlDieutietDen.IsPrimaryKey = false;
				colvarSlDieutietDen.IsForeignKey = false;
				colvarSlDieutietDen.IsReadOnly = false;
				
						colvarSlDieutietDen.DefaultSetting = @"((0))";
				colvarSlDieutietDen.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSlDieutietDen);
				
				TableSchema.TableColumn colvarNhomTckt = new TableSchema.TableColumn(schema);
				colvarNhomTckt.ColumnName = "nhom_tckt";
				colvarNhomTckt.DataType = DbType.String;
				colvarNhomTckt.MaxLength = 128;
				colvarNhomTckt.AutoIncrement = false;
				colvarNhomTckt.IsNullable = true;
				colvarNhomTckt.IsPrimaryKey = false;
				colvarNhomTckt.IsForeignKey = false;
				colvarNhomTckt.IsReadOnly = false;
				colvarNhomTckt.DefaultSetting = @"";
				colvarNhomTckt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNhomTckt);
				
				TableSchema.TableColumn colvarNguonGoc = new TableSchema.TableColumn(schema);
				colvarNguonGoc.ColumnName = "nguon_goc";
				colvarNguonGoc.DataType = DbType.String;
				colvarNguonGoc.MaxLength = 128;
				colvarNguonGoc.AutoIncrement = false;
				colvarNguonGoc.IsNullable = true;
				colvarNguonGoc.IsPrimaryKey = false;
				colvarNguonGoc.IsForeignKey = false;
				colvarNguonGoc.IsReadOnly = false;
				colvarNguonGoc.DefaultSetting = @"";
				colvarNguonGoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguonGoc);
				
				TableSchema.TableColumn colvarDangSoche = new TableSchema.TableColumn(schema);
				colvarDangSoche.ColumnName = "dang_soche";
				colvarDangSoche.DataType = DbType.String;
				colvarDangSoche.MaxLength = 128;
				colvarDangSoche.AutoIncrement = false;
				colvarDangSoche.IsNullable = true;
				colvarDangSoche.IsPrimaryKey = false;
				colvarDangSoche.IsForeignKey = false;
				colvarDangSoche.IsReadOnly = false;
				colvarDangSoche.DefaultSetting = @"";
				colvarDangSoche.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDangSoche);
				
				TableSchema.TableColumn colvarTccl = new TableSchema.TableColumn(schema);
				colvarTccl.ColumnName = "tccl";
				colvarTccl.DataType = DbType.String;
				colvarTccl.MaxLength = 128;
				colvarTccl.AutoIncrement = false;
				colvarTccl.IsNullable = true;
				colvarTccl.IsPrimaryKey = false;
				colvarTccl.IsForeignKey = false;
				colvarTccl.IsReadOnly = false;
				colvarTccl.DefaultSetting = @"";
				colvarTccl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTccl);
				
				TableSchema.TableColumn colvarNhomThau = new TableSchema.TableColumn(schema);
				colvarNhomThau.ColumnName = "nhom_thau";
				colvarNhomThau.DataType = DbType.String;
				colvarNhomThau.MaxLength = 5;
				colvarNhomThau.AutoIncrement = false;
				colvarNhomThau.IsNullable = true;
				colvarNhomThau.IsPrimaryKey = false;
				colvarNhomThau.IsForeignKey = false;
				colvarNhomThau.IsReadOnly = false;
				colvarNhomThau.DefaultSetting = @"";
				colvarNhomThau.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNhomThau);
				
				TableSchema.TableColumn colvarSoDangky = new TableSchema.TableColumn(schema);
				colvarSoDangky.ColumnName = "so_dangky";
				colvarSoDangky.DataType = DbType.String;
				colvarSoDangky.MaxLength = 255;
				colvarSoDangky.AutoIncrement = false;
				colvarSoDangky.IsNullable = true;
				colvarSoDangky.IsPrimaryKey = false;
				colvarSoDangky.IsForeignKey = false;
				colvarSoDangky.IsReadOnly = false;
				colvarSoDangky.DefaultSetting = @"";
				colvarSoDangky.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoDangky);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "nguoi_tao";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 50;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = false;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "ngay_tao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = false;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNguoiSua = new TableSchema.TableColumn(schema);
				colvarNguoiSua.ColumnName = "nguoi_sua";
				colvarNguoiSua.DataType = DbType.String;
				colvarNguoiSua.MaxLength = 50;
				colvarNguoiSua.AutoIncrement = false;
				colvarNguoiSua.IsNullable = true;
				colvarNguoiSua.IsPrimaryKey = false;
				colvarNguoiSua.IsForeignKey = false;
				colvarNguoiSua.IsReadOnly = false;
				colvarNguoiSua.DefaultSetting = @"";
				colvarNguoiSua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiSua);
				
				TableSchema.TableColumn colvarNgaySua = new TableSchema.TableColumn(schema);
				colvarNgaySua.ColumnName = "ngay_sua";
				colvarNgaySua.DataType = DbType.DateTime;
				colvarNgaySua.MaxLength = 0;
				colvarNgaySua.AutoIncrement = false;
				colvarNgaySua.IsNullable = true;
				colvarNgaySua.IsPrimaryKey = false;
				colvarNgaySua.IsForeignKey = false;
				colvarNgaySua.IsReadOnly = false;
				colvarNgaySua.DefaultSetting = @"";
				colvarNgaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgaySua);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "trang_thai";
				colvarTrangThai.DataType = DbType.Byte;
				colvarTrangThai.MaxLength = 0;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = true;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				colvarTrangThai.DefaultSetting = @"";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("t_thau_chitiet",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdThauCt")]
		[Bindable(true)]
		public long IdThauCt 
		{
			get { return GetColumnValue<long>(Columns.IdThauCt); }
			set { SetColumnValue(Columns.IdThauCt, value); }
		}
		  
		[XmlAttribute("IdThau")]
		[Bindable(true)]
		public long IdThau 
		{
			get { return GetColumnValue<long>(Columns.IdThau); }
			set { SetColumnValue(Columns.IdThau, value); }
		}
		  
		[XmlAttribute("IdThuoc")]
		[Bindable(true)]
		public int IdThuoc 
		{
			get { return GetColumnValue<int>(Columns.IdThuoc); }
			set { SetColumnValue(Columns.IdThuoc, value); }
		}
		  
		[XmlAttribute("MaDvt")]
		[Bindable(true)]
		public string MaDvt 
		{
			get { return GetColumnValue<string>(Columns.MaDvt); }
			set { SetColumnValue(Columns.MaDvt, value); }
		}
		  
		[XmlAttribute("SoLuong")]
		[Bindable(true)]
		public decimal SoLuong 
		{
			get { return GetColumnValue<decimal>(Columns.SoLuong); }
			set { SetColumnValue(Columns.SoLuong, value); }
		}
		  
		[XmlAttribute("DonGia")]
		[Bindable(true)]
		public decimal DonGia 
		{
			get { return GetColumnValue<decimal>(Columns.DonGia); }
			set { SetColumnValue(Columns.DonGia, value); }
		}
		  
		[XmlAttribute("SlNhap")]
		[Bindable(true)]
		public int? SlNhap 
		{
			get { return GetColumnValue<int?>(Columns.SlNhap); }
			set { SetColumnValue(Columns.SlNhap, value); }
		}
		  
		[XmlAttribute("SlDieutietDi")]
		[Bindable(true)]
		public int? SlDieutietDi 
		{
			get { return GetColumnValue<int?>(Columns.SlDieutietDi); }
			set { SetColumnValue(Columns.SlDieutietDi, value); }
		}
		  
		[XmlAttribute("SlDieutietDen")]
		[Bindable(true)]
		public int? SlDieutietDen 
		{
			get { return GetColumnValue<int?>(Columns.SlDieutietDen); }
			set { SetColumnValue(Columns.SlDieutietDen, value); }
		}
		  
		[XmlAttribute("NhomTckt")]
		[Bindable(true)]
		public string NhomTckt 
		{
			get { return GetColumnValue<string>(Columns.NhomTckt); }
			set { SetColumnValue(Columns.NhomTckt, value); }
		}
		  
		[XmlAttribute("NguonGoc")]
		[Bindable(true)]
		public string NguonGoc 
		{
			get { return GetColumnValue<string>(Columns.NguonGoc); }
			set { SetColumnValue(Columns.NguonGoc, value); }
		}
		  
		[XmlAttribute("DangSoche")]
		[Bindable(true)]
		public string DangSoche 
		{
			get { return GetColumnValue<string>(Columns.DangSoche); }
			set { SetColumnValue(Columns.DangSoche, value); }
		}
		  
		[XmlAttribute("Tccl")]
		[Bindable(true)]
		public string Tccl 
		{
			get { return GetColumnValue<string>(Columns.Tccl); }
			set { SetColumnValue(Columns.Tccl, value); }
		}
		  
		[XmlAttribute("NhomThau")]
		[Bindable(true)]
		public string NhomThau 
		{
			get { return GetColumnValue<string>(Columns.NhomThau); }
			set { SetColumnValue(Columns.NhomThau, value); }
		}
		  
		[XmlAttribute("SoDangky")]
		[Bindable(true)]
		public string SoDangky 
		{
			get { return GetColumnValue<string>(Columns.SoDangky); }
			set { SetColumnValue(Columns.SoDangky, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime NgayTao 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NguoiSua")]
		[Bindable(true)]
		public string NguoiSua 
		{
			get { return GetColumnValue<string>(Columns.NguoiSua); }
			set { SetColumnValue(Columns.NguoiSua, value); }
		}
		  
		[XmlAttribute("NgaySua")]
		[Bindable(true)]
		public DateTime? NgaySua 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgaySua); }
			set { SetColumnValue(Columns.NgaySua, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public byte? TrangThai 
		{
			get { return GetColumnValue<byte?>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varIdThau,int varIdThuoc,string varMaDvt,decimal varSoLuong,decimal varDonGia,int? varSlNhap,int? varSlDieutietDi,int? varSlDieutietDen,string varNhomTckt,string varNguonGoc,string varDangSoche,string varTccl,string varNhomThau,string varSoDangky,string varNguoiTao,DateTime varNgayTao,string varNguoiSua,DateTime? varNgaySua,byte? varTrangThai)
		{
			TThauChitiet item = new TThauChitiet();
			
			item.IdThau = varIdThau;
			
			item.IdThuoc = varIdThuoc;
			
			item.MaDvt = varMaDvt;
			
			item.SoLuong = varSoLuong;
			
			item.DonGia = varDonGia;
			
			item.SlNhap = varSlNhap;
			
			item.SlDieutietDi = varSlDieutietDi;
			
			item.SlDieutietDen = varSlDieutietDen;
			
			item.NhomTckt = varNhomTckt;
			
			item.NguonGoc = varNguonGoc;
			
			item.DangSoche = varDangSoche;
			
			item.Tccl = varTccl;
			
			item.NhomThau = varNhomThau;
			
			item.SoDangky = varSoDangky;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayTao = varNgayTao;
			
			item.NguoiSua = varNguoiSua;
			
			item.NgaySua = varNgaySua;
			
			item.TrangThai = varTrangThai;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varIdThauCt,long varIdThau,int varIdThuoc,string varMaDvt,decimal varSoLuong,decimal varDonGia,int? varSlNhap,int? varSlDieutietDi,int? varSlDieutietDen,string varNhomTckt,string varNguonGoc,string varDangSoche,string varTccl,string varNhomThau,string varSoDangky,string varNguoiTao,DateTime varNgayTao,string varNguoiSua,DateTime? varNgaySua,byte? varTrangThai)
		{
			TThauChitiet item = new TThauChitiet();
			
				item.IdThauCt = varIdThauCt;
			
				item.IdThau = varIdThau;
			
				item.IdThuoc = varIdThuoc;
			
				item.MaDvt = varMaDvt;
			
				item.SoLuong = varSoLuong;
			
				item.DonGia = varDonGia;
			
				item.SlNhap = varSlNhap;
			
				item.SlDieutietDi = varSlDieutietDi;
			
				item.SlDieutietDen = varSlDieutietDen;
			
				item.NhomTckt = varNhomTckt;
			
				item.NguonGoc = varNguonGoc;
			
				item.DangSoche = varDangSoche;
			
				item.Tccl = varTccl;
			
				item.NhomThau = varNhomThau;
			
				item.SoDangky = varSoDangky;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayTao = varNgayTao;
			
				item.NguoiSua = varNguoiSua;
			
				item.NgaySua = varNgaySua;
			
				item.TrangThai = varTrangThai;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdThauCtColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdThauColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdThuocColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn MaDvtColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SoLuongColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DonGiaColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SlNhapColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SlDieutietDiColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SlDieutietDenColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NhomTcktColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn NguonGocColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn DangSocheColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn TcclColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn NhomThauColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn SoDangkyColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiSuaColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn NgaySuaColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdThauCt = @"id_thau_ct";
			 public static string IdThau = @"id_thau";
			 public static string IdThuoc = @"id_thuoc";
			 public static string MaDvt = @"ma_dvt";
			 public static string SoLuong = @"so_luong";
			 public static string DonGia = @"don_gia";
			 public static string SlNhap = @"sl_nhap";
			 public static string SlDieutietDi = @"sl_dieutiet_di";
			 public static string SlDieutietDen = @"sl_dieutiet_den";
			 public static string NhomTckt = @"nhom_tckt";
			 public static string NguonGoc = @"nguon_goc";
			 public static string DangSoche = @"dang_soche";
			 public static string Tccl = @"tccl";
			 public static string NhomThau = @"nhom_thau";
			 public static string SoDangky = @"so_dangky";
			 public static string NguoiTao = @"nguoi_tao";
			 public static string NgayTao = @"ngay_tao";
			 public static string NguoiSua = @"nguoi_sua";
			 public static string NgaySua = @"ngay_sua";
			 public static string TrangThai = @"trang_thai";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
