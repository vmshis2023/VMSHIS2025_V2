using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the DmucHoatchat class.
	/// </summary>
    [Serializable]
	public partial class DmucHoatchatCollection : ActiveList<DmucHoatchat, DmucHoatchatCollection>
	{	   
		public DmucHoatchatCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DmucHoatchatCollection</returns>
		public DmucHoatchatCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DmucHoatchat o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the dmuc_hoatchat table.
	/// </summary>
	[Serializable]
	public partial class DmucHoatchat : ActiveRecord<DmucHoatchat>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DmucHoatchat()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DmucHoatchat(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DmucHoatchat(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DmucHoatchat(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("dmuc_hoatchat", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdHoatchat = new TableSchema.TableColumn(schema);
				colvarIdHoatchat.ColumnName = "id_hoatchat";
				colvarIdHoatchat.DataType = DbType.Int16;
				colvarIdHoatchat.MaxLength = 0;
				colvarIdHoatchat.AutoIncrement = true;
				colvarIdHoatchat.IsNullable = false;
				colvarIdHoatchat.IsPrimaryKey = true;
				colvarIdHoatchat.IsForeignKey = false;
				colvarIdHoatchat.IsReadOnly = false;
				colvarIdHoatchat.DefaultSetting = @"";
				colvarIdHoatchat.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdHoatchat);
				
				TableSchema.TableColumn colvarMaHoatchat = new TableSchema.TableColumn(schema);
				colvarMaHoatchat.ColumnName = "ma_hoatchat";
				colvarMaHoatchat.DataType = DbType.String;
				colvarMaHoatchat.MaxLength = 30;
				colvarMaHoatchat.AutoIncrement = false;
				colvarMaHoatchat.IsNullable = true;
				colvarMaHoatchat.IsPrimaryKey = false;
				colvarMaHoatchat.IsForeignKey = false;
				colvarMaHoatchat.IsReadOnly = false;
				colvarMaHoatchat.DefaultSetting = @"";
				colvarMaHoatchat.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaHoatchat);
				
				TableSchema.TableColumn colvarTenHoatchat = new TableSchema.TableColumn(schema);
				colvarTenHoatchat.ColumnName = "ten_hoatchat";
				colvarTenHoatchat.DataType = DbType.String;
				colvarTenHoatchat.MaxLength = 350;
				colvarTenHoatchat.AutoIncrement = false;
				colvarTenHoatchat.IsNullable = true;
				colvarTenHoatchat.IsPrimaryKey = false;
				colvarTenHoatchat.IsForeignKey = false;
				colvarTenHoatchat.IsReadOnly = false;
				colvarTenHoatchat.DefaultSetting = @"";
				colvarTenHoatchat.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenHoatchat);
				
				TableSchema.TableColumn colvarSttHthi = new TableSchema.TableColumn(schema);
				colvarSttHthi.ColumnName = "stt_hthi";
				colvarSttHthi.DataType = DbType.Int16;
				colvarSttHthi.MaxLength = 0;
				colvarSttHthi.AutoIncrement = false;
				colvarSttHthi.IsNullable = true;
				colvarSttHthi.IsPrimaryKey = false;
				colvarSttHthi.IsForeignKey = false;
				colvarSttHthi.IsReadOnly = false;
				colvarSttHthi.DefaultSetting = @"";
				colvarSttHthi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSttHthi);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "trang_thai";
				colvarTrangThai.DataType = DbType.Boolean;
				colvarTrangThai.MaxLength = 0;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = true;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				
						colvarTrangThai.DefaultSetting = @"((1))";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				TableSchema.TableColumn colvarMoTa = new TableSchema.TableColumn(schema);
				colvarMoTa.ColumnName = "mo_ta";
				colvarMoTa.DataType = DbType.String;
				colvarMoTa.MaxLength = 255;
				colvarMoTa.AutoIncrement = false;
				colvarMoTa.IsNullable = true;
				colvarMoTa.IsPrimaryKey = false;
				colvarMoTa.IsForeignKey = false;
				colvarMoTa.IsReadOnly = false;
				colvarMoTa.DefaultSetting = @"";
				colvarMoTa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoTa);
				
				TableSchema.TableColumn colvarMaDuongdung = new TableSchema.TableColumn(schema);
				colvarMaDuongdung.ColumnName = "ma_duongdung";
				colvarMaDuongdung.DataType = DbType.String;
				colvarMaDuongdung.MaxLength = 30;
				colvarMaDuongdung.AutoIncrement = false;
				colvarMaDuongdung.IsNullable = true;
				colvarMaDuongdung.IsPrimaryKey = false;
				colvarMaDuongdung.IsForeignKey = false;
				colvarMaDuongdung.IsReadOnly = false;
				colvarMaDuongdung.DefaultSetting = @"";
				colvarMaDuongdung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaDuongdung);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("dmuc_hoatchat",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdHoatchat")]
		[Bindable(true)]
		public short IdHoatchat 
		{
			get { return GetColumnValue<short>(Columns.IdHoatchat); }
			set { SetColumnValue(Columns.IdHoatchat, value); }
		}
		  
		[XmlAttribute("MaHoatchat")]
		[Bindable(true)]
		public string MaHoatchat 
		{
			get { return GetColumnValue<string>(Columns.MaHoatchat); }
			set { SetColumnValue(Columns.MaHoatchat, value); }
		}
		  
		[XmlAttribute("TenHoatchat")]
		[Bindable(true)]
		public string TenHoatchat 
		{
			get { return GetColumnValue<string>(Columns.TenHoatchat); }
			set { SetColumnValue(Columns.TenHoatchat, value); }
		}
		  
		[XmlAttribute("SttHthi")]
		[Bindable(true)]
		public short? SttHthi 
		{
			get { return GetColumnValue<short?>(Columns.SttHthi); }
			set { SetColumnValue(Columns.SttHthi, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public bool? TrangThai 
		{
			get { return GetColumnValue<bool?>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		  
		[XmlAttribute("MoTa")]
		[Bindable(true)]
		public string MoTa 
		{
			get { return GetColumnValue<string>(Columns.MoTa); }
			set { SetColumnValue(Columns.MoTa, value); }
		}
		  
		[XmlAttribute("MaDuongdung")]
		[Bindable(true)]
		public string MaDuongdung 
		{
			get { return GetColumnValue<string>(Columns.MaDuongdung); }
			set { SetColumnValue(Columns.MaDuongdung, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaHoatchat,string varTenHoatchat,short? varSttHthi,bool? varTrangThai,string varMoTa,string varMaDuongdung)
		{
			DmucHoatchat item = new DmucHoatchat();
			
			item.MaHoatchat = varMaHoatchat;
			
			item.TenHoatchat = varTenHoatchat;
			
			item.SttHthi = varSttHthi;
			
			item.TrangThai = varTrangThai;
			
			item.MoTa = varMoTa;
			
			item.MaDuongdung = varMaDuongdung;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(short varIdHoatchat,string varMaHoatchat,string varTenHoatchat,short? varSttHthi,bool? varTrangThai,string varMoTa,string varMaDuongdung)
		{
			DmucHoatchat item = new DmucHoatchat();
			
				item.IdHoatchat = varIdHoatchat;
			
				item.MaHoatchat = varMaHoatchat;
			
				item.TenHoatchat = varTenHoatchat;
			
				item.SttHthi = varSttHthi;
			
				item.TrangThai = varTrangThai;
			
				item.MoTa = varMoTa;
			
				item.MaDuongdung = varMaDuongdung;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdHoatchatColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaHoatchatColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenHoatchatColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SttHthiColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MoTaColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn MaDuongdungColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdHoatchat = @"id_hoatchat";
			 public static string MaHoatchat = @"ma_hoatchat";
			 public static string TenHoatchat = @"ten_hoatchat";
			 public static string SttHthi = @"stt_hthi";
			 public static string TrangThai = @"trang_thai";
			 public static string MoTa = @"mo_ta";
			 public static string MaDuongdung = @"ma_duongdung";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
