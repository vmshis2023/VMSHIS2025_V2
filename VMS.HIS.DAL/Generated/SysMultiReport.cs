using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysMultiReport class.
	/// </summary>
    [Serializable]
	public partial class SysMultiReportCollection : ActiveList<SysMultiReport, SysMultiReportCollection>
	{	   
		public SysMultiReportCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysMultiReportCollection</returns>
		public SysMultiReportCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysMultiReport o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the sys_multi_report table.
	/// </summary>
	[Serializable]
	public partial class SysMultiReport : ActiveRecord<SysMultiReport>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SysMultiReport()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysMultiReport(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysMultiReport(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysMultiReport(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("sys_multi_report", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMultiReportId = new TableSchema.TableColumn(schema);
				colvarMultiReportId.ColumnName = "MultiReport_ID";
				colvarMultiReportId.DataType = DbType.Int16;
				colvarMultiReportId.MaxLength = 0;
				colvarMultiReportId.AutoIncrement = true;
				colvarMultiReportId.IsNullable = false;
				colvarMultiReportId.IsPrimaryKey = true;
				colvarMultiReportId.IsForeignKey = false;
				colvarMultiReportId.IsReadOnly = false;
				colvarMultiReportId.DefaultSetting = @"";
				colvarMultiReportId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportId);
				
				TableSchema.TableColumn colvarMultiReportName = new TableSchema.TableColumn(schema);
				colvarMultiReportName.ColumnName = "MultiReport_Name";
				colvarMultiReportName.DataType = DbType.String;
				colvarMultiReportName.MaxLength = 200;
				colvarMultiReportName.AutoIncrement = false;
				colvarMultiReportName.IsNullable = true;
				colvarMultiReportName.IsPrimaryKey = false;
				colvarMultiReportName.IsForeignKey = false;
				colvarMultiReportName.IsReadOnly = false;
				colvarMultiReportName.DefaultSetting = @"";
				colvarMultiReportName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportName);
				
				TableSchema.TableColumn colvarMultiReportType = new TableSchema.TableColumn(schema);
				colvarMultiReportType.ColumnName = "MultiReport_Type";
				colvarMultiReportType.DataType = DbType.String;
				colvarMultiReportType.MaxLength = 50;
				colvarMultiReportType.AutoIncrement = false;
				colvarMultiReportType.IsNullable = true;
				colvarMultiReportType.IsPrimaryKey = false;
				colvarMultiReportType.IsForeignKey = false;
				colvarMultiReportType.IsReadOnly = false;
				colvarMultiReportType.DefaultSetting = @"";
				colvarMultiReportType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportType);
				
				TableSchema.TableColumn colvarMultiReportQueryType = new TableSchema.TableColumn(schema);
				colvarMultiReportQueryType.ColumnName = "MultiReport_Query_Type";
				colvarMultiReportQueryType.DataType = DbType.AnsiString;
				colvarMultiReportQueryType.MaxLength = 50;
				colvarMultiReportQueryType.AutoIncrement = false;
				colvarMultiReportQueryType.IsNullable = true;
				colvarMultiReportQueryType.IsPrimaryKey = false;
				colvarMultiReportQueryType.IsForeignKey = false;
				colvarMultiReportQueryType.IsReadOnly = false;
				colvarMultiReportQueryType.DefaultSetting = @"";
				colvarMultiReportQueryType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportQueryType);
				
				TableSchema.TableColumn colvarMultiReportQueryString = new TableSchema.TableColumn(schema);
				colvarMultiReportQueryString.ColumnName = "MultiReport_Query_String";
				colvarMultiReportQueryString.DataType = DbType.String;
				colvarMultiReportQueryString.MaxLength = -1;
				colvarMultiReportQueryString.AutoIncrement = false;
				colvarMultiReportQueryString.IsNullable = true;
				colvarMultiReportQueryString.IsPrimaryKey = false;
				colvarMultiReportQueryString.IsForeignKey = false;
				colvarMultiReportQueryString.IsReadOnly = false;
				colvarMultiReportQueryString.DefaultSetting = @"";
				colvarMultiReportQueryString.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportQueryString);
				
				TableSchema.TableColumn colvarMultiReportSequence = new TableSchema.TableColumn(schema);
				colvarMultiReportSequence.ColumnName = "MultiReport_Sequence";
				colvarMultiReportSequence.DataType = DbType.Int16;
				colvarMultiReportSequence.MaxLength = 0;
				colvarMultiReportSequence.AutoIncrement = false;
				colvarMultiReportSequence.IsNullable = true;
				colvarMultiReportSequence.IsPrimaryKey = false;
				colvarMultiReportSequence.IsForeignKey = false;
				colvarMultiReportSequence.IsReadOnly = false;
				colvarMultiReportSequence.DefaultSetting = @"";
				colvarMultiReportSequence.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportSequence);
				
				TableSchema.TableColumn colvarMultiReportIsAdmin = new TableSchema.TableColumn(schema);
				colvarMultiReportIsAdmin.ColumnName = "MultiReport_IsAdmin";
				colvarMultiReportIsAdmin.DataType = DbType.Byte;
				colvarMultiReportIsAdmin.MaxLength = 0;
				colvarMultiReportIsAdmin.AutoIncrement = false;
				colvarMultiReportIsAdmin.IsNullable = true;
				colvarMultiReportIsAdmin.IsPrimaryKey = false;
				colvarMultiReportIsAdmin.IsForeignKey = false;
				colvarMultiReportIsAdmin.IsReadOnly = false;
				colvarMultiReportIsAdmin.DefaultSetting = @"";
				colvarMultiReportIsAdmin.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportIsAdmin);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "trang_thai";
				colvarTrangThai.DataType = DbType.Boolean;
				colvarTrangThai.MaxLength = 0;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = true;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				
						colvarTrangThai.DefaultSetting = @"((1))";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				TableSchema.TableColumn colvarMotaThem = new TableSchema.TableColumn(schema);
				colvarMotaThem.ColumnName = "mota_them";
				colvarMotaThem.DataType = DbType.String;
				colvarMotaThem.MaxLength = 255;
				colvarMotaThem.AutoIncrement = false;
				colvarMotaThem.IsNullable = true;
				colvarMotaThem.IsPrimaryKey = false;
				colvarMotaThem.IsForeignKey = false;
				colvarMotaThem.IsReadOnly = false;
				colvarMotaThem.DefaultSetting = @"";
				colvarMotaThem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMotaThem);
				
				TableSchema.TableColumn colvarIsDynamic = new TableSchema.TableColumn(schema);
				colvarIsDynamic.ColumnName = "isDynamic";
				colvarIsDynamic.DataType = DbType.Byte;
				colvarIsDynamic.MaxLength = 0;
				colvarIsDynamic.AutoIncrement = false;
				colvarIsDynamic.IsNullable = true;
				colvarIsDynamic.IsPrimaryKey = false;
				colvarIsDynamic.IsForeignKey = false;
				colvarIsDynamic.IsReadOnly = false;
				colvarIsDynamic.DefaultSetting = @"";
				colvarIsDynamic.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDynamic);
				
				TableSchema.TableColumn colvarReportCode = new TableSchema.TableColumn(schema);
				colvarReportCode.ColumnName = "Report_Code";
				colvarReportCode.DataType = DbType.String;
				colvarReportCode.MaxLength = 100;
				colvarReportCode.AutoIncrement = false;
				colvarReportCode.IsNullable = true;
				colvarReportCode.IsPrimaryKey = false;
				colvarReportCode.IsForeignKey = false;
				colvarReportCode.IsReadOnly = false;
				colvarReportCode.DefaultSetting = @"";
				colvarReportCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportCode);
				
				TableSchema.TableColumn colvarGroupBy = new TableSchema.TableColumn(schema);
				colvarGroupBy.ColumnName = "group_by";
				colvarGroupBy.DataType = DbType.String;
				colvarGroupBy.MaxLength = 255;
				colvarGroupBy.AutoIncrement = false;
				colvarGroupBy.IsNullable = true;
				colvarGroupBy.IsPrimaryKey = false;
				colvarGroupBy.IsForeignKey = false;
				colvarGroupBy.IsReadOnly = false;
				colvarGroupBy.DefaultSetting = @"";
				colvarGroupBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGroupBy);
				
				TableSchema.TableColumn colvarExcelTemplateFile = new TableSchema.TableColumn(schema);
				colvarExcelTemplateFile.ColumnName = "Excel_TemplateFile";
				colvarExcelTemplateFile.DataType = DbType.String;
				colvarExcelTemplateFile.MaxLength = 255;
				colvarExcelTemplateFile.AutoIncrement = false;
				colvarExcelTemplateFile.IsNullable = true;
				colvarExcelTemplateFile.IsPrimaryKey = false;
				colvarExcelTemplateFile.IsForeignKey = false;
				colvarExcelTemplateFile.IsReadOnly = false;
				colvarExcelTemplateFile.DefaultSetting = @"";
				colvarExcelTemplateFile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExcelTemplateFile);
				
				TableSchema.TableColumn colvarExcelStartLine = new TableSchema.TableColumn(schema);
				colvarExcelStartLine.ColumnName = "Excel_StartLine";
				colvarExcelStartLine.DataType = DbType.Byte;
				colvarExcelStartLine.MaxLength = 0;
				colvarExcelStartLine.AutoIncrement = false;
				colvarExcelStartLine.IsNullable = true;
				colvarExcelStartLine.IsPrimaryKey = false;
				colvarExcelStartLine.IsForeignKey = false;
				colvarExcelStartLine.IsReadOnly = false;
				colvarExcelStartLine.DefaultSetting = @"";
				colvarExcelStartLine.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExcelStartLine);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("sys_multi_report",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MultiReportId")]
		[Bindable(true)]
		public short MultiReportId 
		{
			get { return GetColumnValue<short>(Columns.MultiReportId); }
			set { SetColumnValue(Columns.MultiReportId, value); }
		}
		  
		[XmlAttribute("MultiReportName")]
		[Bindable(true)]
		public string MultiReportName 
		{
			get { return GetColumnValue<string>(Columns.MultiReportName); }
			set { SetColumnValue(Columns.MultiReportName, value); }
		}
		  
		[XmlAttribute("MultiReportType")]
		[Bindable(true)]
		public string MultiReportType 
		{
			get { return GetColumnValue<string>(Columns.MultiReportType); }
			set { SetColumnValue(Columns.MultiReportType, value); }
		}
		  
		[XmlAttribute("MultiReportQueryType")]
		[Bindable(true)]
		public string MultiReportQueryType 
		{
			get { return GetColumnValue<string>(Columns.MultiReportQueryType); }
			set { SetColumnValue(Columns.MultiReportQueryType, value); }
		}
		  
		[XmlAttribute("MultiReportQueryString")]
		[Bindable(true)]
		public string MultiReportQueryString 
		{
			get { return GetColumnValue<string>(Columns.MultiReportQueryString); }
			set { SetColumnValue(Columns.MultiReportQueryString, value); }
		}
		  
		[XmlAttribute("MultiReportSequence")]
		[Bindable(true)]
		public short? MultiReportSequence 
		{
			get { return GetColumnValue<short?>(Columns.MultiReportSequence); }
			set { SetColumnValue(Columns.MultiReportSequence, value); }
		}
		  
		[XmlAttribute("MultiReportIsAdmin")]
		[Bindable(true)]
		public byte? MultiReportIsAdmin 
		{
			get { return GetColumnValue<byte?>(Columns.MultiReportIsAdmin); }
			set { SetColumnValue(Columns.MultiReportIsAdmin, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public bool? TrangThai 
		{
			get { return GetColumnValue<bool?>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		  
		[XmlAttribute("MotaThem")]
		[Bindable(true)]
		public string MotaThem 
		{
			get { return GetColumnValue<string>(Columns.MotaThem); }
			set { SetColumnValue(Columns.MotaThem, value); }
		}
		  
		[XmlAttribute("IsDynamic")]
		[Bindable(true)]
		public byte? IsDynamic 
		{
			get { return GetColumnValue<byte?>(Columns.IsDynamic); }
			set { SetColumnValue(Columns.IsDynamic, value); }
		}
		  
		[XmlAttribute("ReportCode")]
		[Bindable(true)]
		public string ReportCode 
		{
			get { return GetColumnValue<string>(Columns.ReportCode); }
			set { SetColumnValue(Columns.ReportCode, value); }
		}
		  
		[XmlAttribute("GroupBy")]
		[Bindable(true)]
		public string GroupBy 
		{
			get { return GetColumnValue<string>(Columns.GroupBy); }
			set { SetColumnValue(Columns.GroupBy, value); }
		}
		  
		[XmlAttribute("ExcelTemplateFile")]
		[Bindable(true)]
		public string ExcelTemplateFile 
		{
			get { return GetColumnValue<string>(Columns.ExcelTemplateFile); }
			set { SetColumnValue(Columns.ExcelTemplateFile, value); }
		}
		  
		[XmlAttribute("ExcelStartLine")]
		[Bindable(true)]
		public byte? ExcelStartLine 
		{
			get { return GetColumnValue<byte?>(Columns.ExcelStartLine); }
			set { SetColumnValue(Columns.ExcelStartLine, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMultiReportName,string varMultiReportType,string varMultiReportQueryType,string varMultiReportQueryString,short? varMultiReportSequence,byte? varMultiReportIsAdmin,bool? varTrangThai,string varMotaThem,byte? varIsDynamic,string varReportCode,string varGroupBy,string varExcelTemplateFile,byte? varExcelStartLine)
		{
			SysMultiReport item = new SysMultiReport();
			
			item.MultiReportName = varMultiReportName;
			
			item.MultiReportType = varMultiReportType;
			
			item.MultiReportQueryType = varMultiReportQueryType;
			
			item.MultiReportQueryString = varMultiReportQueryString;
			
			item.MultiReportSequence = varMultiReportSequence;
			
			item.MultiReportIsAdmin = varMultiReportIsAdmin;
			
			item.TrangThai = varTrangThai;
			
			item.MotaThem = varMotaThem;
			
			item.IsDynamic = varIsDynamic;
			
			item.ReportCode = varReportCode;
			
			item.GroupBy = varGroupBy;
			
			item.ExcelTemplateFile = varExcelTemplateFile;
			
			item.ExcelStartLine = varExcelStartLine;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(short varMultiReportId,string varMultiReportName,string varMultiReportType,string varMultiReportQueryType,string varMultiReportQueryString,short? varMultiReportSequence,byte? varMultiReportIsAdmin,bool? varTrangThai,string varMotaThem,byte? varIsDynamic,string varReportCode,string varGroupBy,string varExcelTemplateFile,byte? varExcelStartLine)
		{
			SysMultiReport item = new SysMultiReport();
			
				item.MultiReportId = varMultiReportId;
			
				item.MultiReportName = varMultiReportName;
			
				item.MultiReportType = varMultiReportType;
			
				item.MultiReportQueryType = varMultiReportQueryType;
			
				item.MultiReportQueryString = varMultiReportQueryString;
			
				item.MultiReportSequence = varMultiReportSequence;
			
				item.MultiReportIsAdmin = varMultiReportIsAdmin;
			
				item.TrangThai = varTrangThai;
			
				item.MotaThem = varMotaThem;
			
				item.IsDynamic = varIsDynamic;
			
				item.ReportCode = varReportCode;
			
				item.GroupBy = varGroupBy;
			
				item.ExcelTemplateFile = varExcelTemplateFile;
			
				item.ExcelStartLine = varExcelStartLine;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MultiReportIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiReportNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiReportTypeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiReportQueryTypeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiReportQueryStringColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiReportSequenceColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiReportIsAdminColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn MotaThemColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn IsDynamicColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ReportCodeColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn GroupByColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ExcelTemplateFileColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ExcelStartLineColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MultiReportId = @"MultiReport_ID";
			 public static string MultiReportName = @"MultiReport_Name";
			 public static string MultiReportType = @"MultiReport_Type";
			 public static string MultiReportQueryType = @"MultiReport_Query_Type";
			 public static string MultiReportQueryString = @"MultiReport_Query_String";
			 public static string MultiReportSequence = @"MultiReport_Sequence";
			 public static string MultiReportIsAdmin = @"MultiReport_IsAdmin";
			 public static string TrangThai = @"trang_thai";
			 public static string MotaThem = @"mota_them";
			 public static string IsDynamic = @"isDynamic";
			 public static string ReportCode = @"Report_Code";
			 public static string GroupBy = @"group_by";
			 public static string ExcelTemplateFile = @"Excel_TemplateFile";
			 public static string ExcelStartLine = @"Excel_StartLine";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
