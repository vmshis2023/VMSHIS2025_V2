using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the EmrDocument class.
	/// </summary>
    [Serializable]
	public partial class EmrDocumentCollection : ActiveList<EmrDocument, EmrDocumentCollection>
	{	   
		public EmrDocumentCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>EmrDocumentCollection</returns>
		public EmrDocumentCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                EmrDocument o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the emr_documents table.
	/// </summary>
	[Serializable]
	public partial class EmrDocument : ActiveRecord<EmrDocument>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public EmrDocument()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public EmrDocument(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public EmrDocument(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public EmrDocument(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("emr_documents", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdFile = new TableSchema.TableColumn(schema);
				colvarIdFile.ColumnName = "id_file";
				colvarIdFile.DataType = DbType.Int64;
				colvarIdFile.MaxLength = 0;
				colvarIdFile.AutoIncrement = true;
				colvarIdFile.IsNullable = false;
				colvarIdFile.IsPrimaryKey = true;
				colvarIdFile.IsForeignKey = false;
				colvarIdFile.IsReadOnly = false;
				colvarIdFile.DefaultSetting = @"";
				colvarIdFile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdFile);
				
				TableSchema.TableColumn colvarFileData = new TableSchema.TableColumn(schema);
				colvarFileData.ColumnName = "file_data";
				colvarFileData.DataType = DbType.Binary;
				colvarFileData.MaxLength = 2147483647;
				colvarFileData.AutoIncrement = false;
				colvarFileData.IsNullable = true;
				colvarFileData.IsPrimaryKey = false;
				colvarFileData.IsForeignKey = false;
				colvarFileData.IsReadOnly = false;
				colvarFileData.DefaultSetting = @"";
				colvarFileData.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileData);
				
				TableSchema.TableColumn colvarFilePath = new TableSchema.TableColumn(schema);
				colvarFilePath.ColumnName = "file_path";
				colvarFilePath.DataType = DbType.String;
				colvarFilePath.MaxLength = 500;
				colvarFilePath.AutoIncrement = false;
				colvarFilePath.IsNullable = true;
				colvarFilePath.IsPrimaryKey = false;
				colvarFilePath.IsForeignKey = false;
				colvarFilePath.IsReadOnly = false;
				colvarFilePath.DefaultSetting = @"";
				colvarFilePath.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFilePath);
				
				TableSchema.TableColumn colvarFileName = new TableSchema.TableColumn(schema);
				colvarFileName.ColumnName = "file_name";
				colvarFileName.DataType = DbType.String;
				colvarFileName.MaxLength = 100;
				colvarFileName.AutoIncrement = false;
				colvarFileName.IsNullable = true;
				colvarFileName.IsPrimaryKey = false;
				colvarFileName.IsForeignKey = false;
				colvarFileName.IsReadOnly = false;
				colvarFileName.DefaultSetting = @"";
				colvarFileName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileName);
				
				TableSchema.TableColumn colvarIdBenhnhan = new TableSchema.TableColumn(schema);
				colvarIdBenhnhan.ColumnName = "id_benhnhan";
				colvarIdBenhnhan.DataType = DbType.Int64;
				colvarIdBenhnhan.MaxLength = 0;
				colvarIdBenhnhan.AutoIncrement = false;
				colvarIdBenhnhan.IsNullable = false;
				colvarIdBenhnhan.IsPrimaryKey = false;
				colvarIdBenhnhan.IsForeignKey = false;
				colvarIdBenhnhan.IsReadOnly = false;
				colvarIdBenhnhan.DefaultSetting = @"";
				colvarIdBenhnhan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdBenhnhan);
				
				TableSchema.TableColumn colvarMaLuotkham = new TableSchema.TableColumn(schema);
				colvarMaLuotkham.ColumnName = "ma_luotkham";
				colvarMaLuotkham.DataType = DbType.String;
				colvarMaLuotkham.MaxLength = 15;
				colvarMaLuotkham.AutoIncrement = false;
				colvarMaLuotkham.IsNullable = false;
				colvarMaLuotkham.IsPrimaryKey = false;
				colvarMaLuotkham.IsForeignKey = false;
				colvarMaLuotkham.IsReadOnly = false;
				colvarMaLuotkham.DefaultSetting = @"";
				colvarMaLuotkham.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaLuotkham);
				
				TableSchema.TableColumn colvarNgayPhieu = new TableSchema.TableColumn(schema);
				colvarNgayPhieu.ColumnName = "ngay_phieu";
				colvarNgayPhieu.DataType = DbType.DateTime;
				colvarNgayPhieu.MaxLength = 0;
				colvarNgayPhieu.AutoIncrement = false;
				colvarNgayPhieu.IsNullable = false;
				colvarNgayPhieu.IsPrimaryKey = false;
				colvarNgayPhieu.IsForeignKey = false;
				colvarNgayPhieu.IsReadOnly = false;
				colvarNgayPhieu.DefaultSetting = @"";
				colvarNgayPhieu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayPhieu);
				
				TableSchema.TableColumn colvarIdPhieu = new TableSchema.TableColumn(schema);
				colvarIdPhieu.ColumnName = "id_phieu";
				colvarIdPhieu.DataType = DbType.Int64;
				colvarIdPhieu.MaxLength = 0;
				colvarIdPhieu.AutoIncrement = false;
				colvarIdPhieu.IsNullable = false;
				colvarIdPhieu.IsPrimaryKey = false;
				colvarIdPhieu.IsForeignKey = false;
				colvarIdPhieu.IsReadOnly = false;
				
						colvarIdPhieu.DefaultSetting = @"((0))";
				colvarIdPhieu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhieu);
				
				TableSchema.TableColumn colvarLoaiPhieuHis = new TableSchema.TableColumn(schema);
				colvarLoaiPhieuHis.ColumnName = "loai_phieu_his";
				colvarLoaiPhieuHis.DataType = DbType.String;
				colvarLoaiPhieuHis.MaxLength = 50;
				colvarLoaiPhieuHis.AutoIncrement = false;
				colvarLoaiPhieuHis.IsNullable = false;
				colvarLoaiPhieuHis.IsPrimaryKey = false;
				colvarLoaiPhieuHis.IsForeignKey = false;
				colvarLoaiPhieuHis.IsReadOnly = false;
				
						colvarLoaiPhieuHis.DefaultSetting = @"((0))";
				colvarLoaiPhieuHis.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoaiPhieuHis);
				
				TableSchema.TableColumn colvarMaGayEmr = new TableSchema.TableColumn(schema);
				colvarMaGayEmr.ColumnName = "ma_gay_emr";
				colvarMaGayEmr.DataType = DbType.String;
				colvarMaGayEmr.MaxLength = 50;
				colvarMaGayEmr.AutoIncrement = false;
				colvarMaGayEmr.IsNullable = true;
				colvarMaGayEmr.IsPrimaryKey = false;
				colvarMaGayEmr.IsForeignKey = false;
				colvarMaGayEmr.IsReadOnly = false;
				colvarMaGayEmr.DefaultSetting = @"";
				colvarMaGayEmr.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaGayEmr);
				
				TableSchema.TableColumn colvarMaPhieuEmr = new TableSchema.TableColumn(schema);
				colvarMaPhieuEmr.ColumnName = "ma_phieu_emr";
				colvarMaPhieuEmr.DataType = DbType.String;
				colvarMaPhieuEmr.MaxLength = 30;
				colvarMaPhieuEmr.AutoIncrement = false;
				colvarMaPhieuEmr.IsNullable = true;
				colvarMaPhieuEmr.IsPrimaryKey = false;
				colvarMaPhieuEmr.IsForeignKey = false;
				colvarMaPhieuEmr.IsReadOnly = false;
				colvarMaPhieuEmr.DefaultSetting = @"";
				colvarMaPhieuEmr.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaPhieuEmr);
				
				TableSchema.TableColumn colvarReportCode = new TableSchema.TableColumn(schema);
				colvarReportCode.ColumnName = "report_code";
				colvarReportCode.DataType = DbType.String;
				colvarReportCode.MaxLength = 255;
				colvarReportCode.AutoIncrement = false;
				colvarReportCode.IsNullable = true;
				colvarReportCode.IsPrimaryKey = false;
				colvarReportCode.IsForeignKey = false;
				colvarReportCode.IsReadOnly = false;
				colvarReportCode.DefaultSetting = @"";
				colvarReportCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportCode);
				
				TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
				colvarTitle.ColumnName = "title";
				colvarTitle.DataType = DbType.String;
				colvarTitle.MaxLength = 255;
				colvarTitle.AutoIncrement = false;
				colvarTitle.IsNullable = true;
				colvarTitle.IsPrimaryKey = false;
				colvarTitle.IsForeignKey = false;
				colvarTitle.IsReadOnly = false;
				colvarTitle.DefaultSetting = @"";
				colvarTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitle);
				
				TableSchema.TableColumn colvarExt = new TableSchema.TableColumn(schema);
				colvarExt.ColumnName = "ext";
				colvarExt.DataType = DbType.String;
				colvarExt.MaxLength = 5;
				colvarExt.AutoIncrement = false;
				colvarExt.IsNullable = true;
				colvarExt.IsPrimaryKey = false;
				colvarExt.IsForeignKey = false;
				colvarExt.IsReadOnly = false;
				colvarExt.DefaultSetting = @"";
				colvarExt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExt);
				
				TableSchema.TableColumn colvarTthaiDuyet = new TableSchema.TableColumn(schema);
				colvarTthaiDuyet.ColumnName = "tthai_duyet";
				colvarTthaiDuyet.DataType = DbType.Byte;
				colvarTthaiDuyet.MaxLength = 0;
				colvarTthaiDuyet.AutoIncrement = false;
				colvarTthaiDuyet.IsNullable = true;
				colvarTthaiDuyet.IsPrimaryKey = false;
				colvarTthaiDuyet.IsForeignKey = false;
				colvarTthaiDuyet.IsReadOnly = false;
				
						colvarTthaiDuyet.DefaultSetting = @"((0))";
				colvarTthaiDuyet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTthaiDuyet);
				
				TableSchema.TableColumn colvarTthaiHuy = new TableSchema.TableColumn(schema);
				colvarTthaiHuy.ColumnName = "tthai_huy";
				colvarTthaiHuy.DataType = DbType.Boolean;
				colvarTthaiHuy.MaxLength = 0;
				colvarTthaiHuy.AutoIncrement = false;
				colvarTthaiHuy.IsNullable = true;
				colvarTthaiHuy.IsPrimaryKey = false;
				colvarTthaiHuy.IsForeignKey = false;
				colvarTthaiHuy.IsReadOnly = false;
				colvarTthaiHuy.DefaultSetting = @"";
				colvarTthaiHuy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTthaiHuy);
				
				TableSchema.TableColumn colvarTthaiAn = new TableSchema.TableColumn(schema);
				colvarTthaiAn.ColumnName = "tthai_an";
				colvarTthaiAn.DataType = DbType.Boolean;
				colvarTthaiAn.MaxLength = 0;
				colvarTthaiAn.AutoIncrement = false;
				colvarTthaiAn.IsNullable = true;
				colvarTthaiAn.IsPrimaryKey = false;
				colvarTthaiAn.IsForeignKey = false;
				colvarTthaiAn.IsReadOnly = false;
				colvarTthaiAn.DefaultSetting = @"";
				colvarTthaiAn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTthaiAn);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "nguoi_tao";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 30;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "ngay_tao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNguonTao = new TableSchema.TableColumn(schema);
				colvarNguonTao.ColumnName = "nguon_tao";
				colvarNguonTao.DataType = DbType.Byte;
				colvarNguonTao.MaxLength = 0;
				colvarNguonTao.AutoIncrement = false;
				colvarNguonTao.IsNullable = true;
				colvarNguonTao.IsPrimaryKey = false;
				colvarNguonTao.IsForeignKey = false;
				colvarNguonTao.IsReadOnly = false;
				
						colvarNguonTao.DefaultSetting = @"((0))";
				colvarNguonTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguonTao);
				
				TableSchema.TableColumn colvarIdKhoa = new TableSchema.TableColumn(schema);
				colvarIdKhoa.ColumnName = "id_khoa";
				colvarIdKhoa.DataType = DbType.Int16;
				colvarIdKhoa.MaxLength = 0;
				colvarIdKhoa.AutoIncrement = false;
				colvarIdKhoa.IsNullable = true;
				colvarIdKhoa.IsPrimaryKey = false;
				colvarIdKhoa.IsForeignKey = false;
				colvarIdKhoa.IsReadOnly = false;
				colvarIdKhoa.DefaultSetting = @"";
				colvarIdKhoa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdKhoa);
				
				TableSchema.TableColumn colvarTenKhoa = new TableSchema.TableColumn(schema);
				colvarTenKhoa.ColumnName = "ten_khoa";
				colvarTenKhoa.DataType = DbType.String;
				colvarTenKhoa.MaxLength = 255;
				colvarTenKhoa.AutoIncrement = false;
				colvarTenKhoa.IsNullable = true;
				colvarTenKhoa.IsPrimaryKey = false;
				colvarTenKhoa.IsForeignKey = false;
				colvarTenKhoa.IsReadOnly = false;
				colvarTenKhoa.DefaultSetting = @"";
				colvarTenKhoa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenKhoa);
				
				TableSchema.TableColumn colvarIdPhong = new TableSchema.TableColumn(schema);
				colvarIdPhong.ColumnName = "id_phong";
				colvarIdPhong.DataType = DbType.Int16;
				colvarIdPhong.MaxLength = 0;
				colvarIdPhong.AutoIncrement = false;
				colvarIdPhong.IsNullable = true;
				colvarIdPhong.IsPrimaryKey = false;
				colvarIdPhong.IsForeignKey = false;
				colvarIdPhong.IsReadOnly = false;
				colvarIdPhong.DefaultSetting = @"";
				colvarIdPhong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhong);
				
				TableSchema.TableColumn colvarTenPhong = new TableSchema.TableColumn(schema);
				colvarTenPhong.ColumnName = "ten_phong";
				colvarTenPhong.DataType = DbType.String;
				colvarTenPhong.MaxLength = 255;
				colvarTenPhong.AutoIncrement = false;
				colvarTenPhong.IsNullable = true;
				colvarTenPhong.IsPrimaryKey = false;
				colvarTenPhong.IsForeignKey = false;
				colvarTenPhong.IsReadOnly = false;
				colvarTenPhong.DefaultSetting = @"";
				colvarTenPhong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenPhong);
				
				TableSchema.TableColumn colvarNoitru = new TableSchema.TableColumn(schema);
				colvarNoitru.ColumnName = "noitru";
				colvarNoitru.DataType = DbType.Boolean;
				colvarNoitru.MaxLength = 0;
				colvarNoitru.AutoIncrement = false;
				colvarNoitru.IsNullable = true;
				colvarNoitru.IsPrimaryKey = false;
				colvarNoitru.IsForeignKey = false;
				colvarNoitru.IsReadOnly = false;
				colvarNoitru.DefaultSetting = @"";
				colvarNoitru.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoitru);
				
				TableSchema.TableColumn colvarMotaThem = new TableSchema.TableColumn(schema);
				colvarMotaThem.ColumnName = "mota_them";
				colvarMotaThem.DataType = DbType.String;
				colvarMotaThem.MaxLength = 255;
				colvarMotaThem.AutoIncrement = false;
				colvarMotaThem.IsNullable = true;
				colvarMotaThem.IsPrimaryKey = false;
				colvarMotaThem.IsForeignKey = false;
				colvarMotaThem.IsReadOnly = false;
				colvarMotaThem.DefaultSetting = @"";
				colvarMotaThem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMotaThem);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("emr_documents",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdFile")]
		[Bindable(true)]
		public long IdFile 
		{
			get { return GetColumnValue<long>(Columns.IdFile); }
			set { SetColumnValue(Columns.IdFile, value); }
		}
		  
		[XmlAttribute("FileData")]
		[Bindable(true)]
		public byte[] FileData 
		{
			get { return GetColumnValue<byte[]>(Columns.FileData); }
			set { SetColumnValue(Columns.FileData, value); }
		}
		  
		[XmlAttribute("FilePath")]
		[Bindable(true)]
		public string FilePath 
		{
			get { return GetColumnValue<string>(Columns.FilePath); }
			set { SetColumnValue(Columns.FilePath, value); }
		}
		  
		[XmlAttribute("FileName")]
		[Bindable(true)]
		public string FileName 
		{
			get { return GetColumnValue<string>(Columns.FileName); }
			set { SetColumnValue(Columns.FileName, value); }
		}
		  
		[XmlAttribute("IdBenhnhan")]
		[Bindable(true)]
		public long IdBenhnhan 
		{
			get { return GetColumnValue<long>(Columns.IdBenhnhan); }
			set { SetColumnValue(Columns.IdBenhnhan, value); }
		}
		  
		[XmlAttribute("MaLuotkham")]
		[Bindable(true)]
		public string MaLuotkham 
		{
			get { return GetColumnValue<string>(Columns.MaLuotkham); }
			set { SetColumnValue(Columns.MaLuotkham, value); }
		}
		  
		[XmlAttribute("NgayPhieu")]
		[Bindable(true)]
		public DateTime NgayPhieu 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayPhieu); }
			set { SetColumnValue(Columns.NgayPhieu, value); }
		}
		  
		[XmlAttribute("IdPhieu")]
		[Bindable(true)]
		public long IdPhieu 
		{
			get { return GetColumnValue<long>(Columns.IdPhieu); }
			set { SetColumnValue(Columns.IdPhieu, value); }
		}
		  
		[XmlAttribute("LoaiPhieuHis")]
		[Bindable(true)]
		public string LoaiPhieuHis 
		{
			get { return GetColumnValue<string>(Columns.LoaiPhieuHis); }
			set { SetColumnValue(Columns.LoaiPhieuHis, value); }
		}
		  
		[XmlAttribute("MaGayEmr")]
		[Bindable(true)]
		public string MaGayEmr 
		{
			get { return GetColumnValue<string>(Columns.MaGayEmr); }
			set { SetColumnValue(Columns.MaGayEmr, value); }
		}
		  
		[XmlAttribute("MaPhieuEmr")]
		[Bindable(true)]
		public string MaPhieuEmr 
		{
			get { return GetColumnValue<string>(Columns.MaPhieuEmr); }
			set { SetColumnValue(Columns.MaPhieuEmr, value); }
		}
		  
		[XmlAttribute("ReportCode")]
		[Bindable(true)]
		public string ReportCode 
		{
			get { return GetColumnValue<string>(Columns.ReportCode); }
			set { SetColumnValue(Columns.ReportCode, value); }
		}
		  
		[XmlAttribute("Title")]
		[Bindable(true)]
		public string Title 
		{
			get { return GetColumnValue<string>(Columns.Title); }
			set { SetColumnValue(Columns.Title, value); }
		}
		  
		[XmlAttribute("Ext")]
		[Bindable(true)]
		public string Ext 
		{
			get { return GetColumnValue<string>(Columns.Ext); }
			set { SetColumnValue(Columns.Ext, value); }
		}
		  
		[XmlAttribute("TthaiDuyet")]
		[Bindable(true)]
		public byte? TthaiDuyet 
		{
			get { return GetColumnValue<byte?>(Columns.TthaiDuyet); }
			set { SetColumnValue(Columns.TthaiDuyet, value); }
		}
		  
		[XmlAttribute("TthaiHuy")]
		[Bindable(true)]
		public bool? TthaiHuy 
		{
			get { return GetColumnValue<bool?>(Columns.TthaiHuy); }
			set { SetColumnValue(Columns.TthaiHuy, value); }
		}
		  
		[XmlAttribute("TthaiAn")]
		[Bindable(true)]
		public bool? TthaiAn 
		{
			get { return GetColumnValue<bool?>(Columns.TthaiAn); }
			set { SetColumnValue(Columns.TthaiAn, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NguonTao")]
		[Bindable(true)]
		public byte? NguonTao 
		{
			get { return GetColumnValue<byte?>(Columns.NguonTao); }
			set { SetColumnValue(Columns.NguonTao, value); }
		}
		  
		[XmlAttribute("IdKhoa")]
		[Bindable(true)]
		public short? IdKhoa 
		{
			get { return GetColumnValue<short?>(Columns.IdKhoa); }
			set { SetColumnValue(Columns.IdKhoa, value); }
		}
		  
		[XmlAttribute("TenKhoa")]
		[Bindable(true)]
		public string TenKhoa 
		{
			get { return GetColumnValue<string>(Columns.TenKhoa); }
			set { SetColumnValue(Columns.TenKhoa, value); }
		}
		  
		[XmlAttribute("IdPhong")]
		[Bindable(true)]
		public short? IdPhong 
		{
			get { return GetColumnValue<short?>(Columns.IdPhong); }
			set { SetColumnValue(Columns.IdPhong, value); }
		}
		  
		[XmlAttribute("TenPhong")]
		[Bindable(true)]
		public string TenPhong 
		{
			get { return GetColumnValue<string>(Columns.TenPhong); }
			set { SetColumnValue(Columns.TenPhong, value); }
		}
		  
		[XmlAttribute("Noitru")]
		[Bindable(true)]
		public bool? Noitru 
		{
			get { return GetColumnValue<bool?>(Columns.Noitru); }
			set { SetColumnValue(Columns.Noitru, value); }
		}
		  
		[XmlAttribute("MotaThem")]
		[Bindable(true)]
		public string MotaThem 
		{
			get { return GetColumnValue<string>(Columns.MotaThem); }
			set { SetColumnValue(Columns.MotaThem, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(byte[] varFileData,string varFilePath,string varFileName,long varIdBenhnhan,string varMaLuotkham,DateTime varNgayPhieu,long varIdPhieu,string varLoaiPhieuHis,string varMaGayEmr,string varMaPhieuEmr,string varReportCode,string varTitle,string varExt,byte? varTthaiDuyet,bool? varTthaiHuy,bool? varTthaiAn,string varNguoiTao,DateTime? varNgayTao,byte? varNguonTao,short? varIdKhoa,string varTenKhoa,short? varIdPhong,string varTenPhong,bool? varNoitru,string varMotaThem)
		{
			EmrDocument item = new EmrDocument();
			
			item.FileData = varFileData;
			
			item.FilePath = varFilePath;
			
			item.FileName = varFileName;
			
			item.IdBenhnhan = varIdBenhnhan;
			
			item.MaLuotkham = varMaLuotkham;
			
			item.NgayPhieu = varNgayPhieu;
			
			item.IdPhieu = varIdPhieu;
			
			item.LoaiPhieuHis = varLoaiPhieuHis;
			
			item.MaGayEmr = varMaGayEmr;
			
			item.MaPhieuEmr = varMaPhieuEmr;
			
			item.ReportCode = varReportCode;
			
			item.Title = varTitle;
			
			item.Ext = varExt;
			
			item.TthaiDuyet = varTthaiDuyet;
			
			item.TthaiHuy = varTthaiHuy;
			
			item.TthaiAn = varTthaiAn;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayTao = varNgayTao;
			
			item.NguonTao = varNguonTao;
			
			item.IdKhoa = varIdKhoa;
			
			item.TenKhoa = varTenKhoa;
			
			item.IdPhong = varIdPhong;
			
			item.TenPhong = varTenPhong;
			
			item.Noitru = varNoitru;
			
			item.MotaThem = varMotaThem;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varIdFile,byte[] varFileData,string varFilePath,string varFileName,long varIdBenhnhan,string varMaLuotkham,DateTime varNgayPhieu,long varIdPhieu,string varLoaiPhieuHis,string varMaGayEmr,string varMaPhieuEmr,string varReportCode,string varTitle,string varExt,byte? varTthaiDuyet,bool? varTthaiHuy,bool? varTthaiAn,string varNguoiTao,DateTime? varNgayTao,byte? varNguonTao,short? varIdKhoa,string varTenKhoa,short? varIdPhong,string varTenPhong,bool? varNoitru,string varMotaThem)
		{
			EmrDocument item = new EmrDocument();
			
				item.IdFile = varIdFile;
			
				item.FileData = varFileData;
			
				item.FilePath = varFilePath;
			
				item.FileName = varFileName;
			
				item.IdBenhnhan = varIdBenhnhan;
			
				item.MaLuotkham = varMaLuotkham;
			
				item.NgayPhieu = varNgayPhieu;
			
				item.IdPhieu = varIdPhieu;
			
				item.LoaiPhieuHis = varLoaiPhieuHis;
			
				item.MaGayEmr = varMaGayEmr;
			
				item.MaPhieuEmr = varMaPhieuEmr;
			
				item.ReportCode = varReportCode;
			
				item.Title = varTitle;
			
				item.Ext = varExt;
			
				item.TthaiDuyet = varTthaiDuyet;
			
				item.TthaiHuy = varTthaiHuy;
			
				item.TthaiAn = varTthaiAn;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayTao = varNgayTao;
			
				item.NguonTao = varNguonTao;
			
				item.IdKhoa = varIdKhoa;
			
				item.TenKhoa = varTenKhoa;
			
				item.IdPhong = varIdPhong;
			
				item.TenPhong = varTenPhong;
			
				item.Noitru = varNoitru;
			
				item.MotaThem = varMotaThem;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdFileColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FileDataColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FilePathColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FileNameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IdBenhnhanColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MaLuotkhamColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayPhieuColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IdPhieuColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn LoaiPhieuHisColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn MaGayEmrColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn MaPhieuEmrColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ReportCodeColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn TitleColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ExtColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn TthaiDuyetColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn TthaiHuyColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn TthaiAnColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn NguonTaoColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn IdKhoaColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn TenKhoaColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn IdPhongColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn TenPhongColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn NoitruColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn MotaThemColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdFile = @"id_file";
			 public static string FileData = @"file_data";
			 public static string FilePath = @"file_path";
			 public static string FileName = @"file_name";
			 public static string IdBenhnhan = @"id_benhnhan";
			 public static string MaLuotkham = @"ma_luotkham";
			 public static string NgayPhieu = @"ngay_phieu";
			 public static string IdPhieu = @"id_phieu";
			 public static string LoaiPhieuHis = @"loai_phieu_his";
			 public static string MaGayEmr = @"ma_gay_emr";
			 public static string MaPhieuEmr = @"ma_phieu_emr";
			 public static string ReportCode = @"report_code";
			 public static string Title = @"title";
			 public static string Ext = @"ext";
			 public static string TthaiDuyet = @"tthai_duyet";
			 public static string TthaiHuy = @"tthai_huy";
			 public static string TthaiAn = @"tthai_an";
			 public static string NguoiTao = @"nguoi_tao";
			 public static string NgayTao = @"ngay_tao";
			 public static string NguonTao = @"nguon_tao";
			 public static string IdKhoa = @"id_khoa";
			 public static string TenKhoa = @"ten_khoa";
			 public static string IdPhong = @"id_phong";
			 public static string TenPhong = @"ten_phong";
			 public static string Noitru = @"noitru";
			 public static string MotaThem = @"mota_them";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
