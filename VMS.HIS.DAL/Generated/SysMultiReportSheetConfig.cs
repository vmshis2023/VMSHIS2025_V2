using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysMultiReportSheetConfig class.
	/// </summary>
    [Serializable]
	public partial class SysMultiReportSheetConfigCollection : ActiveList<SysMultiReportSheetConfig, SysMultiReportSheetConfigCollection>
	{	   
		public SysMultiReportSheetConfigCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysMultiReportSheetConfigCollection</returns>
		public SysMultiReportSheetConfigCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysMultiReportSheetConfig o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the sys_multi_report_sheet_config table.
	/// </summary>
	[Serializable]
	public partial class SysMultiReportSheetConfig : ActiveRecord<SysMultiReportSheetConfig>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SysMultiReportSheetConfig()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysMultiReportSheetConfig(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysMultiReportSheetConfig(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysMultiReportSheetConfig(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("sys_multi_report_sheet_config", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMultiReportSheetConfigId = new TableSchema.TableColumn(schema);
				colvarMultiReportSheetConfigId.ColumnName = "MultiReport_Sheet_Config_ID";
				colvarMultiReportSheetConfigId.DataType = DbType.Int32;
				colvarMultiReportSheetConfigId.MaxLength = 0;
				colvarMultiReportSheetConfigId.AutoIncrement = true;
				colvarMultiReportSheetConfigId.IsNullable = false;
				colvarMultiReportSheetConfigId.IsPrimaryKey = true;
				colvarMultiReportSheetConfigId.IsForeignKey = false;
				colvarMultiReportSheetConfigId.IsReadOnly = false;
				colvarMultiReportSheetConfigId.DefaultSetting = @"";
				colvarMultiReportSheetConfigId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportSheetConfigId);
				
				TableSchema.TableColumn colvarMultiReportId = new TableSchema.TableColumn(schema);
				colvarMultiReportId.ColumnName = "MultiReport_ID";
				colvarMultiReportId.DataType = DbType.Int16;
				colvarMultiReportId.MaxLength = 0;
				colvarMultiReportId.AutoIncrement = false;
				colvarMultiReportId.IsNullable = false;
				colvarMultiReportId.IsPrimaryKey = false;
				colvarMultiReportId.IsForeignKey = false;
				colvarMultiReportId.IsReadOnly = false;
				colvarMultiReportId.DefaultSetting = @"";
				colvarMultiReportId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportId);
				
				TableSchema.TableColumn colvarMultiReportConfigTableIndex = new TableSchema.TableColumn(schema);
				colvarMultiReportConfigTableIndex.ColumnName = "MultiReport_Config_Table_Index";
				colvarMultiReportConfigTableIndex.DataType = DbType.Int16;
				colvarMultiReportConfigTableIndex.MaxLength = 0;
				colvarMultiReportConfigTableIndex.AutoIncrement = false;
				colvarMultiReportConfigTableIndex.IsNullable = false;
				colvarMultiReportConfigTableIndex.IsPrimaryKey = false;
				colvarMultiReportConfigTableIndex.IsForeignKey = false;
				colvarMultiReportConfigTableIndex.IsReadOnly = false;
				colvarMultiReportConfigTableIndex.DefaultSetting = @"";
				colvarMultiReportConfigTableIndex.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportConfigTableIndex);
				
				TableSchema.TableColumn colvarHeaderBlankRowCount = new TableSchema.TableColumn(schema);
				colvarHeaderBlankRowCount.ColumnName = "Header_Blank_Row_Count";
				colvarHeaderBlankRowCount.DataType = DbType.Byte;
				colvarHeaderBlankRowCount.MaxLength = 0;
				colvarHeaderBlankRowCount.AutoIncrement = false;
				colvarHeaderBlankRowCount.IsNullable = false;
				colvarHeaderBlankRowCount.IsPrimaryKey = false;
				colvarHeaderBlankRowCount.IsForeignKey = false;
				colvarHeaderBlankRowCount.IsReadOnly = false;
				colvarHeaderBlankRowCount.DefaultSetting = @"";
				colvarHeaderBlankRowCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHeaderBlankRowCount);
				
				TableSchema.TableColumn colvarHeaderTitle = new TableSchema.TableColumn(schema);
				colvarHeaderTitle.ColumnName = "Header_Title";
				colvarHeaderTitle.DataType = DbType.String;
				colvarHeaderTitle.MaxLength = 1073741823;
				colvarHeaderTitle.AutoIncrement = false;
				colvarHeaderTitle.IsNullable = false;
				colvarHeaderTitle.IsPrimaryKey = false;
				colvarHeaderTitle.IsForeignKey = false;
				colvarHeaderTitle.IsReadOnly = false;
				colvarHeaderTitle.DefaultSetting = @"";
				colvarHeaderTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHeaderTitle);
				
				TableSchema.TableColumn colvarHeaderTitleCellCount = new TableSchema.TableColumn(schema);
				colvarHeaderTitleCellCount.ColumnName = "Header_Title_Cell_Count";
				colvarHeaderTitleCellCount.DataType = DbType.Int16;
				colvarHeaderTitleCellCount.MaxLength = 0;
				colvarHeaderTitleCellCount.AutoIncrement = false;
				colvarHeaderTitleCellCount.IsNullable = false;
				colvarHeaderTitleCellCount.IsPrimaryKey = false;
				colvarHeaderTitleCellCount.IsForeignKey = false;
				colvarHeaderTitleCellCount.IsReadOnly = false;
				colvarHeaderTitleCellCount.DefaultSetting = @"";
				colvarHeaderTitleCellCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHeaderTitleCellCount);
				
				TableSchema.TableColumn colvarSheetName = new TableSchema.TableColumn(schema);
				colvarSheetName.ColumnName = "Sheet_Name";
				colvarSheetName.DataType = DbType.AnsiString;
				colvarSheetName.MaxLength = 50;
				colvarSheetName.AutoIncrement = false;
				colvarSheetName.IsNullable = false;
				colvarSheetName.IsPrimaryKey = false;
				colvarSheetName.IsForeignKey = false;
				colvarSheetName.IsReadOnly = false;
				colvarSheetName.DefaultSetting = @"";
				colvarSheetName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSheetName);
				
				TableSchema.TableColumn colvarSheetSequence = new TableSchema.TableColumn(schema);
				colvarSheetSequence.ColumnName = "Sheet_Sequence";
				colvarSheetSequence.DataType = DbType.Byte;
				colvarSheetSequence.MaxLength = 0;
				colvarSheetSequence.AutoIncrement = false;
				colvarSheetSequence.IsNullable = false;
				colvarSheetSequence.IsPrimaryKey = false;
				colvarSheetSequence.IsForeignKey = false;
				colvarSheetSequence.IsReadOnly = false;
				colvarSheetSequence.DefaultSetting = @"";
				colvarSheetSequence.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSheetSequence);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("sys_multi_report_sheet_config",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MultiReportSheetConfigId")]
		[Bindable(true)]
		public int MultiReportSheetConfigId 
		{
			get { return GetColumnValue<int>(Columns.MultiReportSheetConfigId); }
			set { SetColumnValue(Columns.MultiReportSheetConfigId, value); }
		}
		  
		[XmlAttribute("MultiReportId")]
		[Bindable(true)]
		public short MultiReportId 
		{
			get { return GetColumnValue<short>(Columns.MultiReportId); }
			set { SetColumnValue(Columns.MultiReportId, value); }
		}
		  
		[XmlAttribute("MultiReportConfigTableIndex")]
		[Bindable(true)]
		public short MultiReportConfigTableIndex 
		{
			get { return GetColumnValue<short>(Columns.MultiReportConfigTableIndex); }
			set { SetColumnValue(Columns.MultiReportConfigTableIndex, value); }
		}
		  
		[XmlAttribute("HeaderBlankRowCount")]
		[Bindable(true)]
		public byte HeaderBlankRowCount 
		{
			get { return GetColumnValue<byte>(Columns.HeaderBlankRowCount); }
			set { SetColumnValue(Columns.HeaderBlankRowCount, value); }
		}
		  
		[XmlAttribute("HeaderTitle")]
		[Bindable(true)]
		public string HeaderTitle 
		{
			get { return GetColumnValue<string>(Columns.HeaderTitle); }
			set { SetColumnValue(Columns.HeaderTitle, value); }
		}
		  
		[XmlAttribute("HeaderTitleCellCount")]
		[Bindable(true)]
		public short HeaderTitleCellCount 
		{
			get { return GetColumnValue<short>(Columns.HeaderTitleCellCount); }
			set { SetColumnValue(Columns.HeaderTitleCellCount, value); }
		}
		  
		[XmlAttribute("SheetName")]
		[Bindable(true)]
		public string SheetName 
		{
			get { return GetColumnValue<string>(Columns.SheetName); }
			set { SetColumnValue(Columns.SheetName, value); }
		}
		  
		[XmlAttribute("SheetSequence")]
		[Bindable(true)]
		public byte SheetSequence 
		{
			get { return GetColumnValue<byte>(Columns.SheetSequence); }
			set { SetColumnValue(Columns.SheetSequence, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(short varMultiReportId,short varMultiReportConfigTableIndex,byte varHeaderBlankRowCount,string varHeaderTitle,short varHeaderTitleCellCount,string varSheetName,byte varSheetSequence)
		{
			SysMultiReportSheetConfig item = new SysMultiReportSheetConfig();
			
			item.MultiReportId = varMultiReportId;
			
			item.MultiReportConfigTableIndex = varMultiReportConfigTableIndex;
			
			item.HeaderBlankRowCount = varHeaderBlankRowCount;
			
			item.HeaderTitle = varHeaderTitle;
			
			item.HeaderTitleCellCount = varHeaderTitleCellCount;
			
			item.SheetName = varSheetName;
			
			item.SheetSequence = varSheetSequence;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMultiReportSheetConfigId,short varMultiReportId,short varMultiReportConfigTableIndex,byte varHeaderBlankRowCount,string varHeaderTitle,short varHeaderTitleCellCount,string varSheetName,byte varSheetSequence)
		{
			SysMultiReportSheetConfig item = new SysMultiReportSheetConfig();
			
				item.MultiReportSheetConfigId = varMultiReportSheetConfigId;
			
				item.MultiReportId = varMultiReportId;
			
				item.MultiReportConfigTableIndex = varMultiReportConfigTableIndex;
			
				item.HeaderBlankRowCount = varHeaderBlankRowCount;
			
				item.HeaderTitle = varHeaderTitle;
			
				item.HeaderTitleCellCount = varHeaderTitleCellCount;
			
				item.SheetName = varSheetName;
			
				item.SheetSequence = varSheetSequence;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MultiReportSheetConfigIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiReportIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiReportConfigTableIndexColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn HeaderBlankRowCountColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn HeaderTitleColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn HeaderTitleCellCountColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SheetNameColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SheetSequenceColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MultiReportSheetConfigId = @"MultiReport_Sheet_Config_ID";
			 public static string MultiReportId = @"MultiReport_ID";
			 public static string MultiReportConfigTableIndex = @"MultiReport_Config_Table_Index";
			 public static string HeaderBlankRowCount = @"Header_Blank_Row_Count";
			 public static string HeaderTitle = @"Header_Title";
			 public static string HeaderTitleCellCount = @"Header_Title_Cell_Count";
			 public static string SheetName = @"Sheet_Name";
			 public static string SheetSequence = @"Sheet_Sequence";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
