using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysMultiReportConfig class.
	/// </summary>
    [Serializable]
	public partial class SysMultiReportConfigCollection : ActiveList<SysMultiReportConfig, SysMultiReportConfigCollection>
	{	   
		public SysMultiReportConfigCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysMultiReportConfigCollection</returns>
		public SysMultiReportConfigCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysMultiReportConfig o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the sys_multi_report_config table.
	/// </summary>
	[Serializable]
	public partial class SysMultiReportConfig : ActiveRecord<SysMultiReportConfig>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SysMultiReportConfig()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysMultiReportConfig(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysMultiReportConfig(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysMultiReportConfig(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("sys_multi_report_config", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMultiReportConfigId = new TableSchema.TableColumn(schema);
				colvarMultiReportConfigId.ColumnName = "MultiReport_Config_ID";
				colvarMultiReportConfigId.DataType = DbType.Int32;
				colvarMultiReportConfigId.MaxLength = 0;
				colvarMultiReportConfigId.AutoIncrement = true;
				colvarMultiReportConfigId.IsNullable = false;
				colvarMultiReportConfigId.IsPrimaryKey = true;
				colvarMultiReportConfigId.IsForeignKey = false;
				colvarMultiReportConfigId.IsReadOnly = false;
				colvarMultiReportConfigId.DefaultSetting = @"";
				colvarMultiReportConfigId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportConfigId);
				
				TableSchema.TableColumn colvarMultiReportId = new TableSchema.TableColumn(schema);
				colvarMultiReportId.ColumnName = "MultiReport_ID";
				colvarMultiReportId.DataType = DbType.Int16;
				colvarMultiReportId.MaxLength = 0;
				colvarMultiReportId.AutoIncrement = false;
				colvarMultiReportId.IsNullable = false;
				colvarMultiReportId.IsPrimaryKey = false;
				colvarMultiReportId.IsForeignKey = false;
				colvarMultiReportId.IsReadOnly = false;
				colvarMultiReportId.DefaultSetting = @"";
				colvarMultiReportId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportId);
				
				TableSchema.TableColumn colvarMultiReportConfigTableIndex = new TableSchema.TableColumn(schema);
				colvarMultiReportConfigTableIndex.ColumnName = "MultiReport_Config_Table_Index";
				colvarMultiReportConfigTableIndex.DataType = DbType.Byte;
				colvarMultiReportConfigTableIndex.MaxLength = 0;
				colvarMultiReportConfigTableIndex.AutoIncrement = false;
				colvarMultiReportConfigTableIndex.IsNullable = false;
				colvarMultiReportConfigTableIndex.IsPrimaryKey = false;
				colvarMultiReportConfigTableIndex.IsForeignKey = false;
				colvarMultiReportConfigTableIndex.IsReadOnly = false;
				colvarMultiReportConfigTableIndex.DefaultSetting = @"";
				colvarMultiReportConfigTableIndex.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportConfigTableIndex);
				
				TableSchema.TableColumn colvarMultiReportConfigSqlColName = new TableSchema.TableColumn(schema);
				colvarMultiReportConfigSqlColName.ColumnName = "MultiReport_Config_SqlColName";
				colvarMultiReportConfigSqlColName.DataType = DbType.AnsiString;
				colvarMultiReportConfigSqlColName.MaxLength = 50;
				colvarMultiReportConfigSqlColName.AutoIncrement = false;
				colvarMultiReportConfigSqlColName.IsNullable = false;
				colvarMultiReportConfigSqlColName.IsPrimaryKey = false;
				colvarMultiReportConfigSqlColName.IsForeignKey = false;
				colvarMultiReportConfigSqlColName.IsReadOnly = false;
				colvarMultiReportConfigSqlColName.DefaultSetting = @"";
				colvarMultiReportConfigSqlColName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportConfigSqlColName);
				
				TableSchema.TableColumn colvarMultiReportConfigExcelColName = new TableSchema.TableColumn(schema);
				colvarMultiReportConfigExcelColName.ColumnName = "MultiReport_Config_ExcelColName";
				colvarMultiReportConfigExcelColName.DataType = DbType.String;
				colvarMultiReportConfigExcelColName.MaxLength = 200;
				colvarMultiReportConfigExcelColName.AutoIncrement = false;
				colvarMultiReportConfigExcelColName.IsNullable = false;
				colvarMultiReportConfigExcelColName.IsPrimaryKey = false;
				colvarMultiReportConfigExcelColName.IsForeignKey = false;
				colvarMultiReportConfigExcelColName.IsReadOnly = false;
				colvarMultiReportConfigExcelColName.DefaultSetting = @"";
				colvarMultiReportConfigExcelColName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportConfigExcelColName);
				
				TableSchema.TableColumn colvarMultiReportConfigExcelColWidth = new TableSchema.TableColumn(schema);
				colvarMultiReportConfigExcelColWidth.ColumnName = "MultiReport_Config_ExcelColWidth";
				colvarMultiReportConfigExcelColWidth.DataType = DbType.Byte;
				colvarMultiReportConfigExcelColWidth.MaxLength = 0;
				colvarMultiReportConfigExcelColWidth.AutoIncrement = false;
				colvarMultiReportConfigExcelColWidth.IsNullable = true;
				colvarMultiReportConfigExcelColWidth.IsPrimaryKey = false;
				colvarMultiReportConfigExcelColWidth.IsForeignKey = false;
				colvarMultiReportConfigExcelColWidth.IsReadOnly = false;
				colvarMultiReportConfigExcelColWidth.DefaultSetting = @"";
				colvarMultiReportConfigExcelColWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportConfigExcelColWidth);
				
				TableSchema.TableColumn colvarMultiReportConfigExcelColPosition = new TableSchema.TableColumn(schema);
				colvarMultiReportConfigExcelColPosition.ColumnName = "MultiReport_Config_ExcelColPosition";
				colvarMultiReportConfigExcelColPosition.DataType = DbType.Byte;
				colvarMultiReportConfigExcelColPosition.MaxLength = 0;
				colvarMultiReportConfigExcelColPosition.AutoIncrement = false;
				colvarMultiReportConfigExcelColPosition.IsNullable = true;
				colvarMultiReportConfigExcelColPosition.IsPrimaryKey = false;
				colvarMultiReportConfigExcelColPosition.IsForeignKey = false;
				colvarMultiReportConfigExcelColPosition.IsReadOnly = false;
				colvarMultiReportConfigExcelColPosition.DefaultSetting = @"";
				colvarMultiReportConfigExcelColPosition.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportConfigExcelColPosition);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("sys_multi_report_config",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MultiReportConfigId")]
		[Bindable(true)]
		public int MultiReportConfigId 
		{
			get { return GetColumnValue<int>(Columns.MultiReportConfigId); }
			set { SetColumnValue(Columns.MultiReportConfigId, value); }
		}
		  
		[XmlAttribute("MultiReportId")]
		[Bindable(true)]
		public short MultiReportId 
		{
			get { return GetColumnValue<short>(Columns.MultiReportId); }
			set { SetColumnValue(Columns.MultiReportId, value); }
		}
		  
		[XmlAttribute("MultiReportConfigTableIndex")]
		[Bindable(true)]
		public byte MultiReportConfigTableIndex 
		{
			get { return GetColumnValue<byte>(Columns.MultiReportConfigTableIndex); }
			set { SetColumnValue(Columns.MultiReportConfigTableIndex, value); }
		}
		  
		[XmlAttribute("MultiReportConfigSqlColName")]
		[Bindable(true)]
		public string MultiReportConfigSqlColName 
		{
			get { return GetColumnValue<string>(Columns.MultiReportConfigSqlColName); }
			set { SetColumnValue(Columns.MultiReportConfigSqlColName, value); }
		}
		  
		[XmlAttribute("MultiReportConfigExcelColName")]
		[Bindable(true)]
		public string MultiReportConfigExcelColName 
		{
			get { return GetColumnValue<string>(Columns.MultiReportConfigExcelColName); }
			set { SetColumnValue(Columns.MultiReportConfigExcelColName, value); }
		}
		  
		[XmlAttribute("MultiReportConfigExcelColWidth")]
		[Bindable(true)]
		public byte? MultiReportConfigExcelColWidth 
		{
			get { return GetColumnValue<byte?>(Columns.MultiReportConfigExcelColWidth); }
			set { SetColumnValue(Columns.MultiReportConfigExcelColWidth, value); }
		}
		  
		[XmlAttribute("MultiReportConfigExcelColPosition")]
		[Bindable(true)]
		public byte? MultiReportConfigExcelColPosition 
		{
			get { return GetColumnValue<byte?>(Columns.MultiReportConfigExcelColPosition); }
			set { SetColumnValue(Columns.MultiReportConfigExcelColPosition, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(short varMultiReportId,byte varMultiReportConfigTableIndex,string varMultiReportConfigSqlColName,string varMultiReportConfigExcelColName,byte? varMultiReportConfigExcelColWidth,byte? varMultiReportConfigExcelColPosition)
		{
			SysMultiReportConfig item = new SysMultiReportConfig();
			
			item.MultiReportId = varMultiReportId;
			
			item.MultiReportConfigTableIndex = varMultiReportConfigTableIndex;
			
			item.MultiReportConfigSqlColName = varMultiReportConfigSqlColName;
			
			item.MultiReportConfigExcelColName = varMultiReportConfigExcelColName;
			
			item.MultiReportConfigExcelColWidth = varMultiReportConfigExcelColWidth;
			
			item.MultiReportConfigExcelColPosition = varMultiReportConfigExcelColPosition;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varMultiReportConfigId,short varMultiReportId,byte varMultiReportConfigTableIndex,string varMultiReportConfigSqlColName,string varMultiReportConfigExcelColName,byte? varMultiReportConfigExcelColWidth,byte? varMultiReportConfigExcelColPosition)
		{
			SysMultiReportConfig item = new SysMultiReportConfig();
			
				item.MultiReportConfigId = varMultiReportConfigId;
			
				item.MultiReportId = varMultiReportId;
			
				item.MultiReportConfigTableIndex = varMultiReportConfigTableIndex;
			
				item.MultiReportConfigSqlColName = varMultiReportConfigSqlColName;
			
				item.MultiReportConfigExcelColName = varMultiReportConfigExcelColName;
			
				item.MultiReportConfigExcelColWidth = varMultiReportConfigExcelColWidth;
			
				item.MultiReportConfigExcelColPosition = varMultiReportConfigExcelColPosition;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MultiReportConfigIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiReportIdColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiReportConfigTableIndexColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiReportConfigSqlColNameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiReportConfigExcelColNameColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiReportConfigExcelColWidthColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiReportConfigExcelColPositionColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MultiReportConfigId = @"MultiReport_Config_ID";
			 public static string MultiReportId = @"MultiReport_ID";
			 public static string MultiReportConfigTableIndex = @"MultiReport_Config_Table_Index";
			 public static string MultiReportConfigSqlColName = @"MultiReport_Config_SqlColName";
			 public static string MultiReportConfigExcelColName = @"MultiReport_Config_ExcelColName";
			 public static string MultiReportConfigExcelColWidth = @"MultiReport_Config_ExcelColWidth";
			 public static string MultiReportConfigExcelColPosition = @"MultiReport_Config_ExcelColPosition";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
