using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysDynamicControl class.
	/// </summary>
    [Serializable]
	public partial class SysDynamicControlCollection : ActiveList<SysDynamicControl, SysDynamicControlCollection>
	{	   
		public SysDynamicControlCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysDynamicControlCollection</returns>
		public SysDynamicControlCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysDynamicControl o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the sys_dynamic_controls table.
	/// </summary>
	[Serializable]
	public partial class SysDynamicControl : ActiveRecord<SysDynamicControl>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SysDynamicControl()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysDynamicControl(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysDynamicControl(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysDynamicControl(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("sys_dynamic_controls", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarMa = new TableSchema.TableColumn(schema);
				colvarMa.ColumnName = "Ma";
				colvarMa.DataType = DbType.String;
				colvarMa.MaxLength = 150;
				colvarMa.AutoIncrement = false;
				colvarMa.IsNullable = true;
				colvarMa.IsPrimaryKey = false;
				colvarMa.IsForeignKey = false;
				colvarMa.IsReadOnly = false;
				colvarMa.DefaultSetting = @"";
				colvarMa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMa);
				
				TableSchema.TableColumn colvarMota = new TableSchema.TableColumn(schema);
				colvarMota.ColumnName = "mota";
				colvarMota.DataType = DbType.String;
				colvarMota.MaxLength = 150;
				colvarMota.AutoIncrement = false;
				colvarMota.IsNullable = true;
				colvarMota.IsPrimaryKey = false;
				colvarMota.IsForeignKey = false;
				colvarMota.IsReadOnly = false;
				colvarMota.DefaultSetting = @"";
				colvarMota.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMota);
				
				TableSchema.TableColumn colvarStt = new TableSchema.TableColumn(schema);
				colvarStt.ColumnName = "stt";
				colvarStt.DataType = DbType.Int16;
				colvarStt.MaxLength = 0;
				colvarStt.AutoIncrement = false;
				colvarStt.IsNullable = true;
				colvarStt.IsPrimaryKey = false;
				colvarStt.IsForeignKey = false;
				colvarStt.IsReadOnly = false;
				colvarStt.DefaultSetting = @"";
				colvarStt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStt);
				
				TableSchema.TableColumn colvarMultiReportId = new TableSchema.TableColumn(schema);
				colvarMultiReportId.ColumnName = "MultiReport_ID";
				colvarMultiReportId.DataType = DbType.Int32;
				colvarMultiReportId.MaxLength = 0;
				colvarMultiReportId.AutoIncrement = false;
				colvarMultiReportId.IsNullable = true;
				colvarMultiReportId.IsPrimaryKey = false;
				colvarMultiReportId.IsForeignKey = false;
				colvarMultiReportId.IsReadOnly = false;
				colvarMultiReportId.DefaultSetting = @"";
				colvarMultiReportId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiReportId);
				
				TableSchema.TableColumn colvarRtxt = new TableSchema.TableColumn(schema);
				colvarRtxt.ColumnName = "Rtxt";
				colvarRtxt.DataType = DbType.Byte;
				colvarRtxt.MaxLength = 0;
				colvarRtxt.AutoIncrement = false;
				colvarRtxt.IsNullable = true;
				colvarRtxt.IsPrimaryKey = false;
				colvarRtxt.IsForeignKey = false;
				colvarRtxt.IsReadOnly = false;
				colvarRtxt.DefaultSetting = @"";
				colvarRtxt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRtxt);
				
				TableSchema.TableColumn colvarTopLabel = new TableSchema.TableColumn(schema);
				colvarTopLabel.ColumnName = "topLabel";
				colvarTopLabel.DataType = DbType.Byte;
				colvarTopLabel.MaxLength = 0;
				colvarTopLabel.AutoIncrement = false;
				colvarTopLabel.IsNullable = true;
				colvarTopLabel.IsPrimaryKey = false;
				colvarTopLabel.IsForeignKey = false;
				colvarTopLabel.IsReadOnly = false;
				colvarTopLabel.DefaultSetting = @"";
				colvarTopLabel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTopLabel);
				
				TableSchema.TableColumn colvarMultiline = new TableSchema.TableColumn(schema);
				colvarMultiline.ColumnName = "multiline";
				colvarMultiline.DataType = DbType.Byte;
				colvarMultiline.MaxLength = 0;
				colvarMultiline.AutoIncrement = false;
				colvarMultiline.IsNullable = true;
				colvarMultiline.IsPrimaryKey = false;
				colvarMultiline.IsForeignKey = false;
				colvarMultiline.IsReadOnly = false;
				
						colvarMultiline.DefaultSetting = @"((0))";
				colvarMultiline.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiline);
				
				TableSchema.TableColumn colvarX = new TableSchema.TableColumn(schema);
				colvarX.ColumnName = "X";
				colvarX.DataType = DbType.Int32;
				colvarX.MaxLength = 0;
				colvarX.AutoIncrement = false;
				colvarX.IsNullable = true;
				colvarX.IsPrimaryKey = false;
				colvarX.IsForeignKey = false;
				colvarX.IsReadOnly = false;
				colvarX.DefaultSetting = @"";
				colvarX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarX);
				
				TableSchema.TableColumn colvarY = new TableSchema.TableColumn(schema);
				colvarY.ColumnName = "Y";
				colvarY.DataType = DbType.Int32;
				colvarY.MaxLength = 0;
				colvarY.AutoIncrement = false;
				colvarY.IsNullable = true;
				colvarY.IsPrimaryKey = false;
				colvarY.IsForeignKey = false;
				colvarY.IsReadOnly = false;
				colvarY.DefaultSetting = @"";
				colvarY.ForeignKeyTableName = "";
				schema.Columns.Add(colvarY);
				
				TableSchema.TableColumn colvarW = new TableSchema.TableColumn(schema);
				colvarW.ColumnName = "W";
				colvarW.DataType = DbType.Int32;
				colvarW.MaxLength = 0;
				colvarW.AutoIncrement = false;
				colvarW.IsNullable = true;
				colvarW.IsPrimaryKey = false;
				colvarW.IsForeignKey = false;
				colvarW.IsReadOnly = false;
				colvarW.DefaultSetting = @"";
				colvarW.ForeignKeyTableName = "";
				schema.Columns.Add(colvarW);
				
				TableSchema.TableColumn colvarH = new TableSchema.TableColumn(schema);
				colvarH.ColumnName = "H";
				colvarH.DataType = DbType.Int32;
				colvarH.MaxLength = 0;
				colvarH.AutoIncrement = false;
				colvarH.IsNullable = true;
				colvarH.IsPrimaryKey = false;
				colvarH.IsForeignKey = false;
				colvarH.IsReadOnly = false;
				colvarH.DefaultSetting = @"";
				colvarH.ForeignKeyTableName = "";
				schema.Columns.Add(colvarH);
				
				TableSchema.TableColumn colvarLblW = new TableSchema.TableColumn(schema);
				colvarLblW.ColumnName = "lblW";
				colvarLblW.DataType = DbType.Int32;
				colvarLblW.MaxLength = 0;
				colvarLblW.AutoIncrement = false;
				colvarLblW.IsNullable = true;
				colvarLblW.IsPrimaryKey = false;
				colvarLblW.IsForeignKey = false;
				colvarLblW.IsReadOnly = false;
				colvarLblW.DefaultSetting = @"";
				colvarLblW.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLblW);
				
				TableSchema.TableColumn colvarAllowEmpty = new TableSchema.TableColumn(schema);
				colvarAllowEmpty.ColumnName = "AllowEmpty";
				colvarAllowEmpty.DataType = DbType.Byte;
				colvarAllowEmpty.MaxLength = 0;
				colvarAllowEmpty.AutoIncrement = false;
				colvarAllowEmpty.IsNullable = true;
				colvarAllowEmpty.IsPrimaryKey = false;
				colvarAllowEmpty.IsForeignKey = false;
				colvarAllowEmpty.IsReadOnly = false;
				
						colvarAllowEmpty.DefaultSetting = @"((0))";
				colvarAllowEmpty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllowEmpty);
				
				TableSchema.TableColumn colvarBold = new TableSchema.TableColumn(schema);
				colvarBold.ColumnName = "Bold";
				colvarBold.DataType = DbType.Byte;
				colvarBold.MaxLength = 0;
				colvarBold.AutoIncrement = false;
				colvarBold.IsNullable = true;
				colvarBold.IsPrimaryKey = false;
				colvarBold.IsForeignKey = false;
				colvarBold.IsReadOnly = false;
				
						colvarBold.DefaultSetting = @"((0))";
				colvarBold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBold);
				
				TableSchema.TableColumn colvarDataSource = new TableSchema.TableColumn(schema);
				colvarDataSource.ColumnName = "Data_Source";
				colvarDataSource.DataType = DbType.String;
				colvarDataSource.MaxLength = 1000;
				colvarDataSource.AutoIncrement = false;
				colvarDataSource.IsNullable = true;
				colvarDataSource.IsPrimaryKey = false;
				colvarDataSource.IsForeignKey = false;
				colvarDataSource.IsReadOnly = false;
				colvarDataSource.DefaultSetting = @"";
				colvarDataSource.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDataSource);
				
				TableSchema.TableColumn colvarDisplayMember = new TableSchema.TableColumn(schema);
				colvarDisplayMember.ColumnName = "Display_member";
				colvarDisplayMember.DataType = DbType.String;
				colvarDisplayMember.MaxLength = 50;
				colvarDisplayMember.AutoIncrement = false;
				colvarDisplayMember.IsNullable = true;
				colvarDisplayMember.IsPrimaryKey = false;
				colvarDisplayMember.IsForeignKey = false;
				colvarDisplayMember.IsReadOnly = false;
				colvarDisplayMember.DefaultSetting = @"";
				colvarDisplayMember.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDisplayMember);
				
				TableSchema.TableColumn colvarValueMember = new TableSchema.TableColumn(schema);
				colvarValueMember.ColumnName = "Value_Member";
				colvarValueMember.DataType = DbType.String;
				colvarValueMember.MaxLength = 50;
				colvarValueMember.AutoIncrement = false;
				colvarValueMember.IsNullable = true;
				colvarValueMember.IsPrimaryKey = false;
				colvarValueMember.IsForeignKey = false;
				colvarValueMember.IsReadOnly = false;
				colvarValueMember.DefaultSetting = @"";
				colvarValueMember.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValueMember);
				
				TableSchema.TableColumn colvarControlType = new TableSchema.TableColumn(schema);
				colvarControlType.ColumnName = "Control_Type";
				colvarControlType.DataType = DbType.Byte;
				colvarControlType.MaxLength = 0;
				colvarControlType.AutoIncrement = false;
				colvarControlType.IsNullable = true;
				colvarControlType.IsPrimaryKey = false;
				colvarControlType.IsForeignKey = false;
				colvarControlType.IsReadOnly = false;
				colvarControlType.DefaultSetting = @"";
				colvarControlType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarControlType);
				
				TableSchema.TableColumn colvarDefaultOption = new TableSchema.TableColumn(schema);
				colvarDefaultOption.ColumnName = "Default_Option";
				colvarDefaultOption.DataType = DbType.String;
				colvarDefaultOption.MaxLength = 10;
				colvarDefaultOption.AutoIncrement = false;
				colvarDefaultOption.IsNullable = true;
				colvarDefaultOption.IsPrimaryKey = false;
				colvarDefaultOption.IsForeignKey = false;
				colvarDefaultOption.IsReadOnly = false;
				colvarDefaultOption.DefaultSetting = @"";
				colvarDefaultOption.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultOption);
				
				TableSchema.TableColumn colvarGroupId = new TableSchema.TableColumn(schema);
				colvarGroupId.ColumnName = "Group_Id";
				colvarGroupId.DataType = DbType.String;
				colvarGroupId.MaxLength = 100;
				colvarGroupId.AutoIncrement = false;
				colvarGroupId.IsNullable = true;
				colvarGroupId.IsPrimaryKey = false;
				colvarGroupId.IsForeignKey = false;
				colvarGroupId.IsReadOnly = false;
				colvarGroupId.DefaultSetting = @"";
				colvarGroupId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGroupId);
				
				TableSchema.TableColumn colvarLoaiDanhmuc = new TableSchema.TableColumn(schema);
				colvarLoaiDanhmuc.ColumnName = "Loai_danhmuc";
				colvarLoaiDanhmuc.DataType = DbType.String;
				colvarLoaiDanhmuc.MaxLength = 50;
				colvarLoaiDanhmuc.AutoIncrement = false;
				colvarLoaiDanhmuc.IsNullable = true;
				colvarLoaiDanhmuc.IsPrimaryKey = false;
				colvarLoaiDanhmuc.IsForeignKey = false;
				colvarLoaiDanhmuc.IsReadOnly = false;
				colvarLoaiDanhmuc.DefaultSetting = @"";
				colvarLoaiDanhmuc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoaiDanhmuc);
				
				TableSchema.TableColumn colvarParent = new TableSchema.TableColumn(schema);
				colvarParent.ColumnName = "parent";
				colvarParent.DataType = DbType.String;
				colvarParent.MaxLength = 50;
				colvarParent.AutoIncrement = false;
				colvarParent.IsNullable = true;
				colvarParent.IsPrimaryKey = false;
				colvarParent.IsForeignKey = false;
				colvarParent.IsReadOnly = false;
				colvarParent.DefaultSetting = @"";
				colvarParent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParent);
				
				TableSchema.TableColumn colvarFilter = new TableSchema.TableColumn(schema);
				colvarFilter.ColumnName = "filter";
				colvarFilter.DataType = DbType.String;
				colvarFilter.MaxLength = 255;
				colvarFilter.AutoIncrement = false;
				colvarFilter.IsNullable = true;
				colvarFilter.IsPrimaryKey = false;
				colvarFilter.IsForeignKey = false;
				colvarFilter.IsReadOnly = false;
				colvarFilter.DefaultSetting = @"";
				colvarFilter.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFilter);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("sys_dynamic_controls",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Ma")]
		[Bindable(true)]
		public string Ma 
		{
			get { return GetColumnValue<string>(Columns.Ma); }
			set { SetColumnValue(Columns.Ma, value); }
		}
		  
		[XmlAttribute("Mota")]
		[Bindable(true)]
		public string Mota 
		{
			get { return GetColumnValue<string>(Columns.Mota); }
			set { SetColumnValue(Columns.Mota, value); }
		}
		  
		[XmlAttribute("Stt")]
		[Bindable(true)]
		public short? Stt 
		{
			get { return GetColumnValue<short?>(Columns.Stt); }
			set { SetColumnValue(Columns.Stt, value); }
		}
		  
		[XmlAttribute("MultiReportId")]
		[Bindable(true)]
		public int? MultiReportId 
		{
			get { return GetColumnValue<int?>(Columns.MultiReportId); }
			set { SetColumnValue(Columns.MultiReportId, value); }
		}
		  
		[XmlAttribute("Rtxt")]
		[Bindable(true)]
		public byte? Rtxt 
		{
			get { return GetColumnValue<byte?>(Columns.Rtxt); }
			set { SetColumnValue(Columns.Rtxt, value); }
		}
		  
		[XmlAttribute("TopLabel")]
		[Bindable(true)]
		public byte? TopLabel 
		{
			get { return GetColumnValue<byte?>(Columns.TopLabel); }
			set { SetColumnValue(Columns.TopLabel, value); }
		}
		  
		[XmlAttribute("Multiline")]
		[Bindable(true)]
		public byte? Multiline 
		{
			get { return GetColumnValue<byte?>(Columns.Multiline); }
			set { SetColumnValue(Columns.Multiline, value); }
		}
		  
		[XmlAttribute("X")]
		[Bindable(true)]
		public int? X 
		{
			get { return GetColumnValue<int?>(Columns.X); }
			set { SetColumnValue(Columns.X, value); }
		}
		  
		[XmlAttribute("Y")]
		[Bindable(true)]
		public int? Y 
		{
			get { return GetColumnValue<int?>(Columns.Y); }
			set { SetColumnValue(Columns.Y, value); }
		}
		  
		[XmlAttribute("W")]
		[Bindable(true)]
		public int? W 
		{
			get { return GetColumnValue<int?>(Columns.W); }
			set { SetColumnValue(Columns.W, value); }
		}
		  
		[XmlAttribute("H")]
		[Bindable(true)]
		public int? H 
		{
			get { return GetColumnValue<int?>(Columns.H); }
			set { SetColumnValue(Columns.H, value); }
		}
		  
		[XmlAttribute("LblW")]
		[Bindable(true)]
		public int? LblW 
		{
			get { return GetColumnValue<int?>(Columns.LblW); }
			set { SetColumnValue(Columns.LblW, value); }
		}
		  
		[XmlAttribute("AllowEmpty")]
		[Bindable(true)]
		public byte? AllowEmpty 
		{
			get { return GetColumnValue<byte?>(Columns.AllowEmpty); }
			set { SetColumnValue(Columns.AllowEmpty, value); }
		}
		  
		[XmlAttribute("Bold")]
		[Bindable(true)]
		public byte? Bold 
		{
			get { return GetColumnValue<byte?>(Columns.Bold); }
			set { SetColumnValue(Columns.Bold, value); }
		}
		  
		[XmlAttribute("DataSource")]
		[Bindable(true)]
		public string DataSource 
		{
			get { return GetColumnValue<string>(Columns.DataSource); }
			set { SetColumnValue(Columns.DataSource, value); }
		}
		  
		[XmlAttribute("DisplayMember")]
		[Bindable(true)]
		public string DisplayMember 
		{
			get { return GetColumnValue<string>(Columns.DisplayMember); }
			set { SetColumnValue(Columns.DisplayMember, value); }
		}
		  
		[XmlAttribute("ValueMember")]
		[Bindable(true)]
		public string ValueMember 
		{
			get { return GetColumnValue<string>(Columns.ValueMember); }
			set { SetColumnValue(Columns.ValueMember, value); }
		}
		  
		[XmlAttribute("ControlType")]
		[Bindable(true)]
		public byte? ControlType 
		{
			get { return GetColumnValue<byte?>(Columns.ControlType); }
			set { SetColumnValue(Columns.ControlType, value); }
		}
		  
		[XmlAttribute("DefaultOption")]
		[Bindable(true)]
		public string DefaultOption 
		{
			get { return GetColumnValue<string>(Columns.DefaultOption); }
			set { SetColumnValue(Columns.DefaultOption, value); }
		}
		  
		[XmlAttribute("GroupId")]
		[Bindable(true)]
		public string GroupId 
		{
			get { return GetColumnValue<string>(Columns.GroupId); }
			set { SetColumnValue(Columns.GroupId, value); }
		}
		  
		[XmlAttribute("LoaiDanhmuc")]
		[Bindable(true)]
		public string LoaiDanhmuc 
		{
			get { return GetColumnValue<string>(Columns.LoaiDanhmuc); }
			set { SetColumnValue(Columns.LoaiDanhmuc, value); }
		}
		  
		[XmlAttribute("Parent")]
		[Bindable(true)]
		public string Parent 
		{
			get { return GetColumnValue<string>(Columns.Parent); }
			set { SetColumnValue(Columns.Parent, value); }
		}
		  
		[XmlAttribute("Filter")]
		[Bindable(true)]
		public string Filter 
		{
			get { return GetColumnValue<string>(Columns.Filter); }
			set { SetColumnValue(Columns.Filter, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMa,string varMota,short? varStt,int? varMultiReportId,byte? varRtxt,byte? varTopLabel,byte? varMultiline,int? varX,int? varY,int? varW,int? varH,int? varLblW,byte? varAllowEmpty,byte? varBold,string varDataSource,string varDisplayMember,string varValueMember,byte? varControlType,string varDefaultOption,string varGroupId,string varLoaiDanhmuc,string varParent,string varFilter)
		{
			SysDynamicControl item = new SysDynamicControl();
			
			item.Ma = varMa;
			
			item.Mota = varMota;
			
			item.Stt = varStt;
			
			item.MultiReportId = varMultiReportId;
			
			item.Rtxt = varRtxt;
			
			item.TopLabel = varTopLabel;
			
			item.Multiline = varMultiline;
			
			item.X = varX;
			
			item.Y = varY;
			
			item.W = varW;
			
			item.H = varH;
			
			item.LblW = varLblW;
			
			item.AllowEmpty = varAllowEmpty;
			
			item.Bold = varBold;
			
			item.DataSource = varDataSource;
			
			item.DisplayMember = varDisplayMember;
			
			item.ValueMember = varValueMember;
			
			item.ControlType = varControlType;
			
			item.DefaultOption = varDefaultOption;
			
			item.GroupId = varGroupId;
			
			item.LoaiDanhmuc = varLoaiDanhmuc;
			
			item.Parent = varParent;
			
			item.Filter = varFilter;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varMa,string varMota,short? varStt,int? varMultiReportId,byte? varRtxt,byte? varTopLabel,byte? varMultiline,int? varX,int? varY,int? varW,int? varH,int? varLblW,byte? varAllowEmpty,byte? varBold,string varDataSource,string varDisplayMember,string varValueMember,byte? varControlType,string varDefaultOption,string varGroupId,string varLoaiDanhmuc,string varParent,string varFilter)
		{
			SysDynamicControl item = new SysDynamicControl();
			
				item.Id = varId;
			
				item.Ma = varMa;
			
				item.Mota = varMota;
			
				item.Stt = varStt;
			
				item.MultiReportId = varMultiReportId;
			
				item.Rtxt = varRtxt;
			
				item.TopLabel = varTopLabel;
			
				item.Multiline = varMultiline;
			
				item.X = varX;
			
				item.Y = varY;
			
				item.W = varW;
			
				item.H = varH;
			
				item.LblW = varLblW;
			
				item.AllowEmpty = varAllowEmpty;
			
				item.Bold = varBold;
			
				item.DataSource = varDataSource;
			
				item.DisplayMember = varDisplayMember;
			
				item.ValueMember = varValueMember;
			
				item.ControlType = varControlType;
			
				item.DefaultOption = varDefaultOption;
			
				item.GroupId = varGroupId;
			
				item.LoaiDanhmuc = varLoaiDanhmuc;
			
				item.Parent = varParent;
			
				item.Filter = varFilter;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MotaColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SttColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MultiReportIdColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn RtxtColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TopLabelColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn MultilineColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn XColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn YColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn WColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn HColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn LblWColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn AllowEmptyColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn BoldColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn DataSourceColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn DisplayMemberColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn ValueMemberColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn ControlTypeColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn DefaultOptionColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn GroupIdColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn LoaiDanhmucColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn ParentColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn FilterColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string Ma = @"Ma";
			 public static string Mota = @"mota";
			 public static string Stt = @"stt";
			 public static string MultiReportId = @"MultiReport_ID";
			 public static string Rtxt = @"Rtxt";
			 public static string TopLabel = @"topLabel";
			 public static string Multiline = @"multiline";
			 public static string X = @"X";
			 public static string Y = @"Y";
			 public static string W = @"W";
			 public static string H = @"H";
			 public static string LblW = @"lblW";
			 public static string AllowEmpty = @"AllowEmpty";
			 public static string Bold = @"Bold";
			 public static string DataSource = @"Data_Source";
			 public static string DisplayMember = @"Display_member";
			 public static string ValueMember = @"Value_Member";
			 public static string ControlType = @"Control_Type";
			 public static string DefaultOption = @"Default_Option";
			 public static string GroupId = @"Group_Id";
			 public static string LoaiDanhmuc = @"Loai_danhmuc";
			 public static string Parent = @"parent";
			 public static string Filter = @"filter";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
