using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the QrPhieuThanhtoan class.
	/// </summary>
    [Serializable]
	public partial class QrPhieuThanhtoanCollection : ActiveList<QrPhieuThanhtoan, QrPhieuThanhtoanCollection>
	{	   
		public QrPhieuThanhtoanCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>QrPhieuThanhtoanCollection</returns>
		public QrPhieuThanhtoanCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                QrPhieuThanhtoan o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the qr_phieu_thanhtoan table.
	/// </summary>
	[Serializable]
	public partial class QrPhieuThanhtoan : ActiveRecord<QrPhieuThanhtoan>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public QrPhieuThanhtoan()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public QrPhieuThanhtoan(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public QrPhieuThanhtoan(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public QrPhieuThanhtoan(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("qr_phieu_thanhtoan", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdQrCode = new TableSchema.TableColumn(schema);
				colvarIdQrCode.ColumnName = "id_qrCode";
				colvarIdQrCode.DataType = DbType.Int64;
				colvarIdQrCode.MaxLength = 0;
				colvarIdQrCode.AutoIncrement = true;
				colvarIdQrCode.IsNullable = false;
				colvarIdQrCode.IsPrimaryKey = true;
				colvarIdQrCode.IsForeignKey = false;
				colvarIdQrCode.IsReadOnly = false;
				colvarIdQrCode.DefaultSetting = @"";
				colvarIdQrCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdQrCode);
				
				TableSchema.TableColumn colvarMaQrcode = new TableSchema.TableColumn(schema);
				colvarMaQrcode.ColumnName = "ma_qrcode";
				colvarMaQrcode.DataType = DbType.String;
				colvarMaQrcode.MaxLength = 50;
				colvarMaQrcode.AutoIncrement = false;
				colvarMaQrcode.IsNullable = false;
				colvarMaQrcode.IsPrimaryKey = false;
				colvarMaQrcode.IsForeignKey = false;
				colvarMaQrcode.IsReadOnly = false;
				colvarMaQrcode.DefaultSetting = @"";
				colvarMaQrcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaQrcode);
				
				TableSchema.TableColumn colvarMaLuotkham = new TableSchema.TableColumn(schema);
				colvarMaLuotkham.ColumnName = "ma_luotkham";
				colvarMaLuotkham.DataType = DbType.String;
				colvarMaLuotkham.MaxLength = 20;
				colvarMaLuotkham.AutoIncrement = false;
				colvarMaLuotkham.IsNullable = false;
				colvarMaLuotkham.IsPrimaryKey = false;
				colvarMaLuotkham.IsForeignKey = false;
				colvarMaLuotkham.IsReadOnly = false;
				colvarMaLuotkham.DefaultSetting = @"";
				colvarMaLuotkham.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaLuotkham);
				
				TableSchema.TableColumn colvarIdBenhnhan = new TableSchema.TableColumn(schema);
				colvarIdBenhnhan.ColumnName = "id_benhnhan";
				colvarIdBenhnhan.DataType = DbType.Int64;
				colvarIdBenhnhan.MaxLength = 0;
				colvarIdBenhnhan.AutoIncrement = false;
				colvarIdBenhnhan.IsNullable = false;
				colvarIdBenhnhan.IsPrimaryKey = false;
				colvarIdBenhnhan.IsForeignKey = false;
				colvarIdBenhnhan.IsReadOnly = false;
				colvarIdBenhnhan.DefaultSetting = @"";
				colvarIdBenhnhan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdBenhnhan);
				
				TableSchema.TableColumn colvarIdThanhtoan = new TableSchema.TableColumn(schema);
				colvarIdThanhtoan.ColumnName = "id_thanhtoan";
				colvarIdThanhtoan.DataType = DbType.Int64;
				colvarIdThanhtoan.MaxLength = 0;
				colvarIdThanhtoan.AutoIncrement = false;
				colvarIdThanhtoan.IsNullable = true;
				colvarIdThanhtoan.IsPrimaryKey = false;
				colvarIdThanhtoan.IsForeignKey = false;
				colvarIdThanhtoan.IsReadOnly = false;
				colvarIdThanhtoan.DefaultSetting = @"";
				colvarIdThanhtoan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdThanhtoan);
				
				TableSchema.TableColumn colvarMaPttt = new TableSchema.TableColumn(schema);
				colvarMaPttt.ColumnName = "ma_pttt";
				colvarMaPttt.DataType = DbType.String;
				colvarMaPttt.MaxLength = 20;
				colvarMaPttt.AutoIncrement = false;
				colvarMaPttt.IsNullable = true;
				colvarMaPttt.IsPrimaryKey = false;
				colvarMaPttt.IsForeignKey = false;
				colvarMaPttt.IsReadOnly = false;
				colvarMaPttt.DefaultSetting = @"";
				colvarMaPttt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaPttt);
				
				TableSchema.TableColumn colvarTongTien = new TableSchema.TableColumn(schema);
				colvarTongTien.ColumnName = "tong_tien";
				colvarTongTien.DataType = DbType.Decimal;
				colvarTongTien.MaxLength = 0;
				colvarTongTien.AutoIncrement = false;
				colvarTongTien.IsNullable = true;
				colvarTongTien.IsPrimaryKey = false;
				colvarTongTien.IsForeignKey = false;
				colvarTongTien.IsReadOnly = false;
				
						colvarTongTien.DefaultSetting = @"((0))";
				colvarTongTien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTongTien);
				
				TableSchema.TableColumn colvarSotienQr = new TableSchema.TableColumn(schema);
				colvarSotienQr.ColumnName = "sotien_qr";
				colvarSotienQr.DataType = DbType.Decimal;
				colvarSotienQr.MaxLength = 0;
				colvarSotienQr.AutoIncrement = false;
				colvarSotienQr.IsNullable = true;
				colvarSotienQr.IsPrimaryKey = false;
				colvarSotienQr.IsForeignKey = false;
				colvarSotienQr.IsReadOnly = false;
				
						colvarSotienQr.DefaultSetting = @"((0))";
				colvarSotienQr.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSotienQr);
				
				TableSchema.TableColumn colvarDataQrcode = new TableSchema.TableColumn(schema);
				colvarDataQrcode.ColumnName = "data_qrcode";
				colvarDataQrcode.DataType = DbType.String;
				colvarDataQrcode.MaxLength = -1;
				colvarDataQrcode.AutoIncrement = false;
				colvarDataQrcode.IsNullable = true;
				colvarDataQrcode.IsPrimaryKey = false;
				colvarDataQrcode.IsForeignKey = false;
				colvarDataQrcode.IsReadOnly = false;
				colvarDataQrcode.DefaultSetting = @"";
				colvarDataQrcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDataQrcode);
				
				TableSchema.TableColumn colvarDataRequest = new TableSchema.TableColumn(schema);
				colvarDataRequest.ColumnName = "data_request";
				colvarDataRequest.DataType = DbType.String;
				colvarDataRequest.MaxLength = -1;
				colvarDataRequest.AutoIncrement = false;
				colvarDataRequest.IsNullable = true;
				colvarDataRequest.IsPrimaryKey = false;
				colvarDataRequest.IsForeignKey = false;
				colvarDataRequest.IsReadOnly = false;
				colvarDataRequest.DefaultSetting = @"";
				colvarDataRequest.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDataRequest);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "trang_thai";
				colvarTrangThai.DataType = DbType.Byte;
				colvarTrangThai.MaxLength = 0;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = true;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				
						colvarTrangThai.DefaultSetting = @"((0))";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				TableSchema.TableColumn colvarSoLuot = new TableSchema.TableColumn(schema);
				colvarSoLuot.ColumnName = "so_luot";
				colvarSoLuot.DataType = DbType.Int16;
				colvarSoLuot.MaxLength = 0;
				colvarSoLuot.AutoIncrement = false;
				colvarSoLuot.IsNullable = true;
				colvarSoLuot.IsPrimaryKey = false;
				colvarSoLuot.IsForeignKey = false;
				colvarSoLuot.IsReadOnly = false;
				
						colvarSoLuot.DefaultSetting = @"((0))";
				colvarSoLuot.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoLuot);
				
				TableSchema.TableColumn colvarTthaiIn = new TableSchema.TableColumn(schema);
				colvarTthaiIn.ColumnName = "tthai_in";
				colvarTthaiIn.DataType = DbType.Byte;
				colvarTthaiIn.MaxLength = 0;
				colvarTthaiIn.AutoIncrement = false;
				colvarTthaiIn.IsNullable = true;
				colvarTthaiIn.IsPrimaryKey = false;
				colvarTthaiIn.IsForeignKey = false;
				colvarTthaiIn.IsReadOnly = false;
				
						colvarTthaiIn.DefaultSetting = @"((0))";
				colvarTthaiIn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTthaiIn);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "ngay_tao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "nguoi_tao";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 30;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarIpMacTao = new TableSchema.TableColumn(schema);
				colvarIpMacTao.ColumnName = "ip_mac_tao";
				colvarIpMacTao.DataType = DbType.String;
				colvarIpMacTao.MaxLength = 50;
				colvarIpMacTao.AutoIncrement = false;
				colvarIpMacTao.IsNullable = true;
				colvarIpMacTao.IsPrimaryKey = false;
				colvarIpMacTao.IsForeignKey = false;
				colvarIpMacTao.IsReadOnly = false;
				colvarIpMacTao.DefaultSetting = @"";
				colvarIpMacTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpMacTao);
				
				TableSchema.TableColumn colvarQrSource = new TableSchema.TableColumn(schema);
				colvarQrSource.ColumnName = "qr_source";
				colvarQrSource.DataType = DbType.String;
				colvarQrSource.MaxLength = 50;
				colvarQrSource.AutoIncrement = false;
				colvarQrSource.IsNullable = true;
				colvarQrSource.IsPrimaryKey = false;
				colvarQrSource.IsForeignKey = false;
				colvarQrSource.IsReadOnly = false;
				colvarQrSource.DefaultSetting = @"";
				colvarQrSource.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQrSource);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("qr_phieu_thanhtoan",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdQrCode")]
		[Bindable(true)]
		public long IdQrCode 
		{
			get { return GetColumnValue<long>(Columns.IdQrCode); }
			set { SetColumnValue(Columns.IdQrCode, value); }
		}
		  
		[XmlAttribute("MaQrcode")]
		[Bindable(true)]
		public string MaQrcode 
		{
			get { return GetColumnValue<string>(Columns.MaQrcode); }
			set { SetColumnValue(Columns.MaQrcode, value); }
		}
		  
		[XmlAttribute("MaLuotkham")]
		[Bindable(true)]
		public string MaLuotkham 
		{
			get { return GetColumnValue<string>(Columns.MaLuotkham); }
			set { SetColumnValue(Columns.MaLuotkham, value); }
		}
		  
		[XmlAttribute("IdBenhnhan")]
		[Bindable(true)]
		public long IdBenhnhan 
		{
			get { return GetColumnValue<long>(Columns.IdBenhnhan); }
			set { SetColumnValue(Columns.IdBenhnhan, value); }
		}
		  
		[XmlAttribute("IdThanhtoan")]
		[Bindable(true)]
		public long? IdThanhtoan 
		{
			get { return GetColumnValue<long?>(Columns.IdThanhtoan); }
			set { SetColumnValue(Columns.IdThanhtoan, value); }
		}
		  
		[XmlAttribute("MaPttt")]
		[Bindable(true)]
		public string MaPttt 
		{
			get { return GetColumnValue<string>(Columns.MaPttt); }
			set { SetColumnValue(Columns.MaPttt, value); }
		}
		  
		[XmlAttribute("TongTien")]
		[Bindable(true)]
		public decimal? TongTien 
		{
			get { return GetColumnValue<decimal?>(Columns.TongTien); }
			set { SetColumnValue(Columns.TongTien, value); }
		}
		  
		[XmlAttribute("SotienQr")]
		[Bindable(true)]
		public decimal? SotienQr 
		{
			get { return GetColumnValue<decimal?>(Columns.SotienQr); }
			set { SetColumnValue(Columns.SotienQr, value); }
		}
		  
		[XmlAttribute("DataQrcode")]
		[Bindable(true)]
		public string DataQrcode 
		{
			get { return GetColumnValue<string>(Columns.DataQrcode); }
			set { SetColumnValue(Columns.DataQrcode, value); }
		}
		  
		[XmlAttribute("DataRequest")]
		[Bindable(true)]
		public string DataRequest 
		{
			get { return GetColumnValue<string>(Columns.DataRequest); }
			set { SetColumnValue(Columns.DataRequest, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public byte? TrangThai 
		{
			get { return GetColumnValue<byte?>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		  
		[XmlAttribute("SoLuot")]
		[Bindable(true)]
		public short? SoLuot 
		{
			get { return GetColumnValue<short?>(Columns.SoLuot); }
			set { SetColumnValue(Columns.SoLuot, value); }
		}
		  
		[XmlAttribute("TthaiIn")]
		[Bindable(true)]
		public byte? TthaiIn 
		{
			get { return GetColumnValue<byte?>(Columns.TthaiIn); }
			set { SetColumnValue(Columns.TthaiIn, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("IpMacTao")]
		[Bindable(true)]
		public string IpMacTao 
		{
			get { return GetColumnValue<string>(Columns.IpMacTao); }
			set { SetColumnValue(Columns.IpMacTao, value); }
		}
		  
		[XmlAttribute("QrSource")]
		[Bindable(true)]
		public string QrSource 
		{
			get { return GetColumnValue<string>(Columns.QrSource); }
			set { SetColumnValue(Columns.QrSource, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaQrcode,string varMaLuotkham,long varIdBenhnhan,long? varIdThanhtoan,string varMaPttt,decimal? varTongTien,decimal? varSotienQr,string varDataQrcode,string varDataRequest,byte? varTrangThai,short? varSoLuot,byte? varTthaiIn,DateTime? varNgayTao,string varNguoiTao,string varIpMacTao,string varQrSource)
		{
			QrPhieuThanhtoan item = new QrPhieuThanhtoan();
			
			item.MaQrcode = varMaQrcode;
			
			item.MaLuotkham = varMaLuotkham;
			
			item.IdBenhnhan = varIdBenhnhan;
			
			item.IdThanhtoan = varIdThanhtoan;
			
			item.MaPttt = varMaPttt;
			
			item.TongTien = varTongTien;
			
			item.SotienQr = varSotienQr;
			
			item.DataQrcode = varDataQrcode;
			
			item.DataRequest = varDataRequest;
			
			item.TrangThai = varTrangThai;
			
			item.SoLuot = varSoLuot;
			
			item.TthaiIn = varTthaiIn;
			
			item.NgayTao = varNgayTao;
			
			item.NguoiTao = varNguoiTao;
			
			item.IpMacTao = varIpMacTao;
			
			item.QrSource = varQrSource;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varIdQrCode,string varMaQrcode,string varMaLuotkham,long varIdBenhnhan,long? varIdThanhtoan,string varMaPttt,decimal? varTongTien,decimal? varSotienQr,string varDataQrcode,string varDataRequest,byte? varTrangThai,short? varSoLuot,byte? varTthaiIn,DateTime? varNgayTao,string varNguoiTao,string varIpMacTao,string varQrSource)
		{
			QrPhieuThanhtoan item = new QrPhieuThanhtoan();
			
				item.IdQrCode = varIdQrCode;
			
				item.MaQrcode = varMaQrcode;
			
				item.MaLuotkham = varMaLuotkham;
			
				item.IdBenhnhan = varIdBenhnhan;
			
				item.IdThanhtoan = varIdThanhtoan;
			
				item.MaPttt = varMaPttt;
			
				item.TongTien = varTongTien;
			
				item.SotienQr = varSotienQr;
			
				item.DataQrcode = varDataQrcode;
			
				item.DataRequest = varDataRequest;
			
				item.TrangThai = varTrangThai;
			
				item.SoLuot = varSoLuot;
			
				item.TthaiIn = varTthaiIn;
			
				item.NgayTao = varNgayTao;
			
				item.NguoiTao = varNguoiTao;
			
				item.IpMacTao = varIpMacTao;
			
				item.QrSource = varQrSource;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdQrCodeColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaQrcodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MaLuotkhamColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IdBenhnhanColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IdThanhtoanColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MaPtttColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TongTienColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SotienQrColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DataQrcodeColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn DataRequestColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn SoLuotColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn TthaiInColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn IpMacTaoColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn QrSourceColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdQrCode = @"id_qrCode";
			 public static string MaQrcode = @"ma_qrcode";
			 public static string MaLuotkham = @"ma_luotkham";
			 public static string IdBenhnhan = @"id_benhnhan";
			 public static string IdThanhtoan = @"id_thanhtoan";
			 public static string MaPttt = @"ma_pttt";
			 public static string TongTien = @"tong_tien";
			 public static string SotienQr = @"sotien_qr";
			 public static string DataQrcode = @"data_qrcode";
			 public static string DataRequest = @"data_request";
			 public static string TrangThai = @"trang_thai";
			 public static string SoLuot = @"so_luot";
			 public static string TthaiIn = @"tthai_in";
			 public static string NgayTao = @"ngay_tao";
			 public static string NguoiTao = @"nguoi_tao";
			 public static string IpMacTao = @"ip_mac_tao";
			 public static string QrSource = @"qr_source";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
