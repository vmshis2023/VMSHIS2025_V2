using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VMS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the DynamicField class.
	/// </summary>
    [Serializable]
	public partial class DynamicFieldCollection : ActiveList<DynamicField, DynamicFieldCollection>
	{	   
		public DynamicFieldCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DynamicFieldCollection</returns>
		public DynamicFieldCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DynamicField o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DynamicFields table.
	/// </summary>
	[Serializable]
	public partial class DynamicField : ActiveRecord<DynamicField>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DynamicField()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DynamicField(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DynamicField(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DynamicField(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DynamicFields", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarMa = new TableSchema.TableColumn(schema);
				colvarMa.ColumnName = "Ma";
				colvarMa.DataType = DbType.String;
				colvarMa.MaxLength = 150;
				colvarMa.AutoIncrement = false;
				colvarMa.IsNullable = true;
				colvarMa.IsPrimaryKey = false;
				colvarMa.IsForeignKey = false;
				colvarMa.IsReadOnly = false;
				colvarMa.DefaultSetting = @"";
				colvarMa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMa);
				
				TableSchema.TableColumn colvarMota = new TableSchema.TableColumn(schema);
				colvarMota.ColumnName = "mota";
				colvarMota.DataType = DbType.String;
				colvarMota.MaxLength = 150;
				colvarMota.AutoIncrement = false;
				colvarMota.IsNullable = true;
				colvarMota.IsPrimaryKey = false;
				colvarMota.IsForeignKey = false;
				colvarMota.IsReadOnly = false;
				colvarMota.DefaultSetting = @"";
				colvarMota.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMota);
				
				TableSchema.TableColumn colvarStt = new TableSchema.TableColumn(schema);
				colvarStt.ColumnName = "stt";
				colvarStt.DataType = DbType.Int16;
				colvarStt.MaxLength = 0;
				colvarStt.AutoIncrement = false;
				colvarStt.IsNullable = true;
				colvarStt.IsPrimaryKey = false;
				colvarStt.IsForeignKey = false;
				colvarStt.IsReadOnly = false;
				colvarStt.DefaultSetting = @"";
				colvarStt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStt);
				
				TableSchema.TableColumn colvarIdVungks = new TableSchema.TableColumn(schema);
				colvarIdVungks.ColumnName = "id_vungks";
				colvarIdVungks.DataType = DbType.Int32;
				colvarIdVungks.MaxLength = 0;
				colvarIdVungks.AutoIncrement = false;
				colvarIdVungks.IsNullable = true;
				colvarIdVungks.IsPrimaryKey = false;
				colvarIdVungks.IsForeignKey = false;
				colvarIdVungks.IsReadOnly = false;
				colvarIdVungks.DefaultSetting = @"";
				colvarIdVungks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdVungks);
				
				TableSchema.TableColumn colvarRtxt = new TableSchema.TableColumn(schema);
				colvarRtxt.ColumnName = "Rtxt";
				colvarRtxt.DataType = DbType.Byte;
				colvarRtxt.MaxLength = 0;
				colvarRtxt.AutoIncrement = false;
				colvarRtxt.IsNullable = true;
				colvarRtxt.IsPrimaryKey = false;
				colvarRtxt.IsForeignKey = false;
				colvarRtxt.IsReadOnly = false;
				colvarRtxt.DefaultSetting = @"";
				colvarRtxt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRtxt);
				
				TableSchema.TableColumn colvarTopLabel = new TableSchema.TableColumn(schema);
				colvarTopLabel.ColumnName = "topLabel";
				colvarTopLabel.DataType = DbType.Byte;
				colvarTopLabel.MaxLength = 0;
				colvarTopLabel.AutoIncrement = false;
				colvarTopLabel.IsNullable = true;
				colvarTopLabel.IsPrimaryKey = false;
				colvarTopLabel.IsForeignKey = false;
				colvarTopLabel.IsReadOnly = false;
				colvarTopLabel.DefaultSetting = @"";
				colvarTopLabel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTopLabel);
				
				TableSchema.TableColumn colvarMultiline = new TableSchema.TableColumn(schema);
				colvarMultiline.ColumnName = "multiline";
				colvarMultiline.DataType = DbType.Byte;
				colvarMultiline.MaxLength = 0;
				colvarMultiline.AutoIncrement = false;
				colvarMultiline.IsNullable = true;
				colvarMultiline.IsPrimaryKey = false;
				colvarMultiline.IsForeignKey = false;
				colvarMultiline.IsReadOnly = false;
				
						colvarMultiline.DefaultSetting = @"((0))";
				colvarMultiline.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMultiline);
				
				TableSchema.TableColumn colvarW = new TableSchema.TableColumn(schema);
				colvarW.ColumnName = "W";
				colvarW.DataType = DbType.Int32;
				colvarW.MaxLength = 0;
				colvarW.AutoIncrement = false;
				colvarW.IsNullable = true;
				colvarW.IsPrimaryKey = false;
				colvarW.IsForeignKey = false;
				colvarW.IsReadOnly = false;
				colvarW.DefaultSetting = @"";
				colvarW.ForeignKeyTableName = "";
				schema.Columns.Add(colvarW);
				
				TableSchema.TableColumn colvarH = new TableSchema.TableColumn(schema);
				colvarH.ColumnName = "H";
				colvarH.DataType = DbType.Int32;
				colvarH.MaxLength = 0;
				colvarH.AutoIncrement = false;
				colvarH.IsNullable = true;
				colvarH.IsPrimaryKey = false;
				colvarH.IsForeignKey = false;
				colvarH.IsReadOnly = false;
				colvarH.DefaultSetting = @"";
				colvarH.ForeignKeyTableName = "";
				schema.Columns.Add(colvarH);
				
				TableSchema.TableColumn colvarLblW = new TableSchema.TableColumn(schema);
				colvarLblW.ColumnName = "lblW";
				colvarLblW.DataType = DbType.Int32;
				colvarLblW.MaxLength = 0;
				colvarLblW.AutoIncrement = false;
				colvarLblW.IsNullable = true;
				colvarLblW.IsPrimaryKey = false;
				colvarLblW.IsForeignKey = false;
				colvarLblW.IsReadOnly = false;
				colvarLblW.DefaultSetting = @"";
				colvarLblW.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLblW);
				
				TableSchema.TableColumn colvarAllowEmpty = new TableSchema.TableColumn(schema);
				colvarAllowEmpty.ColumnName = "AllowEmpty";
				colvarAllowEmpty.DataType = DbType.Byte;
				colvarAllowEmpty.MaxLength = 0;
				colvarAllowEmpty.AutoIncrement = false;
				colvarAllowEmpty.IsNullable = true;
				colvarAllowEmpty.IsPrimaryKey = false;
				colvarAllowEmpty.IsForeignKey = false;
				colvarAllowEmpty.IsReadOnly = false;
				
						colvarAllowEmpty.DefaultSetting = @"((0))";
				colvarAllowEmpty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAllowEmpty);
				
				TableSchema.TableColumn colvarBold = new TableSchema.TableColumn(schema);
				colvarBold.ColumnName = "Bold";
				colvarBold.DataType = DbType.Byte;
				colvarBold.MaxLength = 0;
				colvarBold.AutoIncrement = false;
				colvarBold.IsNullable = true;
				colvarBold.IsPrimaryKey = false;
				colvarBold.IsForeignKey = false;
				colvarBold.IsReadOnly = false;
				
						colvarBold.DefaultSetting = @"((0))";
				colvarBold.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBold);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("DynamicFields",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Ma")]
		[Bindable(true)]
		public string Ma 
		{
			get { return GetColumnValue<string>(Columns.Ma); }
			set { SetColumnValue(Columns.Ma, value); }
		}
		  
		[XmlAttribute("Mota")]
		[Bindable(true)]
		public string Mota 
		{
			get { return GetColumnValue<string>(Columns.Mota); }
			set { SetColumnValue(Columns.Mota, value); }
		}
		  
		[XmlAttribute("Stt")]
		[Bindable(true)]
		public short? Stt 
		{
			get { return GetColumnValue<short?>(Columns.Stt); }
			set { SetColumnValue(Columns.Stt, value); }
		}
		  
		[XmlAttribute("IdVungks")]
		[Bindable(true)]
		public int? IdVungks 
		{
			get { return GetColumnValue<int?>(Columns.IdVungks); }
			set { SetColumnValue(Columns.IdVungks, value); }
		}
		  
		[XmlAttribute("Rtxt")]
		[Bindable(true)]
		public byte? Rtxt 
		{
			get { return GetColumnValue<byte?>(Columns.Rtxt); }
			set { SetColumnValue(Columns.Rtxt, value); }
		}
		  
		[XmlAttribute("TopLabel")]
		[Bindable(true)]
		public byte? TopLabel 
		{
			get { return GetColumnValue<byte?>(Columns.TopLabel); }
			set { SetColumnValue(Columns.TopLabel, value); }
		}
		  
		[XmlAttribute("Multiline")]
		[Bindable(true)]
		public byte? Multiline 
		{
			get { return GetColumnValue<byte?>(Columns.Multiline); }
			set { SetColumnValue(Columns.Multiline, value); }
		}
		  
		[XmlAttribute("W")]
		[Bindable(true)]
		public int? W 
		{
			get { return GetColumnValue<int?>(Columns.W); }
			set { SetColumnValue(Columns.W, value); }
		}
		  
		[XmlAttribute("H")]
		[Bindable(true)]
		public int? H 
		{
			get { return GetColumnValue<int?>(Columns.H); }
			set { SetColumnValue(Columns.H, value); }
		}
		  
		[XmlAttribute("LblW")]
		[Bindable(true)]
		public int? LblW 
		{
			get { return GetColumnValue<int?>(Columns.LblW); }
			set { SetColumnValue(Columns.LblW, value); }
		}
		  
		[XmlAttribute("AllowEmpty")]
		[Bindable(true)]
		public byte? AllowEmpty 
		{
			get { return GetColumnValue<byte?>(Columns.AllowEmpty); }
			set { SetColumnValue(Columns.AllowEmpty, value); }
		}
		  
		[XmlAttribute("Bold")]
		[Bindable(true)]
		public byte? Bold 
		{
			get { return GetColumnValue<byte?>(Columns.Bold); }
			set { SetColumnValue(Columns.Bold, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMa,string varMota,short? varStt,int? varIdVungks,byte? varRtxt,byte? varTopLabel,byte? varMultiline,int? varW,int? varH,int? varLblW,byte? varAllowEmpty,byte? varBold)
		{
			DynamicField item = new DynamicField();
			
			item.Ma = varMa;
			
			item.Mota = varMota;
			
			item.Stt = varStt;
			
			item.IdVungks = varIdVungks;
			
			item.Rtxt = varRtxt;
			
			item.TopLabel = varTopLabel;
			
			item.Multiline = varMultiline;
			
			item.W = varW;
			
			item.H = varH;
			
			item.LblW = varLblW;
			
			item.AllowEmpty = varAllowEmpty;
			
			item.Bold = varBold;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varMa,string varMota,short? varStt,int? varIdVungks,byte? varRtxt,byte? varTopLabel,byte? varMultiline,int? varW,int? varH,int? varLblW,byte? varAllowEmpty,byte? varBold)
		{
			DynamicField item = new DynamicField();
			
				item.Id = varId;
			
				item.Ma = varMa;
			
				item.Mota = varMota;
			
				item.Stt = varStt;
			
				item.IdVungks = varIdVungks;
			
				item.Rtxt = varRtxt;
			
				item.TopLabel = varTopLabel;
			
				item.Multiline = varMultiline;
			
				item.W = varW;
			
				item.H = varH;
			
				item.LblW = varLblW;
			
				item.AllowEmpty = varAllowEmpty;
			
				item.Bold = varBold;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MotaColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SttColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IdVungksColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn RtxtColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TopLabelColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn MultilineColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn WColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn HColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn LblWColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn AllowEmptyColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn BoldColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string Ma = @"Ma";
			 public static string Mota = @"mota";
			 public static string Stt = @"stt";
			 public static string IdVungks = @"id_vungks";
			 public static string Rtxt = @"Rtxt";
			 public static string TopLabel = @"topLabel";
			 public static string Multiline = @"multiline";
			 public static string W = @"W";
			 public static string H = @"H";
			 public static string LblW = @"lblW";
			 public static string AllowEmpty = @"AllowEmpty";
			 public static string Bold = @"Bold";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
